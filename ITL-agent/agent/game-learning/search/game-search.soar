sp {game-search*elaborate*problem-space
   (state <s> ^name game-search
              ^dcount <dc>
             -^depth-limit <dc> #need actions inorder to determine some goals.#TODO check cost of ommiting(can be bad!!#undidquick
              ^simulated true)
-->
   (<s> ^ntype action goal failure # heuristic
        ^gtype action failure heuristic) #only failure on every
}
sp {games*selection*elaborate*evaluate-operator*default-desired-copy
   (state <s> ^problemspace games
              ^operator <o> +)
   (<o> ^name evaluate-operator)
-->
   (<o> ^default-desired-copy yes)
   (<o> ^default-operator-copy yes)
}
sp {game-search*elaborate*completed-learning*true
   (state <s> ^name game-search)
-->
   (<s> ^completed-learning true)
}
#don't propose new actions, heurisitcs at bottom depth of search
sp {game-search*elaborate*problem-space*bottom
   (state <s> ^name game-search
              ^dcount <dc>
              ^depth-limit <dc>
              ^simulated true)
-->
   (<s> ^ntype action goal failure
        ^gtype failure)
}
sp {game-search*elaborate*operator
   (state <s> ^name game-search
              ^superstate.operator <o>)
   (<o> ^name game-search
        ^dcount <dc>
        ^depth-limit <dl>
        ^list <l>
        ^current <g> 
        ^game <name>)
-->
   (<s> ^dcount <dc>
        ^depth-limit <dl>
        ^list <l>
        ^problemspace games
        ^desired <d>
        ^current <g> 
        ^game <name>)
   (<d> ^found true)
}
sp {game-search*elaborate*goal #for only at depth
   (state <s> ^name game-search
              ^simulated true
             -^multiplayer true
              ^dcount <dc>
              ^depth-limit <dc>)
-->
   (<s> ^gtype goal
        ^goal-search-delay 1)
}
sp {game-search*elaborate*goal*multiplayer #for only at depth
   (state <s> ^name game-search
              ^multiplayer true
              ^simulated true)
-->
   (<s> ^gtype goal
        ^goal-search-delay 1)
}
sp {game-search*increment-goal-delay #for only at depth
   (state <s> ^name game-search
              ^goal-search-delay {<d> < 60}) #60
-->
   (<s> ^goal-search-delay (+ 1 <d>))
}
sp {game-search*elaborate*multiplayer
   (state <s> ^name game-search
              ^superstate.superstate.multiplayer <m>)
-->
   (<s> ^multiplayer <m>)
}
sp {game-search*elaborate*game
   (state <s> ^name game-search
              ^superstate.superstate.game <m>)
-->
   (<s> ^game <m>)
}           
sp {game-search*elaborate*depth-limit
   (state <s> ^name game-search
              ^superstate.superstate.depth-limit <m>)
-->
   (<s> ^depth-limit <m>)
}
sp {game-search*elaborate*list
   (state <s> ^name game-search
              ^superstate.superstate.list <m>)
-->
   (<s> ^list <m>)
}
sp {game-search*elaborate*dcount
   (state <s> ^name game-search
              ^superstate.superstate.dcount <dc>)
-->
   (<s> ^dcount (+ 1 <dc>))
}
sp {game-search*elaborate*problem-space*world
   (state <s> ^name game-search
              ^superstate.superstate.world <world2>)
-->
   (<s> ^problem-space <ps>)
   (<ps> ^world <world> ^dont-copy-anything true ^name game)#^name action
   (<world> ^source <world2>
            ^copy-type deep)
}
sp {game-search*apply*simulate*write
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<vnum> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p> ^<i1> <num> ^<i2> <obj1>)
   (<com> ^<obj1> <objb>)
   (<objb> ^predicates <pb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2> ^verb-name write1)
   
-->
#(write (cmd print <o> -d 4))
#(write (crlf) <num>)
		(<pb> ^value <num>)
}
sp {game-search*apply*simulate*remove
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.objects <objs>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<vnum> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p> ^<i1> <obj1>)
   (<com> ^<obj1> <objb>)
   (<objb> ^predicates <pb>)
   (<v1> ^1 <i1> ^verb-name remove1)
   (<objs> ^object <objb>)
-->
#(write (cmd print <v1> -d 5))
#(write (cmd print <objs> -d 2))
	(<objs> ^object <objb> -)
}
sp {game-search*apply*simulate*remove*instance
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates.predicate <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<vnum> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p> ^<i1> <obj1>)
   (<com> ^<obj1> <objb>)
   (<objb> ^predicates <pb>)
   (<v1> ^1 <i1> ^verb-name remove1)
   (<p2> ^instance <in>)
   (<in> ^<something> <objb>)
-->
#(write (cmd print <in> -d 4))
   (<p2> ^instance <in> -)
}
#INHERIT primitive relations of locations beneath a block
#need to not copy
sp {game-search*elaborate*inherited*location*relations
   (state <s> ^name game-search
             # ^deep-copy-world.copy-objects-map <com>
              ^simulated true
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates.category location)
   (<prep2> -^handle on1 ^instance <instance2> -^dont-copy <instance2>)
   (<instance2> ^{<< 1 2 >> <arg1>} <obja> ^{<< 1 2 >> <arg2>} {<objx> <> <obj>} -^3 ^{<arg1> <> <arg2>})
-->
   (<prep2> ^instance <instance4> ^dont-copy <instance4>) #dont copy
   (<instance4> ^<arg1> <obj> ^<arg2> <objx>)
}
sp {game-search*elaborate*inherited*location*relations*2
   (state <s> ^name game-search
             # ^deep-copy-world.copy-objects-map <com>
              ^simulated true
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates.category location)
   (<prep2> -^handle on1 ^instance <instance2> ^dont-copy <instance2>)
   (<instance2> ^1 <obja> ^2 {<objx> <> <obj>} -^3)
-->
#(interrupt)
   (<prep2> ^instance <instance4> ^dont-copy <instance4>) #dont copy
   (<instance4> ^1 <obj> ^2 <objx>)
}

#inherit x y row column
#how not to copy (no longer valid if moved)
sp {game-search*elaborate*inherited*location*xy*coordinate
   (state <s> ^name game-search
   		  	  ^simulated true
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates <preds>)
   (<preds> ^{<< x y row column position >> <xy>} <cord> ) #^category location 
   (<obj> ^predicates <op>)
-->
   (<op> ^<xy> <cord> ^dont-copy <xy> ^dont-copy dont-copy)
}
#sp {game-search*elaborate*inherited*location*relations
#   (state <s> ^name game-search
#             # ^deep-copy-world.copy-objects-map <com>
#              ^simulated true
#              ^world.predicates <p2>)
#   (<p2> ^predicate <prep> ^predicate <prep2>)
#   (<prep> ^handle on1 ^instance <instance>)
#   (<instance> ^1 <obj> ^2 <obja>)
#   (<obja> ^predicates.category location)
#   (<prep2> -^handle on1 ^instance <instance2>)
#   (<instance2> ^{<< 1 2 >> <arg1>} <obja> ^{<< 1 2 >> <arg2>} {<objx> <> <obj>} -^3 ^{<arg1> <> <arg2>})
#-{(<prep> ^dont-copy <instance>)
#  (<prep2> ^dont-copy <instance>)}
#   -->
#   (<prep2> ^instance <instance4> ^dont-copy <instance4>) #dont copy
#   (<instance4> ^<arg1> <obj> ^<arg2> <objx>)
#}
#sp {game-search*elaborate*inherited*location*relations*2
#   (state <s> ^name game-search
#             # ^deep-copy-world.copy-objects-map <com>
#              ^simulated true
#              ^world.predicates <p2>)
#   (<p2> ^predicate <prep> ^predicate <prep2>)
#   (<prep> ^handle on1 ^instance <instance>)
#   (<instance> ^1 <obj> ^2 <obja>)
#   (<obja> ^predicates.category location)
#   (<prep2> -^handle on1 ^instance <instance2>)
#   (<instance2> ^2 <obja> ^1 {<objx> <> <obj>} -^3)
#-->
#   (<prep2> ^instance <instance4> ^dont-copy <instance4>)
#   (<instance4> ^2 <obj> ^1 <objx>)
#}
#need to make sure objects same?
sp {game-search*apply*simulate
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle below1 ^instance <instance>)
   (<instance> ^2 <obja>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2> -^verb-name write1 -^verb-name remove1) 
-->
#(write (cmd print <o> -d 5))
   (<prep> ^instance <instance> -
           ^instance <instance3>)
   (<prep2> ^instance <instance2> -
            ^instance <instance4>)
   (<instance3> ^1 <objb> ^2 <obja>)
   (<instance4> ^1 <obja> ^2 <objb>)
}

sp {game-search*apply*simulate*in1
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p2> ^predicate <prep> ^predicate <prep2> ^predicate <prep3>)
   (<prep> ^handle below1 ^instance <instance>)
   (<instance> ^2 <obja>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<prep3> ^handle in1)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   (<v1> ^verb-prep in1 ^1 <i1> ^2 <i2> -^verb-name write1 -^verb-name remove1) 
-->
#(write (cmd print <o> -d 5))
   (<prep> ^instance <instance> -)
   (<prep2> ^instance <instance2> -)
   (<prep3> ^instance <instance4>)
   (<instance4> ^1 <obja> ^2 <objb>)
}
sp {game-search*apply*simulate*no-below
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p2> -^predicate.handle below1 ^predicate <prep2>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2> -^verb-name write1 -^verb-name remove1)
-->
#(write (cmd print <o> -d 5))
   (<prep2> ^instance <instance2> -
            ^instance <instance4>)
   (<instance4> ^1 <obja> ^2 <objb>)
}

sp {game-search*apply*simulate*no-below*in1
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p2> -^predicate.handle below1 ^predicate <prep2> ^predicate <prep3>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<prep3> ^handle in1)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   (<v1> ^verb-prep in1 ^1 <i1> ^2 <i2> -^verb-name write1 -^verb-name remove1)
-->
#(write (cmd print <o> -d 5))
   (<prep2> ^instance <instance2> -)
   (<prep3> ^instance <instance4>)
   (<instance4> ^1 <obja> ^2 <objb>)
}

sp {game-search*apply*simulate*right-of
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p2> ^predicate <prep>)
   (<prep> ^handle right-of1 ^instance <instance>)
   (<instance> ^<< 1 2 >> <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   #(<com> ^<obj> <obja> ^<obj1> <objb>)
   (<com> ^entry <e1> ^entry <e2>)
   (<e1> ^source <obj> ^copy <obja>)
   (<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>) 
-->
   (<prep> ^instance <instance> -)
}
#move set of objects
#todo make versions for in
sp {game-search*apply*simulate*set
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle below1 ^instance <instance>)
   (<instance> ^2 <obja>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <objects> ^<i2> <obj1>)
   (<objects> ^object <obj>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   #(<com> ^entry <e1> ^entry <e2>)
   #(<e1> ^source <obj> ^copy <obja>)
   #(<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>)
-->
   (<prep> ^instance <instance> -
           ^instance <instance3>)
   (<prep2> ^instance <instance2> -
            ^instance <instance4>)
   (<instance3> ^1 <objb> ^2 <obja>)
   (<instance4> ^1 <obja> ^2 <objb>)
}

sp {game-search*apply*simulate*set*no-below
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>  #multiple actions possible
        ^parameters <p>)
   (<p2> -^predicate.handle below1 ^predicate <prep2>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <objects> ^<i2> <obj1>)
   (<objects> ^object <obj>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   #(<com> ^entry <e1> ^entry <e2>)
   #(<e1> ^source <obj> ^copy <obja>)
   #(<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>)
-->
   (<prep2> ^instance <instance2> -
            ^instance <instance4>)
   (<instance4> ^1 <obja> ^2 <objb>)
}
#simulate 2 for no preexisting on relationship
sp {game-search*apply*simulate2
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>
        ^parameters <p>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle below1 -^instance.{2} <obja>)
   (<prep2> ^handle on1 -^instance.{1} <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
#   (<com> ^entry <e1> ^entry <e2>)
#   (<e1> ^source <obj> ^copy <obja>)
#   (<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>) 
-->
   (<prep> ^instance <instance3>)
   (<prep2> ^instance <instance4>)
   (<instance3> ^1 <objb> ^2 <obja>)
   (<instance4> ^1 <obja> ^2 <objb>)
}
sp {game-search*apply*simulate2*no-below
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>
        ^parameters <p>)
   (<p2> -^predicate.handle below1 ^predicate <prep2>)
   (<prep2> ^handle on1 -^instance.{1} <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
#   (<com> ^entry <e1> ^entry <e2>)
#   (<e1> ^source <obj> ^copy <obja>)
#   (<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>) 
-->
   (<prep2> ^instance <instance4>)
   (<instance4> ^1 <obja> ^2 <objb>)
}
sp {game-search*apply*simulate2*in1
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>
        ^parameters <p>)
   (<p2> -^predicate.handle below1 ^predicate <prep2> ^predicate <prep3>)
   (<prep2> ^handle on1 -^instance.{1} <obja>)
   (<prep3> ^handle in1 ^instance <instance2>)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
#   (<com> ^entry <e1> ^entry <e2>)
#   (<e1> ^source <obj> ^copy <obja>)
#   (<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep in1 ^1 <i1> ^2 <i2>) 
-->
   (<prep3> ^instance <instance2> -)
   (<prep3> ^instance <instance4>)
   (<instance4> ^1 <obja> ^2 <objb>)
}
sp {game-search*apply*simulate2*set
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>
        ^parameters <p>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle below1 -^instance.{2} <obja>)
   (<prep2> ^handle on1 -^instance.{1} <obja>)
   (<p> ^<i1> <objects> ^<i2> <obj1>)
   (<objects> ^object <obj>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   #(<com> ^entry <e1> ^entry <e2>)
   #(<e1> ^source <obj> ^copy <obja>)
   #(<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>)
-->
   (<prep> ^instance <instance3>)
   (<prep2> ^instance <instance4>)
   (<instance3> ^1 <objb> ^2 <obja>)
   (<instance4> ^1 <obja> ^2 <objb>)
}

sp {game-search*apply*simulate2*set*no-below
   (state <s> ^name game-search
              ^deep-copy-world.copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure.<num> <v1>
        ^parameters <p>)
   (<p2> -^predicate.handle below1 ^predicate <prep2>)
   (<prep2> ^handle on1 -^instance.{1} <obja>)
   (<p> ^<i1> <objects> ^<i2> <obj1>)
   (<objects> ^object <obj>)
   (<obj> ^handle <ha>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   #(<com> ^entry <e1> ^entry <e2>)
   #(<e1> ^source <obj> ^copy <obja>)
   #(<e2> ^source <obj1> ^copy <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>)
-->
   (<prep2> ^instance <instance4>)
   (<instance4> ^1 <obja> ^2 <objb>)
}
sp {game-search*elaborate*top-level*simulated
   (state <s> ^name game-search
              ^superstate.name find-solution)
-->
   (<s> ^simulated true)
}
sp {game-search*elaborate*other-levels*simulated
   (state <s> ^name game-search
              ^operator <o>)
   (<o> ^type action ^duplicate-of)
-->
   (<s> ^simulated true)
}
sp {game-search*elaborate*action*nlp-set
   (state <s> ^name game-search
              ^gtype <gtype>
              ^<gtype> <act>)
   (<act> ^predicate-structure <p>)
-->
	(<act> ^nlp-set <p>)
}
sp {game-search*elaborate*sub-conditions
   (state <s> ^name game-search
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}
sp {game-search*elaborate*sub-conditions*predicate
   (state <s> ^name game-search
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {game-search*elaborate*nlp-set*verb-structure
   (state <s> ^name game-search
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs>)
-->
   (<t> ^verb-structure <vs>)
}
sp {game-search*elaborate*opponent
   (state <s> ^name game-search
              ^multiplayer true
              ^dcount << 1 3 5 7 9 >>)
-->
   (<s> ^opponent true)
}
sp {game-search*elaborate*opponent*false
   (state <s> ^name game-search
              ^multiplayer true
              ^dcount << 0 2 4 6 8 >>)
-->
   (<s> ^opponent false)
}
sp {game-search*elaborate*retrieve-game
   (state <s> ^name game-search
              ^game <m>)
-->
   (<s> ^retrieve-game <m>)
}
#sp {game-search*elaborate*input-args
#   (state <s> ^name game-search
#              ^gtype <gtype>
#              ^predicate <T5>
#              ^<gtype>.condition <co>)
#   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
#   (<args> ^num > 0)
#   (<args> ^<a1> <c1>)
#   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
#   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
#   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype <rtype>)
#   (<nlps> ^aname <name>)
#   (<c> ^result.set <res2>)
#-->
#   (<res2> ^instance <in1>)
#}
sp {game-search*elaborate*input-args
   (state <s> ^name game-search
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype <rtype> ^input <a1>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}
#sp {game-search*elaborate*input-args*noparam
##:interrupt
#   (state <s> ^name game-search
#              ^gtype <gtype>
#              ^predicate <T5>
#              ^<gtype>.condition <co>)
#   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
#   (<args> ^num > 0)
#   (<args> ^<a1> <c1>)
#   (<c1> ^result.set.instance <in1> ^rtype <rtype> ^parameter.num 0)
#   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^condition <c5>)
#   (<c5> ^args.<argn> <c> ^parameter.<argn> <param>)#look at parent for param-id
#   (<param> ^param-id <a1>)
#   (<c> ^attribute input-arg ^parameter.num 0 ^rtype <rtype>)
#   (<c> ^result.set <res2>)
#-->
#   (<res2> ^instance <in1>)
#}
sp {game-search*elaborate*input-args*set-to-single*objects
   (state <s> ^name game-search
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps>  ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^rtype single ^input <a1>)
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}
#sp {game-search*elaborate*input-args*set-to-single*objects
#   (state <s> ^name game-search
#              ^gtype <gtype>
#              ^predicate <T5>
#              ^<gtype>.condition <co>)
#   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
#   (<args> ^num > 0)
#   (<args> ^<a1> <c1>)
#   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set)# ^parameter.num 0)
#   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
#   (<c> ^result.set <res> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype single)
#   (<nlps> ^aname <name>)
#-->
#   (<res> ^instance <i15>)
#   (<i15> ^1 <obj>)
#}

#### SIMULATE ACTIONS
sp {game-search*apply*action*perform-action
   (state <s> ^name selection
              ^evaluation <e>
              ^superstate <ss>
              ^top-state <ts>
              ^problemspace games)
   (<ss> ^dcount <dc> -^multiplayer true)
   (<e> ^symbolic-value success ^superoperator <so>)
   (<so> ^parameters <p> ^verb-structure <vs>)
   (<vs> ^<num> <vs2>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   (<vs2> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
   (<o1> ^handle <handle1>)
   (<o2> ^handle <handle2>)
   (<ts> ^world.objects <objs> ^dialog-context <d5>)
   (<objs> ^object <obja> <objb>)
   (<obja> ^handle <handle1>)
   (<objb> ^handle <handle2>)
-->
   (<d5> ^perform-action <fa>)
   (<fa> ^dcount (- (+ (* 2 <dc>) <num>) 1) ^obj1 <obja> ^obj2 <objb> ^pname <vp> ^vname <vname>)
}
sp {game-search*apply*action*perform-action*1arg
   (state <s> ^name selection
              ^evaluation <e>
              ^superstate <ss>
              ^top-state <ts>
              ^problemspace games)
   (<ss> ^dcount <dc> -^multiplayer true)
   (<e> ^symbolic-value success ^superoperator <so>)
   (<so> ^parameters <p> ^verb-structure <vs>)
   (<vs> ^<num> <vs2>)
   (<p> ^<i1> <o1>)
   (<vs2> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> -^2)
   (<o1> ^handle <handle1>)
   (<ts> ^world.objects <objs> ^dialog-context <d5>)
   (<objs> ^object <obja>)
   (<obja> ^handle <handle1>)
-->
   (<d5> ^perform-action <fa>)
   (<fa> ^dcount (- (+ (* 2 <dc>) <num>) 1) ^obj1 <obja> ^pname <vp> ^vname <vname>)
}
sp {game-search*apply*action*perform-action*number
   (state <s> ^name selection
              ^evaluation <e>
              ^superstate <ss>
              ^top-state <ts>
              ^problemspace games)
   (<ss> ^dcount <dc> -^multiplayer true)
   (<e> ^symbolic-value success ^superoperator <so>)
   (<so> ^parameters <p> ^verb-structure <vs>)
   (<vs> ^<num> <vs2>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   (<vs2> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
   (<o1> -^handle -^object)
   (<o2> ^handle <handle2>)
   (<ts> ^world.objects <objs> ^dialog-context <d5>)
   (<objs> ^object <objb>)
   (<objb> ^handle <handle2>)
-->
   (<d5> ^perform-action <fa>)
   (<fa> ^dcount (- (+ (* 2 <dc>) <num>) 1) ^obj1 <o1> ^obj2 <objb> ^pname <vp> ^vname <vname>)
}
sp {game-search*apply*action*perform-action*set
   (state <s> ^name selection
              ^evaluation <e>
              ^superstate <ss>
              ^top-state <ts>
              ^problemspace games)
   (<ss> ^dcount <dc> -^multiplayer true)
   (<e> ^symbolic-value success ^superoperator <so>)
   (<so> ^parameters <p> ^verb-structure <vs>)
   (<vs> ^<num> <vs2>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   (<vs2> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
   (<o1> ^object <o1a>)
   (<o1a> ^handle <handle1>)
   (<o2> ^handle <handle2>)
   (<ts> ^world.objects <objs> ^dialog-context <d5>)
   (<objs> ^object <obja> <objb>)
   (<obja> ^handle <handle1>)
   (<objb> ^handle <handle2>)
-->
   (<d5> ^perform-action <fa>)
   (<fa> ^dcount (- (+ (* 2 <dc>) <num>) 1) ^obj1 <obja> ^obj2 <objb> ^pname <vp> ^vname <vname>)
}
sp {game-search*apply*action-success
   (state <s> ^name game-search
              ^multiplayer true
              ^desired <d>
             -^dcount 0
              ^opponent false
              ^operator <o>)
   (<o> ^type action -^duplicate-of)
-->
   (<s> ^success <d>)
}
sp {game-search*apply*action-failure
   (state <s> ^name game-search
              ^multiplayer true
              ^desired <d>
             -^dcount 0
             -^fail <o>
              ^opponent true
              ^operator <o>)
   (<o> ^type action -^duplicate-of)
-->
   (<s> ^partial-failure <d>)
}
sp {game-search*apply*action-failure*success
   (state <s> ^name game-search
              ^multiplayer true
              ^desired <d>
             -^dcount 0
              ^fail <o>
              ^opponent true
              ^operator <o>)
   (<o> ^type action -^duplicate-of)
-->
   (<s> ^success <d>)
}

sp {game-search*apply*action*perform-action*top
   (state <s> ^name game-search
              ^top-state <ts>
              ^superstate <sss>
              ^dcount 0
              ^action <act>
              ^operator <o>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<act> ^verb-structure.<num> <v1> ^handle <cname>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   #(<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
-->
   (<sss> ^found-action true)
}
#for multiplayer
sp {game-search*apply*action*perform-action*top*singleaction
   (state <s> ^name game-search
              ^top-state <ts>
              ^superstate <sss>
              ^multiplayer true
              ^dcount 0
              ^action <act>
              ^operator <o>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<act> ^verb-structure.<num> <v1> ^handle <cname>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   #(<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
   (<o1> ^handle <handle1>)
   (<o2> ^handle <handle2>)
   (<ts> ^world.objects <objs> ^dialog-context <d5>)
   (<objs> ^object <obja> <objb>)
   (<obja> ^handle <handle1>)
   (<objb> ^handle <handle2>)
-->
   (<d5> ^perform-action <fa>)
   (<fa> ^dcount (- <num> 1) ^obj1 <obja> ^obj2 <objb> ^pname <vp> ^vname <vname>)
}

sp {game-search*apply*action*perform-action*top*singleaction*number
   (state <s> ^name game-search
              ^top-state <ts>
              ^superstate <sss>
              ^multiplayer true
              ^dcount 0
              ^action <act>
              ^operator <o>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<act> ^verb-structure.<num> <v1> ^handle <cname>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   #(<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
   (<o1> -^handle)
   (<o2> ^handle <handle2>)
   (<ts> ^world.objects <objs> ^dialog-context <d5>)
   (<objs> ^object <objb>)
   (<objb> ^handle <handle2>)
-->
   (<d5> ^perform-action <fa>)
   (<fa> ^dcount (- <num> 1) ^obj1 <o1> ^obj2 <objb> ^pname <vp> ^vname <vname>)
}

sp {game-search*apply*game-won
   (state <s> ^name game-search
              ^multiplayer true
              ^dcount 1
              ^top-state <ts>
              ^desired <d>
              ^operator.type goal)
-->
   (<ts> ^game-status <dc>)
   (<dc> ^game-won true)
}

sp {game-search*apply*goal
   (state <s> ^name game-search
              ^desired <d>
             -^multiplayer true
              ^operator.type goal)
-->
   (<s> ^success <d>)
}

sp {game-search*apply*goal*multiplayer*depth0
   (state <s> ^name game-search
              ^dcount << 0 1 >>
              ^desired <d>
              ^multiplayer true
              ^operator.type goal)
-->
   (<s> ^success <d>)
}

sp {game-search*apply*goal*multiplayer
   (state <s> ^name game-search
              -^dcount 1
              -^dcount 0
               ^superstate.superstate <ss>
              ^multiplayer true
              ^operator.type goal)
   (<ss> ^desired <d> ^superstate <sss>)
   (<sss> ^superstate <ts> ^operator.superoperator <sop>)
-->
   (<ss> ^failure <d>)
   (<ts> ^fail <sop>)
}

sp {game-search*apply*game-lost
   (state <s> ^name game-search
              ^multiplayer true
              ^dcount 0
              ^top-state <ts>
              ^desired <d>
              ^operator.type failure)
-->
 (<ts> ^game-status <dc>)
   (<dc> ^game-lost true)
}

sp {game-search*apply*failure
   (state <s> ^name game-search
              ^desired <d>
             -^multiplayer true
              ^operator.type failure)
-->
   (<s> ^partial-failure <d>)
}

sp {game-search*apply*failure*multiplayer
   (state <s> ^name game-search
             ^multiplayer true
             ^superstate.superstate <ss>
              ^operator.type failure)
   (<ss> ^desired <d>)
-->
   (<ss> ^failure <d>)
}

sp {selection*pass-back-success*puzzle
   (state <s> ^superstate
              ^superstate <ss>
              ^evaluation.symbolic-value << success >>)
   (<ss> ^superstate.operator <sso> ^multiplayer false)
   (<sso> ^name evaluate-operator
          ^evaluation <e2>
          ^superoperator.name)
-->
   (<e2> ^symbolic-value success)
 }

sp {game-search*depth-limit
   (state <s> ^name game-search
              ^desired <d>
              ^goal-search-delay 60 #60#10
              ^operator <o> +
             -^multiplayer true
             -^goal.parameter-set.set
              ^simulated true
              ^dcount <dc>
              ^depth-limit <dc>)
   (<o> ^type action -^duplicate-of) 
 -{(<s> ^operator <o2> +)
   (<o2> ^type goal)}
-->
   (<s> ^partial-failure <d>)
}
sp {game-search*depth-limit*multiplayer
   (state <s> ^name game-search
              ^desired <d>
              ^goal-search-delay 60 #60
             # ^operator <o> +
              ^multiplayer true
             -^goal.parameter-set.set
              ^simulated true
              ^dcount <dc>
              ^depth-limit <dc>)
 -{(<s> ^operator <o2> +)
   (<o2> ^type goal)}
-->
   (<s> ^partial-failure <d>)
}

sp {game-search*prefer*goal
   (state <s> ^name game-search
              ^operator <o1> +)
   (<o1> ^type goal)
-->
   (<s> ^operator <o1> > =)
}

sp {game-search*prefer*failure
   (state <s> ^name game-search
              ^operator <o1> +)
   (<o1> ^type failure)
-->
   (<s> ^operator <o1> > =)
}

sp {game-search*prefer*failure*to*goal
   (state <s> ^name game-search
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^type failure)
   (<o2> ^type goal)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {game-search*equivalent-action*reject4*ordering
   (state <s> ^name game-search
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^type action -^duplicate-of ^parameters <p> ^name <cname> ^verb-structure <vs>)
   (<o2> ^type action -^duplicate-of ^parameters {<p2> > <p>} ^name <cname>)
   (<vs> ^1 <act1> ^3 <act3>)
   (<act1> ^1 <in1> ^2 <in2>)
   (<act3> ^1 <in3> ^2 <in4>)
   (<p> ^<in1> <a> ^<in2> <b> ^<in3> <a1> ^<in4> <b1> )
   (<p2> ^<in3> <a> ^<in4> <b> ^<in1> <a1> ^<in2> <b1> )
-->
   (<s> ^operator <o2> -)
}

sp {game-search*propose*default
   (state <s> ^name game-search)
   -{(<s> ^action <a>)
     (<a> -^parameter-set.argnum)}
-->
   (<s> ^operator <o1> +)
   (<o1> ^name default)
}

sp {game-search*apply*default
   (state <s> ^name game-search
              ^desired <d>
             -^multiplayer true
             -^dcount 0
              ^operator.name default)
-->
   (<s> ^partial-failure <d>)
}

sp {game-search*apply*default*multiplayer*success
   (state <s> ^name game-search
              ^desired <d>
             -^opponent true
              ^multiplayer true
             -^dcount 0
              ^operator.name default)
-->
   (<s> ^partial-failure <d>)
}

#multiplayer, take random of best actions
sp {game-search*apply*default*top-select-random-action
   (state <s> ^name game-search
              ^operator <o> +
              ^multiplayer true
              ^opponent true
              ^operator.name default)
   (<o> ^type action)
-->
   (<s> ^operator <o> = >) 
}

sp {game-search*apply*default*top-select-random-action*top*pick*random
   (state <s> ^name game-search
              ^operator <o> +
              ^multiplayer true
              ^dcount 0
              ^operator.name default)
   (<o> ^type action)
-->
   (<s> ^operator <o> = >) 
}

#puzzle, increase depth
sp {game-search*apply*default*depth-limit-increase
   (state <s> ^name game-search
              ^multiplayer false
              ^dcount 0
              ^superstate <ss>
              ^operator.name default)
   (<ss> ^depth-limit <d>)
-->
	(write (crlf) (+ <d> 1))
   (<ss> ^depth-limit <d> -)
   (<ss> ^depth-limit (+ <d> 1))
}

sp {selection*prefer*evaluate*action*over*default
   (state <s> ^name selection
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name evaluate-operator ^superoperator.type action)
   (<o2> ^name evaluate-operator ^superoperator.name default)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {selection*prefer*evaluate*action*over*hackforcannibals
   (state <s> ^name selection
              ^superstate.dcount 0
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name evaluate-operator ^superoperator <so>)
   (<o2> ^name evaluate-operator ^superoperator <so2>)
   (<so> ^type action -^verb-structure.{3})
   (<so2> ^type action ^verb-structure.{3})
-->
   (<s> ^operator <o1> > <o2>)
}