#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Robot\ecg\r-arg-structs.ecg'.

#   Propose an operator for the TurnDirectionByAngle construction
sp {comprehend-word*propose*match-construction*TurnDirectionByAngle
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <angle>)
   (<angle> ^is.a NumberOfUnits
            ^previous <action>)
   (<action> ^is.a TurnDirection
             ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name TurnDirectionByAngle
        ^span 2
        ^lexicals 0
        ^angle <angle>
        ^action <action>
        ^previous <previous>
        ^debug-info (concat |Match a TurnDirectionByAngle construction, combination 0.|))
}

#   Apply the operator for the TurnDirectionByAngle construction
sp {comprehend-word*apply*match-construction*TurnDirectionByAngle
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name TurnDirectionByAngle
        ^action <action>
        ^angle <angle>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name TurnDirectionByAngle
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Imperative
              ^constituents <constituents>
              ^action <action>
              ^angle <angle>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a TurnDirectionByAngle)
   (<constituents> ^action <action>
                   ^angle <angle>)
   (<e-meaning> ^schema TurnByAngle
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a TurnDirectionByAngle construction.|))
}

#   TurnDirectionByAngle self.m.action <--> action.m constraint
sp {comprehend-word*TurnDirectionByAngle-constraint*self-m-action*UNIFY*action-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnDirectionByAngle
          ^m <l-slot1>
          ^action <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   TurnDirectionByAngle self.m.direction <--> action.m.direction constraint
sp {comprehend-word*TurnDirectionByAngle-constraint*self-m-direction*UNIFY*action-m-direction
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnDirectionByAngle
          ^m <l-slot1>
          ^action <r-slot1>)
   (<l-slot1> ^direction { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^direction <value>)
-->
   (<l-slot1> ^direction <target> -
              ^direction <value>)
}

#   TurnDirectionByAngle self.m.angle <--> angle.m constraint
sp {comprehend-word*TurnDirectionByAngle-constraint*self-m-angle*UNIFY*angle-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnDirectionByAngle
          ^m <l-slot1>
          ^angle <r-slot1>)
   (<l-slot1> ^angle { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^angle <target> -
              ^angle <value>)
}

#   TurnByAngle schema
sp {comprehend-word*evoked-schema*TurnByAngle*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TurnByAngle
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name TurnByAngle
               ^is <a>
               ^angle nil)
   (<a> ^a TurnByAngle)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   TurnByAngle schema
sp {comprehend-word*evoked-schema*TurnByAngle*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TurnByAngle
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^angle nil)
   (<a> ^a TurnByAngle)
   (<e1> ^schema Action
         ^target <e-target>)
}

