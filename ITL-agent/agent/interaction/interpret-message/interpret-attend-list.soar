###################################################################
#
# interpret-attend-list
#   Occurs when 
#
###################################################################

sp {interpret-message*propose*interpret-done
   (state <s> ^name interpret-message
              ^instructor-message <msg>
			  ^top-state.dialog-context <dc>
              ^top-state.dialog-context.learn-link
              ^top-state.dialog-context.attend)
   (<msg> ^message-type finished
          -^interpreted true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interpret-done)
}


# sp {interpret-message*apply*interpret-done*interrupt
#    (state <s> ^name interpret-message
#               #^top-state.dialog-context.goal-state <gs>
#               ^top-state.dialog-context <dc>
#               #^instructor-message <msg>
#               ^operator <o>)
#   # (<dc> ^attend)
#    (<o> ^name interpret-done)
# -->
# (write |ERROR ERROR|)
# (write (cmd print <dc> -d 7))
# (write (cmd pref <s>))
# (interrupt)
# }
#handle extra modify at end?
sp {interpret-message*apply*interpret-done*create*segment*finished-goal-demo
   (state <s> ^name interpret-message
              ^top-state.dialog-context.goal-state <gs>
              ^top-state.dialog-context <dc>
              ^instructor-message <msg>
              ^operator <o>)
   (<dc> ^attend)
   (<o> ^name interpret-done)
-->
(interrupt)
   (<dc> ^modified true)
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-goal-final-state
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}

sp {interpret-message*apply*interpret-attend-list*create*segment*modify-attend-list
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-attend-list
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type modify-attend-list
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}

sp {interpret-message*apply*interpret-ignore-list*create*segment*modify-ignore-list
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-ignore-list
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type modify-ignore-list
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}

################3
sp {interpret-message*apply*interpret-done*finished-term-learning
:o-support
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^instructor-message <msg>
              ^operator <o>)
   (<o> ^name interpret-done)
   (<ts> ^dialog-context <dc> 
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^learning-predicate <lp>) 
   (<lp> ^name <name> ^spelling <spelling>)        
-->
   (<s> ^mark-interpreted <msg>)
   (<dc> ^learning-predicate <lp> -)
   (<dc> ^finalize-chunk <name> -)
   (<dc> ^completed-learning-predicate <spelling>)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-unknown-word
          ^complete-message true
          ^fields.word <name>)
   (<status> ^performed.dialog-event <de>)
   (<de> ^type process-unknown-word
         ^originator instructor)
}