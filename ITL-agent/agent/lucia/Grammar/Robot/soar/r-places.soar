#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Robot\ecg\r-places.ecg'.

#   Propose an operator for the TheCopyRoom construction
sp {comprehend-word*propose*match-construction*TheCopyRoom
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <noun>)
   (<noun> ^is.a ROOM
           ^previous <prop>)
   (<prop> ^is.a COPY
           ^previous <spec>)
   (<spec> ^is.a THE
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name TheCopyRoom
        ^span 3
        ^lexicals 3
        ^noun <noun>
        ^prop <prop>
        ^spec <spec>
        ^previous <previous>
        ^debug-info (concat |Match a TheCopyRoom construction, combination 0.|))
}

#   Apply the operator for the TheCopyRoom construction
sp {comprehend-word*apply*match-construction*TheCopyRoom
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name TheCopyRoom
        ^spec <spec>
        ^prop <prop>
        ^noun <noun>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name TheCopyRoom
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of SpecifierNP
              ^constituents <constituents>
              ^spec <spec>
              ^prop <prop>
              ^noun <noun>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a TheCopyRoom)
   (<constituents> ^spec <spec>
                   ^prop <prop>
                   ^noun <noun>)
   (<e-meaning> ^schema MapLocation
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a TheCopyRoom construction.|))
}

#   TheCopyRoom self.m.name <--> noun.m.schema-name constraint
sp {comprehend-word*TheCopyRoom-constraint*self-m-name*UNIFY*noun-m-schema-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TheCopyRoom
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^name { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^schema-name <value>)
-->
   (<l-slot1> ^name <target> -
              ^name <value>)
}

#   TheCopyRoom self.m.category <--> noun.m constraint
sp {comprehend-word*TheCopyRoom-constraint*self-m-category*UNIFY*noun-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TheCopyRoom
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^category { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^category <target> -
              ^category <value>)
}

#   TheCopyRoom self.m.givenness <--> spec.m.givenness constraint
sp {comprehend-word*TheCopyRoom-constraint*self-m-givenness*UNIFY*spec-m-givenness
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TheCopyRoom
          ^m <l-slot1>
          ^spec <r-slot1>)
   (<l-slot1> ^givenness { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^givenness <value>)
-->
   (<l-slot1> ^givenness <target> -
              ^givenness <value>)
}

#   TheCopyRoom self.m.modifiers <--> prop.m constraint
sp {comprehend-word*TheCopyRoom-constraint*self-m-modifiers*UNIFY*prop-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TheCopyRoom
          ^m <l-slot1>
          ^prop <r-slot1>)
   (<l-slot1> ^modifiers { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^modifiers <target> -
              ^modifiers <value>)
}

#   TheCopyRoom self.m.handle <-- "loc-copy1" constraint
sp {comprehend-word*TheCopyRoom-constraint*self-m-handle*ASSIGN*loc-copy1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TheCopyRoom
          ^m <l-slot1>)
   (<l-slot1> ^handle { <target> <> |loc-copy1| })
-->
   (<l-slot1> ^handle <target> -
              ^handle |loc-copy1|)
}

#   Propose an operator for the AlicesOffice construction
sp {comprehend-word*propose*match-construction*AlicesOffice
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <noun>)
   (<noun> ^is.a OFFICE
           ^previous <prop>)
   (<prop> ^is.a ALICE-S
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name AlicesOffice
        ^span 2
        ^lexicals 2
        ^noun <noun>
        ^prop <prop>
        ^previous <previous>
        ^debug-info (concat |Match a AlicesOffice construction, combination 0.|))
}

#   Apply the operator for the AlicesOffice construction
sp {comprehend-word*apply*match-construction*AlicesOffice
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name AlicesOffice
        ^prop <prop>
        ^noun <noun>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name AlicesOffice
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of SpecifierNP
              ^constituents <constituents>
              ^prop <prop>
              ^noun <noun>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a AlicesOffice)
   (<constituents> ^prop <prop>
                   ^noun <noun>)
   (<e-meaning> ^schema MapLocation
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a AlicesOffice construction.|))
}

#   AlicesOffice self.m.name <--> noun.m.schema-name constraint
sp {comprehend-word*AlicesOffice-constraint*self-m-name*UNIFY*noun-m-schema-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AlicesOffice
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^name { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^schema-name <value>)
-->
   (<l-slot1> ^name <target> -
              ^name <value>)
}

#   AlicesOffice self.m.category <--> noun.m constraint
sp {comprehend-word*AlicesOffice-constraint*self-m-category*UNIFY*noun-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AlicesOffice
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^category { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^category <target> -
              ^category <value>)
}

#   AlicesOffice self.m.givenness <--> spec.m.givenness constraint
sp {comprehend-word*AlicesOffice-constraint*self-m-givenness*UNIFY*spec-m-givenness
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AlicesOffice
          ^m <l-slot1>
          ^spec <r-slot1>)
   (<l-slot1> ^givenness { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^givenness <value>)
-->
   (<l-slot1> ^givenness <target> -
              ^givenness <value>)
}

#   AlicesOffice self.m.modifiers <--> prop.m constraint
sp {comprehend-word*AlicesOffice-constraint*self-m-modifiers*UNIFY*prop-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AlicesOffice
          ^m <l-slot1>
          ^prop <r-slot1>)
   (<l-slot1> ^modifiers { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^modifiers <target> -
              ^modifiers <value>)
}

#   AlicesOffice self.m.handle <-- "loc-alice-off1" constraint
sp {comprehend-word*AlicesOffice-constraint*self-m-handle*ASSIGN*loc-alice-off1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AlicesOffice
          ^m <l-slot1>)
   (<l-slot1> ^handle { <target> <> |loc-alice-off1| })
-->
   (<l-slot1> ^handle <target> -
              ^handle |loc-alice-off1|)
}

#   Propose an operator for the BobsOffice construction
sp {comprehend-word*propose*match-construction*BobsOffice
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <noun>)
   (<noun> ^is.a OFFICE
           ^previous <prop>)
   (<prop> ^is.a BOB-S
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name BobsOffice
        ^span 2
        ^lexicals 2
        ^noun <noun>
        ^prop <prop>
        ^previous <previous>
        ^debug-info (concat |Match a BobsOffice construction, combination 0.|))
}

#   Apply the operator for the BobsOffice construction
sp {comprehend-word*apply*match-construction*BobsOffice
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name BobsOffice
        ^prop <prop>
        ^noun <noun>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name BobsOffice
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of SpecifierNP
              ^constituents <constituents>
              ^prop <prop>
              ^noun <noun>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a BobsOffice)
   (<constituents> ^prop <prop>
                   ^noun <noun>)
   (<e-meaning> ^schema MapLocation
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a BobsOffice construction.|))
}

#   BobsOffice self.m.name <--> noun.m.schema-name constraint
sp {comprehend-word*BobsOffice-constraint*self-m-name*UNIFY*noun-m-schema-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BobsOffice
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^name { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^schema-name <value>)
-->
   (<l-slot1> ^name <target> -
              ^name <value>)
}

#   BobsOffice self.m.category <--> noun.m constraint
sp {comprehend-word*BobsOffice-constraint*self-m-category*UNIFY*noun-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BobsOffice
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^category { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^category <target> -
              ^category <value>)
}

#   BobsOffice self.m.givenness <--> spec.m.givenness constraint
sp {comprehend-word*BobsOffice-constraint*self-m-givenness*UNIFY*spec-m-givenness
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BobsOffice
          ^m <l-slot1>
          ^spec <r-slot1>)
   (<l-slot1> ^givenness { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^givenness <value>)
-->
   (<l-slot1> ^givenness <target> -
              ^givenness <value>)
}

#   BobsOffice self.m.modifiers <--> prop.m constraint
sp {comprehend-word*BobsOffice-constraint*self-m-modifiers*UNIFY*prop-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BobsOffice
          ^m <l-slot1>
          ^prop <r-slot1>)
   (<l-slot1> ^modifiers { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^modifiers <target> -
              ^modifiers <value>)
}

#   BobsOffice self.m.handle <-- "loc-bob-off1" constraint
sp {comprehend-word*BobsOffice-constraint*self-m-handle*ASSIGN*loc-bob-off1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BobsOffice
          ^m <l-slot1>)
   (<l-slot1> ^handle { <target> <> |loc-bob-off1| })
-->
   (<l-slot1> ^handle <target> -
              ^handle |loc-bob-off1|)
}

#   Propose an operator for the CharliesOffice construction
sp {comprehend-word*propose*match-construction*CharliesOffice
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <noun>)
   (<noun> ^is.a OFFICE
           ^previous <prop>)
   (<prop> ^is.a CHARLIE-S
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name CharliesOffice
        ^span 2
        ^lexicals 2
        ^noun <noun>
        ^prop <prop>
        ^previous <previous>
        ^debug-info (concat |Match a CharliesOffice construction, combination 0.|))
}

#   Apply the operator for the CharliesOffice construction
sp {comprehend-word*apply*match-construction*CharliesOffice
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name CharliesOffice
        ^prop <prop>
        ^noun <noun>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name CharliesOffice
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of SpecifierNP
              ^constituents <constituents>
              ^prop <prop>
              ^noun <noun>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a CharliesOffice)
   (<constituents> ^prop <prop>
                   ^noun <noun>)
   (<e-meaning> ^schema MapLocation
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a CharliesOffice construction.|))
}

#   CharliesOffice self.m.name <--> noun.m.schema-name constraint
sp {comprehend-word*CharliesOffice-constraint*self-m-name*UNIFY*noun-m-schema-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CharliesOffice
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^name { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^schema-name <value>)
-->
   (<l-slot1> ^name <target> -
              ^name <value>)
}

#   CharliesOffice self.m.category <--> noun.m constraint
sp {comprehend-word*CharliesOffice-constraint*self-m-category*UNIFY*noun-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CharliesOffice
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^category { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^category <target> -
              ^category <value>)
}

#   CharliesOffice self.m.givenness <--> spec.m.givenness constraint
sp {comprehend-word*CharliesOffice-constraint*self-m-givenness*UNIFY*spec-m-givenness
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CharliesOffice
          ^m <l-slot1>
          ^spec <r-slot1>)
   (<l-slot1> ^givenness { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^givenness <value>)
-->
   (<l-slot1> ^givenness <target> -
              ^givenness <value>)
}

#   CharliesOffice self.m.modifiers <--> prop.m constraint
sp {comprehend-word*CharliesOffice-constraint*self-m-modifiers*UNIFY*prop-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CharliesOffice
          ^m <l-slot1>
          ^prop <r-slot1>)
   (<l-slot1> ^modifiers { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^modifiers <target> -
              ^modifiers <value>)
}

#   CharliesOffice self.m.handle <-- "loc-charlie-off1" constraint
sp {comprehend-word*CharliesOffice-constraint*self-m-handle*ASSIGN*loc-charlie-off1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CharliesOffice
          ^m <l-slot1>)
   (<l-slot1> ^handle { <target> <> |loc-charlie-off1| })
-->
   (<l-slot1> ^handle <target> -
              ^handle |loc-charlie-off1|)
}

