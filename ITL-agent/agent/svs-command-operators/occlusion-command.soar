###############################################################################
#
# occlusion-command
# (<s> ^operator <o>)
# (<o> ^name occlusion-command
#      ^object-id <id>
#      ^object-source << belief perception >> # Optional: If given, use a tag_select for object-source + arm
#      ^remove-id <id> # Optional: Don't include the given object in the occlusion command
#      ^eye-id <eye>	  # Optional: The point at which the occlusion should be checked (Defaults to ^id eye))
#
# Returns occlusion-command-result.occlusion-value <num> (number between 0 and 1)
# Returns occlusion-command-result failure if this failed (rare error case)
###############################################################################

# object-source: indicates whether to use all nodes or just the ones with the given source type (belief/perception)
sp {anystate*elaborate*occlusion-command*node-set*no*object-source
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
       -^object-source)
-->
   (<o> ^node-set <set>)
   (<set> ^type all_nodes)
}

sp {anystate*elaborate*occlusion-command*node-set*tag_select*object-source
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^object-source <src>)
-->
   (<o> ^node-set <set>)
   (<set> ^type combine_nodes
          ^a <arm>
          ^a <nodes>)
   (<arm> ^type node
          ^id arm)
   (<nodes> ^type tag_select
		      ^a.type all_nodes
		      ^tag_name object-source 
            ^tag_value <src>)
}

# remove-id: remove the given id from the node-set if it exists
sp {anystate*elaborate*occlusion-command*filtered-node-set*no*remove-id
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^node-set <set>
       -^remove-id)
-->
   (<o> ^filtered-node-set <set>)
}

sp {anystate*elaborate*occlusion-command*filtered-node-set*remove-id
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^node-set <nodes>
        ^remove-id <id>)
-->
   (<o> ^filtered-node-set <filt-set>)
   (<filt-set> ^type remove_node
               ^id <id>
               ^a <nodes>)
}

# eye: The object to use as the eye when checking occlusion
sp {anystate*elaborate*occlusion-command*eye-node*default
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
       -^eye-id)
-->
   (<o> ^eye-node <eye>)
   (<eye> ^type node
          ^id eye)
}

sp {anystate*elaborate*occlusion-command*eye-node*from*eye-id
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^eye-id <eye-id>)
-->
   (<o> ^eye-node <eye>)
   (<eye> ^type node
          ^id <eye-id>)
}

# full occlusion filter
sp {anystate*elaborate*occlusion-command*occlusion-filter
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^object-id <id>
        ^filtered-node-set <nodes>
        ^eye-node <eye>)
-->
   (<o> ^occlusion-filter <filter>)
   (<filter> ^type occlusion
             ^a <node>
             ^b <nodes>
             ^eye <eye>)
   (<node> ^type node
           ^id <id>)
}

# Add command to svs command
sp {anystate*apply*occlusion-command*add*to*svs*command
   (state <s> ^operator <o>
              ^top-state.svs.command <cmd>)
   (<o> ^name occlusion-command
        ^occlusion-filter <filter>)
-->
   (<cmd> ^extract_once <filter>)
}

# Remove the command from the svs.command link
sp {anystate*occlusion-command*apply*cleanup
   (state <s> ^operator <o>
              ^top-state.svs.command <cmd>)
   (<o> ^name occlusion-command
        ^occlusion-filter <filter>)
   (<cmd> ^extract_once <filter>)
   (<filter> ^result <res>)
-->
   (<cmd> ^extract_once <filter> -)
}

# Copy result of the successful command to the superstate
sp {anystate*occlusion-command*elaborate*occlusion-value*from*record
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^occlusion-filter.result.record.value <val>)
-->
   (<o> ^occlusion-value <val>)
}

# There was no valid result given, return none
sp {anystate*occlusion-command*elaborate*occlusion-value*default
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^occlusion-filter.result <res>)
   (<res> -^record.value <val>)
-->
   (<o> ^occlusion-value 0.0)
}

sp {anystate*occlusion-command*elaborate*occlusion-value*no*result
   (state <s> ^operator <o> +)
   (<o> ^name occlusion-command
        ^occlusion-filter <filter>)
   (<filter> ^status success
            -^result)
-->
   (<o> ^occlusion-value 0.0)
}

sp {anystate*apply*occlusion-command*create*occlusion-command-result*success
   (state <s> ^operator <o>
              ^agent-params.print-perception <flag>)
   (<o> ^name occlusion-command
        ^object-id <id>
        ^occlusion-value <val>)
-->
   (<s> ^occlusion-command-result <val>)
   (write (ifeq <flag> true (concat |occlusion-command for object | <id> | returned | <val> (crlf)) ||))
}

sp {occlusion-command*state-no-change*report*occlusion-command-result*failure
   (state <s> ^superstate.name occlusion-command
              ^attribute state 
              ^impasse no-change 
              ^superstate.superstate <sss>
              ^agent-params.print-perception <flag>)
   (<sss> ^operator <o>)
   (<o> ^name occlusion-command
        ^object-id <id>
        ^occlusion-filter <filter>)
   (<filter> -^result)
-->
   (<sss> ^occlusion-command-result failure)
   (write (ifeq <flag> true (concat |occlusion-command for object | <id> | failed| (crlf)) ||))
}
       
