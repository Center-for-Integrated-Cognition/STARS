#### apply push-segment on the interaction.stack
### substate to apply push-segment on the interaction.stack

# Creates a new segment structure to push onto the stack
sp {push-segment*propose*create-segment
   (state <s> ^name push-segment
              ^new-segment-info.purpose.type
             -^segment.purpose)
-->
   (<s> ^operator <o> +)
   (<o> ^name create-segment)
}

# segment
sp {push-segment*apply*create-segment*create*root
   (state <s> ^name push-segment
              ^operator.name create-segment
              ^top-state.interaction.stack.segment <prev-seg>)
   (<prev-seg> ^id <id>
   	       ^counter <count>)
-->
   (<s> ^segment <seg>)
   (<seg> ^id (+ (* <id> 100) <count>)
   	  ^counter 1
	  ^next <prev-seg>
    	  ^info <info>)
#       ^task-stack <task-stack>)
#   (<task-stack> ^global-parameters <gl>)
}

# segment.purpose
sp {push-segment*apply*create-segment*purpose
   (state <s> ^name push-segment
              ^operator.name create-segment
              ^segment <seg>
              ^new-segment-info.purpose <p>)
-->
   (<seg> ^purpose <p>)
}

sp {push-segment*apply*create-segment*purpose*parameters
   (state <s> ^name push-segment
              ^operator.name create-segment
              ^new-segment-info.purpose <p>)
   (<p> -^parameters)
-->
   (<p> ^parameters <params>)
}

# segment.originator
sp {push-segment*apply*create-segment*originator
   (state <s> ^name push-segment
              ^operator.name create-segment
              ^segment <seg>
              ^new-segment-info.originator <orig>)
-->
   (<seg> ^originator <orig>)
}


# segment.context 
# Create context from prev segment's purpose
sp {push-segment*apply*create-segment*copy*context
   (state <s> ^name push-segment
              ^operator.name create-segment
              ^segment <seg>)
   (<seg> ^next.purpose <p>)
-->
   (<seg> ^context <p>)
}

