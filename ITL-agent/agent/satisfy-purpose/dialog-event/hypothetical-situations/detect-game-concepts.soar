sp {detect-game-concepts*elaborate*problem-space
   (state <s> ^detect-game-concepts <name>
              ^top-state.world <world2>)
-->
   (<s> ^flag detect-game-concepts ^simulated true 
   		^problem-space <ps> ^retrieve-game <name> ^list <l>)
   (<l> ^game <g>)
   (<ps> ^world <world> ^name game)
   (<world> ^source <world2>
            ^copy-type deep)
}

sp {detect-game-concepts*elaborate*sub-conditions
   (state <s> ^flag detect-game-concepts
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}

sp {detect-game-concepts*elaborate*sub-conditions*predicate
   (state <s> ^flag detect-game-concepts
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {detect-game-concepts*elaborate*input-args
   (state <s> ^flag detect-game-concepts
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype <rtype>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

sp {detect-game-concepts*elaborate*input-args*noparam
   (state <s> ^flag detect-game-concepts
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype> ^parameter.num 0)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^condition <c5>)
   (<c5> ^args.<argn> <c> ^parameter.<argn> <param>)
   (<param> ^param-id <a1>)
   (<c> ^attribute input-arg ^parameter.num 0 ^rtype <rtype>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

sp {detect-game-concepts*elaborate*input-args*set-to-single*objects
   (state <s> ^flag detect-game-concepts
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype single)
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}