sp {interaction*apply*performed-event*remove*performed
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.status <status>)
   (<o> ^name performed-event
        ^event <event>)
   (<status> ^performed <event>)
-->
   (<status> ^performed <event> -)
}

sp {interaction*apply*performed-event*game-state-change
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.world.objects <objs>
             -^top-state.agent-params.prevent-output-link true
             -^top-state.world.predicates.predicate.handle on1
              ^top-state.io.output-link <ol>)
   (<o> ^name performed-event
        ^event <event>)
   (<event> ^dialog-event <de>)
   (<de> ^world-name <world> ^type game-state-change)
-->
#(write (cmd print <o> -d 5))
   (<ol> ^world-vis <wv>)
   (<wv> ^name <world> ^objects <objs>)
}

sp {interaction*apply*performed-event*game-state-change*with*on1
#:interrupt
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.world <w>
             -^top-state.agent-params.prevent-output-link true
              ^top-state.io.output-link <ol>)
   (<w> ^objects <objs> ^predicates.predicate <pp>)
   (<pp> ^handle on1)
   (<o> ^name performed-event
        ^event <event>)
   (<event> ^dialog-event <de>)
   (<de> ^world-name <world> ^type game-state-change)
-->
#(write (cmd print <o> -d 5))
   (<ol> ^world-vis <wv>)
   (<wv> ^name <world> ^objects <objs> ^predicate <pp>)
}              

# If the performed event matches the current satisfaction, then pop
sp {interaction*apply*performed-event*satisfied*purpose*pop
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction <i>)
   (<o> ^name performed-event
        ^event <event>)
   (<i> ^stack.segment.purpose.satisfaction <sat>
        ^changes <changes>)
   (<sat> ^<event-cat> <sat-event>)
   (<event> ^<event-cat> <perf-event>)
   (<sat-event> ^type <event-type>)
   (<perf-event> ^type <event-type>)
   -{(<sat-event> ^{<attr> <> info} <val>)
     (<perf-event> -^<attr> <val>)}
-->
   (<changes> ^terminate-segment true)
}

sp {interaction*apply*performed-event*train-on-object*send*message
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.stack.segment.purpose.type train-on-object
              ^top-state.interaction.changes <changes>)
   (<o> ^name performed-event
        ^event.learning-event.type object)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type report-successful-training
          ^complete-message true
          ^fields <f>)
}

sp {interaction*apply*performed-event*teach-relation*send*message
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.stack.segment.purpose.type teach-relation
              ^top-state.interaction.changes <changes>)
   (<o> ^name performed-event
        ^event.learning-event.type relation)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type report-successful-training
          ^complete-message true
          ^fields <f>)
}

sp {interaction*apply*performed-event*learn-predicate-info*send*message
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.stack.segment.purpose.type learn-predicate-info
              ^top-state.interaction.changes <changes>)
   (<o> ^name performed-event
        ^event.learning-event.type predicate)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type report-successful-training
          ^complete-message true
          ^fields <f>)
}

sp {interaction*apply*performed-event*task-event*train-on-location*send-message
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.stack.segment <seg>
              ^top-state.interaction.changes <changes>)
   (<seg> ^purpose.type action
          ^context.type get-location-info)
   (<o> ^name performed-event
        ^event.task-event <e>)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type ok
          ^complete-message true)
}
