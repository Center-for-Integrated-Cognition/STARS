#sp {interpret-message*apply*interpret-game-state-change
#   (state <s> ^name interpret-message
#              ^instructor-message <msg>
#              ^operator <o>)
#   (<o> ^name interpret-game-state-change
#        ^type <type>)
#-->
#   (<s> ^new-segment-info <info>
#        ^mark-interpreted <msg>)
#   (<info> ^purpose <p>
#           ^originator instructor)
#   (<p> ^type game-state-change
#        ^parameters.message <type>
#        ^satisfaction <sat>)
#   (<sat> ^dialog-event <de>)
#   (<de> ^type game-state-change
#          ^originator agent)
#}
#sp {dialog-event*propose*game-state-change-respond
#   (state <s> ^name dialog-event
#              ^purpose <p>)
#   (<p> ^type game-state-change ^parameters.message <type>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name game-state-change-respond
#        ^type <type>)
#}
#sp {dialog-event*apply*game-state-change-respond
#   (state <s> ^name dialog-event
#              ^operator <o>
#              ^top-state.interaction.status <status>
#              ^top-state.interaction.changes <changes>)
#   (<o> ^name game-state-change-respond
#        ^type <type>)
#-->
#   (<status> ^performed.dialog-event <de>)
#   (<de> ^type game-state-change
#         ^originator agent)
#   (<changes> ^outgoing-message <msg1>)
#   (<msg1> ^type ok
#          ^complete-message true)
#}
#sp {interpret-message*propose*interpret-game-state-change
#   (state <s> ^name interpret-message
#              ^instructor-message <msg>)
#   (<msg> ^action.handle << load1 load >> ^arg1.word-structure.spelling <type>
#         -^interpreted true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name interpret-game-state-change
#        ^type <type>)
#}



sp {interpret-message*propose*interpret-load-world-state
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^action.handle << load1 load >> ^arg1.word-structure.spelling <type>
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-load-world-state
        ^type <type>)
}

sp {interpret-message*apply*interpret-load-world-state
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^operator <o>)
   (<o> ^name interpret-load-world-state
        ^type <type>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type game-state-change
        ^parameters.message <type>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type game-state-change
          ^originator agent)
}

sp {dialog-event*propose*state-change-respond
   (state <s> ^name dialog-event
              ^purpose <p>)
   (<p> ^type game-state-change ^parameters.message <type>)
-->
   (<s> ^operator <o> +)
   (<o> ^name game-state-change-respond
        ^type <type>)
}

sp {dialog-event*apply*state-change-respond
   (state <s> ^name dialog-event
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name game-state-change-respond
        ^type <type>)
-->
   (<status> ^performed.dialog-event <de>)
   (<de> ^type game-state-change
         ^world-name <type>
         ^originator agent)
   (<changes> ^outgoing-message <msg1>)
   (<msg1> ^type ok
           ^complete-message true)
}