sp {learn-condition*elaborate*conditions
   (state <s> ^name learn-condition
   		  	  ^superstate.operator.condition <co>)
-->
   (<s> ^condition <co>)
}

sp {learn-condition*elaborate*conditions*intterupt
   (state <s> ^name learn-conditionX
   		  	  ^superstate <ss>
              ^superstate.operator.condition <co>)
(<co> ^function board-between)
-->
   (write (cmd pref <ss>))
   (write (cmd print <co> -d 3))
   (interrupt)
}

sp {learn-condition*elaborate*conditions*intteruptasdfasdf
   (state <s> #^name learn-condition
   		  	  ^superstate <ss>
			  ^impasse conflict)
#(<co> ^function board-between)
-->
   (write (cmd pref <ss>))
 # (write (cmd print <co> -d 3))
   (interrupt)
}

#temp if go back to retrieveal model may need to chunk here
sp {learn-condition*impasse
   (state <s> ^superstate.name learn-condition
              ^choices none
              ^attribute state
              ^superstate.condition <co>
              ^impasse no-change)
-->
   (<s> ^name learn-condition-impasse
        ^condition <co>)
}
sp {learn-condition-impasse*propose*with-attribute
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name> ^type attribute ^attribute <attr>)
   (<args> ^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args2>
         ^name with-attribute
         ^negative <bool>
         ^parameter <p>)
   (<args2> ^3 <a2> ^2 <a3> ^1 <a1>)
   (<a2> ^name number ^args <ag2> ^rtype single ^result.set.instance <a22> ^return-type number)
   (<a22> ^1 <attr>)
   (<a3> ^name number ^args <ag3> ^rtype single ^result.set.instance <a33> ^return-type number)
   (<a33> ^1 <name>)
}
sp {learn-condition-impasse*propose*with-attribute22
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> -^name object ^name <name> ^type attribute ^attribute <attr>)
   (<args> -^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args2>
         ^name with-attribute
         ^negative <bool>
         ^parameter <p>)
   (<args2> ^3 <a2> ^2 <a3>)
   (<a2> ^name number ^args <ag2> ^rtype single ^result.set.instance <a22> ^return-type number)
   (<a22> ^1 <attr>)
   (<a3> ^name number ^args <ag3> ^rtype single ^result.set.instance <a33> ^return-type number)
   (<a33> ^1 <name>)
}
sp {learn-condition-impasse*propose*with-attribute*primitive-object
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name object ^type attribute ^attribute primitive)
   (<args> -^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args2>
         ^name with-attribute
         ^negative <bool>
         ^parameter <p>)
}
#normally here need to retrieve structure and elab linkstate predicate (already have)
sp {learn-condition-impasse*propose*top-pair
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name> ^type state-pair ^attribute <attr>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name top-pair
         ^type <name>
         ^attribute <attr>
         ^negative <bool>
         ^parameter <p>)
}
sp {learn-condition-impasse*propose*function
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name> ^type function ^function <func>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name <func>
         ^type <name>
         ^negative <bool>
         ^parameter <p>)
}
sp {learn-condition-impasse*propose*concept-condition
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^type concept)
-->
   (<ss> ^operator <op> + =)
   (<op> ^name concept-condition)
}
#TODO JAMES when trying to generalize (notice that operators here have similar structure) #TODO RECODE
sp {learn-condition-impasse*propose*attribute-of
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <type> ^type attribute-of)
 #  (<args> -^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name attribute-of
         ^type <type>
         ^negative <bool>
         ^parameter <p>)
}
sp {learn-condition-impasse*propose*has-attribute
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <type> ^type has-attribute)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name has-attribute
         ^type <type>
         ^negative <bool>
         ^parameter <p>)
}
sp {learn-condition-impasse*propose*same-attribute
   (state <s> ^name learn-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <type> ^type same-attribute)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name same-attribute
         ^type <type>
         ^negative <bool>
         ^parameter <p>)
}
#TODO readd for reset up message
#sp {learn-condition*propose*retry-condition-setup*stillunrseolved
#   (state <s> ^operator.name wait
#              ^impasse no-change
#              ^superstate <sss>)
#   (<sss> ^name learn-condition)
#-->
#(<sss> ^operator <o> + >)
#(<o> ^name retry-condition-setup)
#}
#sp {learn-condition*propose*retry-condition-setup
#   (state <s> ^operator.name wait
#              ^impasse no-change
#              ^superstate.superstate <sss>)
#   (<sss> ^name learn-condition)
#-->
#(<sss> ^operator <o> + >)
#(<o> ^name retry-condition-setup)
#}
sp {retry-condition-setup*propose*complete
   (state <s> ^name retry-condition-setup)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete)
}
sp {retry-condition-setup*apply*complete
   (state <s> ^name retry-condition-setup
              ^quiescence t #do not chunk through this rule (failure case)
              ^top-state.dialog-context <dc>
              ^linkstate <ls>
              ^top-state <ts>
              ^top-state.interaction.changes <c>
              ^operator.name complete)
   (<ls> ^main-type <type> ^<type> <t> ^parsed-structure <ps>)
   (<t> ^nlp-set <nlp> ^formated)
   (<dc> ^learn-link <ll>)
   (<ll> ^argnum <an>)
-->
   (<ll> ^argnum <an> -)
   (<dc> ^needs-reset true)
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-reset-state
        ^parameters.word <word>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type single-word-response
          ^originator instructor)
   (<c> ^outgoing-message <out-msg>)
   (<out-msg> ^type reset-state
              ^complete-message true
              ^fields.word <type>)
   (<ps> ^learned-structure <nlp>)
}
#TODO ADD BACK FOR ISOMORPHIC DETECTION
#JK version
#TODO COPY VERSION changed
#sp {learn-condition*propose*auto-resolve-satisfaction-failure
#   (state <s> ^operator.name wait
#              ^impasse no-change
#              ^superstate.superstate <sss>)
#   (<sss> ^name learn-condition)
#-->
#(<sss> ^operator <o> + >)
#(<o> ^name auto-resolve-satisfaction-failure)
#}
sp {learn-condition*propose*ungroundable-condition
   (state <s> ^operator.name wait
              ^impasse no-change
              ^superstate.superstate <sss>)
   (<sss> ^name learn-condition)
-->
   (<sss> ^operator <o> + >)
   (<o> ^name ungroundable-condition)
}
sp {learn-condition*apply*ungroundable-condition
   (state <s> ^name learn-condition
              ^superstate <ss>
              ^operator.name ungroundable-condition)
   (<ss> ^operator <o>)
-->
   (<ss> ^operator <o> -) #consider less than pref?
}

sp {resolve-conditions*propose*resolve-ungroundable
   (state <s> ^operator.name wait
              ^impasse no-change
              ^quiescence t 
              ^superstate <ss>
              ^superstate.superstate <sss>)
   (<ss> ^name resolve-conditions ^condition <co>)
   (<sss> ^name chunk-predicate-impasse)
   (<co> -^result.set.<x>)
-{(<co> ^name <prep>)
  (<s> ^top-state.world.predicates.predicate.handle <prep>)} #not primitive that exists
-->
   (<ss> ^operator <o> + <) # =      
   (<o> ^name resolve-ungroundable
   		^condition <co>)
}

#null case, all can be grounded
sp {resolve-conditions*propose*resolve-ungroundable*none
   (state <s> ^operator.name wait
              ^impasse no-change
              ^quiescence t 
              ^superstate <ss>
              ^superstate.superstate <sss>)
   (<ss> ^name resolve-conditions)
   (<sss> ^name chunk-predicate-impasse)
-{(<ss> ^condition <co>)
   (<co> -^result.set.<x>)}
-->
   (<ss> ^operator <o> + <) # =      
   (<o> ^name resolve-ungroundable)
}

#xqxqxqxq
sp {resolve-conditions*apply*completed-learning*true
#:interrupt
   (state <s> ^name resolve-conditions
   		  	  ^linkstate <ls>
			  ^quiescence t
   		  	  ^operator <o>)
   (<o> ^name << resolve-ungroundable resolve-learn-next >>)
-->
#(write (cmd pref <s>))
   (<ls> ^completed-learning true)
}

sp {resolve-conditions*prefer*resolve-ungroundable*over*resolve-learn-next
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable)
   (<o2> ^name resolve-learn-next)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {resolve-conditions*prefer*resolve-ungroundable*condition
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <co>)
   (<o2> ^name resolve-ungroundable -^condition)
-->
   (<s> ^operator <o1> > <o2>)
}
sp {resolve-conditions*propose*resolve-learn-next
   (state <s> ^operator.name wait
              ^impasse no-change
              ^quiescence t 
              ^superstate <ss>
              ^superstate.superstate <sss>)
   (<ss> ^name resolve-conditions ^condition <co>)
   (<sss> ^name chunk-predicate-impasse)
   (<co> -^result.set.<x> ^name <prep> ^args <aa>)
   (<s> ^top-state.world.predicates.predicate.handle <prep>)#not primitive that exists
   (<aa> ^<< 1 2 >> <a1>)
   (<a1> ^name <handle> ^type concept) #kinda hacky
-->
   (<ss> ^operator <o> + >) # =      
   (<o> ^name resolve-learn-next
   		^condition <a1>)
}

sp {resolve*resolve-ungroundable*tie*alphanumeric*bias
   (state <s> ^superstate <ss>
              ^item <o1>
			  ^quiescence t
			  ^item <o2>
			  ^condition-set <cs1>
			  ^condition-set <cs2>
              ^choices multiple)
   (<ss> ^name resolve-conditions
         ^operator <o1> +
         ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <co1>)
   (<co1> ^args.num <nu> ^name <s1> < <s2>)
   (<o2> ^name resolve-ungroundable ^condition <co2>)
   (<co2>  ^args.num <nu> ^name <s2>)
   (<cs1> ^handle <s1> ^count 1)#only at same count
   (<cs2> ^handle <s2> ^count 1)
-->
#(write (cmd print <o1> -d 10))
#(write | OVER alphanumeric |)
#(write (cmd print <o2> -d 10))
#(interrupt)
   (<ss> ^operator <o1> > <o2>)
}

sp {resolve-conditions*prefer*resolve-ungroundable*over*resolve-ungroundable*notsyn
   (state <s> ^name resolve-conditions
              ^linkstate.version-list <vl>
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <a1>)
   (<o2> ^name resolve-ungroundable ^condition {<a2> <> <a1>})
   (<a1> ^name <name1>)
   (<a2> ^name <name2>)
   (<vl> ^version <v1> 
   		 ^version <v2>)
   (<v1> ^handle-spelling <hs> ^item <i2>)
   (<i2> -^auto ^smem-result <sr1>)# ^structure-type N)
   (<sr1> ^handle <name1>)
   (<v2> ^handle-spelling <hs1> ^item <i3>)
   (<i3> ^auto ^smem-result <sr2>)# ^structure-type ADJ)
   (<sr2> ^handle <name2>)
-->
#(write (cmd print <v1> -d 4))
#(write (cmd print <v2> -d 4))
   (<s> ^operator <o1> > <o2>)
}

sp {resolve*resolve-ungroundable*tie*argnum*bias
   (state <s> ^superstate <ss>
              ^item <o1>
			  ^quiescence t
			  ^item <o2>
			  ^condition-set <cs1>
			  ^condition-set <cs2>
              ^choices multiple)
   (<ss> ^name resolve-conditions
         ^operator <o1> +
         ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <co1>)
   (<co1> ^args.num <nu> < <nu2> ^name <s1>)
   (<o2> ^name resolve-ungroundable ^condition <co2>)
   (<co2>  ^args.num <nu2> ^name <s2>)
   (<cs1> ^handle <s1> ^count 1)#only at same count
   (<cs2> ^handle <s2> ^count 1)
-->

   (<ss> ^operator <o1> > <o2>)
}

sp {prefer*resolve-ungroundable*higher*count
   (state <s> ^superstate <ss>
              ^item <o1>
			  ^quiescence t
			  ^item <o2>
			  ^condition-set <cs1>
			  ^condition-set <cs2>
              ^choices multiple)
   (<ss> ^name resolve-conditions
         ^operator <o1> +
         ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition.name <s1>)
   (<o2> ^name resolve-ungroundable ^condition.name <s2>)
   (<cs1> ^handle <s1> ^count <c2>)
   (<cs2> ^handle <s2> ^count {<c3> < <c2>})
-->
#(write (cmd print <o1> -d 3))
#(write | OVER count |)
#(write (cmd print <o2> -d 3))
   (<ss> ^operator <o1> > <o2>)
}
sp {prefer*resolve-ungroundable*same-concept*lowest
   (state <s> ^superstate <ss>
              ^item <o1>
			  ^quiescence t
			  ^item <o2>
			  ^condition-set <cs1>
              ^choices multiple)
   (<ss> ^name resolve-conditions
         ^operator <o1> +
         ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition {<c1> < <c2>})
   (<o2> ^name resolve-ungroundable ^condition <c2>)
   (<c1> ^name <s1>)
   (<c2> ^name <s1>)
   (<cs1> ^handle <s1> ^count {<n2> > 1})
  -{(<c1> ^args <ar>)
    (<ar> ^1 <ar1>)
    (<ar1> -^result.set.instance.{1}.<y>)}
-->
   (<ss> ^operator <o1> > <o2>)
}
sp {prefer*resolve-ungroundable*same-concept*with-children
   (state <s> ^superstate <ss>
              ^item <o1>
			  ^quiescence t
			  ^item <o2>
			  ^condition-set <cs1>
              ^choices multiple)
   (<ss> ^name resolve-conditions
         ^operator <o1> +
         ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
   (<c1> ^name <s1>)
   (<c2> ^name <s1>)
   (<cs1> ^handle <s1> ^count {<n2> > 1})
   (<c2> ^args <ars>)
   (<ars> ^1 <ars1>)
   (<ars1> -^result.set.instance.{1}.<x>)
  -{(<c1> ^args <ar>)
    (<ar> ^1 <ar1>)
    (<ar1> -^result.set.instance.{1}.<y>)}
-->
#(write (cmd print <o1> -d 3))
#(write | OVER same children |)
#(write (cmd print <o2> -d 3))
   (<ss> ^operator <o1> > <o2>)
}

sp {resolve*resolve-ungroundable*elaborate*set
   (state <s> ^superstate <ss>
              ^quiescence t
			  ^item <i>
              ^choices multiple)
   (<i> ^condition.name <cn>)
   (<ss> ^name resolve-conditions)
-{(<s> ^item {<i2> < <i>})
  (<i2> ^condition <c2>)
  (<c2> ^name <cn>)} #bias to only select one per name
-->
   (<s> ^condition-set <cs>)
   (<cs> ^handle <cn> ^results <x1>)
}
sp {resolve*resolve-ungroundable*elaborate*set*result
   (state <s> ^superstate <ss>
              ^quiescence t
			  ^item <i>
              ^choices multiple)
   (<i> ^condition.name <cn>)
   (<ss> ^name resolve-conditions)
   (<s> ^condition-set <cs>)
   (<cs> ^handle <cn> ^results <x1>)
-->
   (<x1> ^result <i>)
}
sp {resolve*resolve-ungroundable*elaborate*set*result*count
   (state <s> ^superstate <ss>
              ^quiescence t
              ^choices multiple)
   (<ss> ^name resolve-conditions)
   (<s> ^condition-set <cs>)
   (<cs> ^handle <cn> ^results <x1>)
-{(state <s>)
  (<x1> -^result)}
-->
   (<cs> ^count (size <x1>))
}
#TODO in future may use this to pick different versions of between (multiple functions)
sp {resolve-conditions*prefer*resolve-ungroundable*function*concept
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
   (<c1> -^type function)
   (<c2> ^type function)
   -{(<c1> ^args <a>)
     (<a> ^<< 1 2 3 >> <c2>)}
-->
   (<s> ^operator <o1> > <o2>)
}


sp {resolve-conditions*prefer*resolve-ungroundable*child
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<c1> ^args <a> -^type concept)
   (<a> ^<< 1 2 3 >> <c2>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
-->
#(write (cmd print <o2> -d 3))
#(write | OVER CHILD|)
#(write (cmd print <o1> -d 3))
   (<s> ^operator <o2> > <o1>)
}

sp {resolve-conditions*prefer*resolve-ungroundable*child*d2
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<c1> ^args <a> -^type concept)
   (<a> ^<< 1 2 3 >> <c3>)
   (<c3> ^args <a3>)
   (<a3> ^<< 1 2 3 >> <c2>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
-->
#(write (cmd print <o2> -d 3))
#(write | OVER CHILD|)
#(write (cmd print <o1> -d 3))
   (<s> ^operator <o2> > <o1>)
}


sp {resolve-conditions*prefer*resolve-ungroundable*childargument
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<c1> ^args <a> -^type concept)
   (<a> ^<< 1 2 3 >> <c3>)
   (<c3> ^name argument ^attribute <n> ^args.{1}.args.<n> <c2>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
-->
#(write (cmd print <o2> -d 3))
#(write | OVER this new |)
#(write (cmd print <o1> -d 3))
   (<s> ^operator <o2> > <o1>)
#(interrupt)
}

sp {resolve-conditions*prefer*resolve-ungroundable*child*concept
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<c1> ^args <a> ^type concept)
   (<a> ^<< 1 2 3 >> <c2>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
   (<c2> ^type concept)
-->
#(write (cmd print <o2> -d 3))
#(write | OVER CONCEPT CHILD |)
#(write (cmd print <o1> -d 3))
   (<s> ^operator <o2> > <o1>)
}

sp {resolve-conditions*prefer*resolve-ungroundable*child*concept*d2
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<c1> ^args <a> ^type concept)
   (<a> ^<< 1 2 3 >> <c3>)
   (<c3> ^args <a3>)
   (<a3> ^<< 1 2 3 >> <c2>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
   (<c2> ^type concept)
-->
#(write (cmd print <o2> -d 3))
#(write | OVER CONCEPT CHILD |)
#(write (cmd print <o1> -d 3))
   (<s> ^operator <o2> > <o1>)
}

sp {resolve-conditions*prefer*resolve-ungroundable*childargument*concept
   (state <s> ^name resolve-conditions
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<c1> ^args <a> ^type concept)
   (<a> ^<< 1 2 3 >> <c3>)
   (<c3> ^name argument ^attribute <n> ^args.{1}.args.<n> <c2>)
   (<o2> ^name resolve-ungroundable ^condition <c2>)
   (<c2> ^type concept)
-->
#(write (cmd print <o2> -d 3))
#(write | OVEVER yes |)
#(write (cmd print <o1> -d 3))
   (<s> ^operator <o2> > <o1>)
#(interrupt)
}
#NOT sure about this bias..
sp {resolve-conditions*prefer*resolve-ungroundable*concept*usedcurrent*first
   (state <s> ^name resolve-conditions
              ^linkstate <sss>
              ^operator <o1> +
              ^operator <o2> +)
   (<sss> ^main-type <gtype> 
   		  ^<gtype>.condition <c1>
		 -^<gtype>.condition <c2>)
   (<o1> ^name resolve-ungroundable ^condition <c1>)
   (<c1> ^type concept)# want?
   (<o2> ^name resolve-ungroundable ^condition <c2>)
   (<c2> ^type concept) #want?
-->
(interrupt)
   (<s> ^operator <o1> < <o2>)
}
#preference rules
sp {resolve-conditions*prefer*resolve-ungroundable*type*concept
   (state <s> ^name resolve-conditions
   		  	  ^operator <o1> +
			  ^operator <o2> +)
   (<o1> ^name resolve-ungroundable ^condition <co1>)
   (<o2> ^name resolve-ungroundable ^condition <co2>)
   (<co1> ^type concept)
   (<co2> -^type concept)
-->
#(write (cmd print <o1> -d 3))
#(write | OVER CONCEPT|)
#(write (cmd print <o2> -d 3))
   (<s> ^operator <o1> > <o2>)
}
#sp {resolve-conditions*prefer*resolve-ungroundable*same*name*bias
#   (state <s> ^name resolve-conditions
#   		  	  ^operator <o1> +#
#			  ^operator <o2> +)
#   (<o1> ^name resolve-ungroundable ^condition {<co1> < <co2>})
#   (<o2> ^name resolve-ungroundable ^condition <co2>)
#   (<co1> ^name <name>)#^type concept
#   (<co2> ^name <name>)#^type concept
#-->
#   (<s> ^operator <o1> > <o2>)
#}
#sp {resolve-conditions*apply*resolve-learn-next*interrupt*debug
#   (state <s> ^name resolve-conditionsX
#   		  	  #^linkstate <ls>
#			  ^top-state.dialog-context <dc>
#               ^linkstate <la>
#   		  	  ^operator <o>)
#   (<o> ^name resolve-learn-next ^condition <co>)
#   ##(<ls> ^<type> <t> ^gtype <type>)
#   ##(<t> ^link <co>)
#   ##(<co> ^name on1)
#   (<co> ^name <prep>)
#   (<s> ^top-state.world.predicates.predicate.handle <prep>)#not primitive that exists
#-->
#   (interrupt)
#}
#qqqq
#sp {resolve-conditions*apply*resolve-ungroundable*interrupt*debug
#   (state <s> ^name resolve-conditionsX
#   		  	  ^top-state.dialog-context <dc>
#              ^linkstate <ls>
#			  ^operator.name resolve-ungroundable)
#(<ls> ^action <f> )#^superstate.name transfer-action-goal)
##   		  	  ^operator <o> +)
# #  (<o> ^name resolve-ungroundable ^condition <co>)
#   ###(<ls> ^<type> <t> ^gtype <type>)
#   ###(<t> ^link <co>)
#   ###(<co> ^name on1)
#   #(<co> ^name <prep>)
#   #(<s> ^top-state.world.predicates.predicate.handle <prep>)#not primitive that exists
#(<f> ^condition <co>)
#(<co> ^parameter <pp> ^rtype set ^type concept)
#(<pp> ^1 <p1>)
#(<p1> ^param-id <pid>)
#-->
#   (write (cmd print <co> -d 2))
#   #(write (cmd print <f> -d 10))
#(write (cmd pref <p1> -w))
#(write (cmd pref <p1> param-id -w))
#   #(interrupt)
#}
#sp {resolve-conditions*apply*resolve-ungroundable*elaborate*possible
#   (state <s> ^name resolve-conditions
#   		  	  #^linkstate <ls>
#			  ^top-state.dialog-context <dc>
#               ^linkstate <la>
#   		  	  ^operator <o>)
#   (<o> ^name resolve-ungroundable ^condition <co>)
#   ##(<ls> ^<type> <t> ^gtype <type>)
#   ##(<t> ^link <co>)
#   ##(<co> ^name on1)
#   (<co> ^name <prep> ^args <aa>)
#   (<s> ^top-state.world.predicates.predicate.handle <prep>)#not primitive that exists
#   (<aa> ^<< 1 2 >> <a1>)
#   (<a1> ^name <handle> ^type concept) #kinda hacky
#-->
#   (<s> ^learn-possible <lp>)
#   (<lp> ^name <handle> ^word (make-constant-symbol <handle>))
#}

sp {resolve-conditions*apply*resolve-learn-next*make-new-symbol
   (state <s> ^name resolve-conditions
   		  	  ^linkstate <ls>
			  ^quiescence t
   		  	  ^operator <o>)
   (<o> ^name resolve-learn-next ^condition <co>)
  # (<ls> ^<type> <t> ^main-type <type>) #TODO or gtype? should we learn subconcepts?
  # (<t> ^condition <co>)
   (<co> ^name <name>)
-->
   (<s> ^word (make-constant-symbol <name>))
  #(<t> ^final-version true)  #removing makes us not copy ontolearn-link and re convert-from-parse
}
sp {resolve-conditions*apply*resolve-ungroundable*make-new-symbol
   (state <s> ^name resolve-conditions
   		  	  ^linkstate <ls>
			  ^quiescence t 
   		  	  ^operator <o>)
   (<o> ^name resolve-ungroundable ^condition <co>)
   (<ls> ^<type> <t> ^main-type <type>) #TODO or gtype? should we learn subconcepts?
   (<t> ^condition <co>)
   (<co> ^name <name>)
-{(<s> ^top-state.world.predicates.predicate.handle <name>)} #not primitive that exists
-->
   (<s> ^word (make-constant-symbol <name>))
  #(<t> ^final-version true)  #removing makes us not copy ontolearn-link and re convert-from-parse
}
sp {resolve-conditions*apply*resolve-learn-next*finished-version
   (state <s> ^name resolve-conditions
   		  	  ^linkstate <ls>
			  ^quiescence t 
			  ^word <word>
			  ^smem.command <sc>
   		  	  ^operator <o>)
   (<o> ^name resolve-learn-next ^condition <co>)
   (<ls> ^version-list.version <v> ^<type> <t> ^main-type <type>) #TODO or gtype? should we learn subconcepts?
   (<t> ^condition <co> -^return-type number)
   (<co> ^name <name>)
   (<v> ^handle-spelling <hs> ^item.smem-result <sr1>)
   (<sr1> ^handle <name>)
-->
   (<s> ^found-new-learnable true)
   (<sc> ^store <h1> <prop>) # if do spelling version need sturture-type.. below, kinda a pain
   (<h1> ^handle <word> ^handle-spelling <hs> ^property <prop>)#<name>
   (<prop> ^handle property ^type visual) #todo maybe problem storing multiple of these
}
sp {resolve-conditions*apply*resolve-ungroundable*finished-version
   (state <s> ^name resolve-conditions
   		  	  ^linkstate <ls>
			  ^quiescence t 
			  ^word <word>
			  ^smem.command <sc>
   		  	  ^operator <o>)
   (<o> ^name resolve-ungroundable ^condition <co>)
   (<ls> ^<type> <t> ^main-type <type>) #TODO or gtype? should we learn subconcepts?
   (<t> ^condition <co> -^return-type number)
   (<co> ^name <name>)
 -{(<s> ^top-state.world.predicates.predicate.handle <name>)} #not primitive that exists
-->
   (<s> ^found-new-learnable true)
   (<sc> ^store <h1> <prop>) # if do spelling version need sturture-type.. below, kinda a pain
   (<h1> ^handle <word> ^handle-spelling <name> ^property <prop>)
   (<prop> ^handle property ^type visual) #todo maybe problem storing multiple of these
}
#do want to create new h1, because property of term may have changed< ! come up with good examples
sp {resolve-conditions*apply*resolve-ungroundable*finished-version*numeric
   (state <s> ^name resolve-conditions
   		  	  ^linkstate <ls>
			  ^quiescence t 
			  ^word <word>
			  ^smem.command <sc>
   		  	  ^operator <o>)
   (<o> ^name resolve-ungroundable ^condition <co>)
   (<ls> ^<type> <t> ^main-type <type>) #TODO or gtype? should we learn subconcepts?
   (<t> ^condition <co> ^return-type number)#check!! that this is here
   (<co> ^name <name>)
-->
   (<s> ^found-new-learnable true)
   (<sc> ^store <h1> <prop>) # if do spelling version need sturture-type.. below, kinda a pain
   (<h1> ^handle <word> ^handle-spelling <name> ^property <prop>) #steal from clear
   (<prop> ^handle numeric ^type conceptual)
}

#qqq make this rule for resolve-ungroundable
sp {resolve-conditions*prefer*resolve-learn-next*over*resolve-learn-next
   (state <s> ^name resolve-conditions
              ^linkstate.version-list <vl>
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-learn-next ^condition <a1>)
   (<o2> ^name resolve-learn-next ^condition <a2>)
   (<a1> ^name <name1>)
   (<a2> ^name <name2>)
   (<vl> ^version <v1> <v2>)
   (<v1> ^handle-spelling <hs> ^item.smem-result <sr1> ^structure-type N)
   (<sr1> ^handle <name1>)
   (<v2> ^handle-spelling <hs1> ^item.smem-result <sr2> ^structure-type ADJ)
   (<sr2> ^handle <name2>)
-->
   (<s> ^operator <o1> > <o2>)
}
sp {resolve-conditions*apply*resolve-learn-next
   (state <s> ^name resolve-conditions
   		  	  ^quiescence t 
			  ^linkstate <ls>
			  ^word <word>
			  ^top-state <ts>
			  ^top-state.interaction.changes <c>
			  ^found-new-learnable true
   		  	  ^operator <o>)
   (<o> ^name resolve-learn-next ^condition <co>)
   (<ts> ^dialog-context <dc>)
   (<co> ^name {<name2> <> <word>} ^args <args>)
   (<ls> ^version-list.version <v>)
   (<v> ^handle-spelling <hs> ^item.smem-result <sr1>)
   (<sr1> ^handle <name2>)
-->
#(write (cmd print <co> -d 5))
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-unknown-word
        ^parameters.word <word>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-unknown-word
          ^originator instructor)
   (<dc> ^learning-predicate <lp>)
   (<lp> ^name <word> ^spelling <hs> ^usage-args (deep-copy <args>))#<name2
   (<c> ^outgoing-message <out-msg>)
   (<out-msg> ^type unknown-defined-word
              ^fields.word <word>)
   #(<ps> ^learned-structure <nlp>) #dont stored
}
sp {resolve-conditions*apply*resolve-ungroundable
   (state <s> ^name resolve-conditions
   		  	  ^quiescence t 
			  ^linkstate <ls>
			  ^word <word>
			  ^top-state <ts>
			  ^top-state.interaction.changes <c>
			  ^found-new-learnable true
   		  	  ^operator <o>)
   (<o> ^name resolve-ungroundable ^condition <co>)
   (<ts> ^dialog-context <dc>)
   (<co> ^name {<name2> <> <word>} ^args <args>)
-->
#(write (cmd print <co> -d 20))
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-unknown-word
        ^parameters.word <word>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-unknown-word
          ^originator instructor)
   (<dc> ^learning-predicate <lp>)
   (<lp> ^name <word> ^spelling <name2> ^usage-args (deep-copy <args>))
   (<c> ^outgoing-message <out-msg>)
   (<out-msg> ^type unknown-defined-word
              ^fields.word <word>)
   #(<ps> ^learned-structure <nlp>) #dont stored
}
# PR - my version
#sp {learn-condition*propose*resolve-satisfaction-failure
#   (state <s> ^operator.name wait
#              ^impasse no-change
#              ^superstate.superstate <sss>)
#   (<sss> ^name learn-condition)
#-->
##(interrupt)
##(write (cmd print <sss> -d 6))
#(<sss> ^operator <o> + >)
#(<o> ^name resolve-satisfaction-failure)
#}

sp {learn-condition*apply*resolve-satisfaction-failure
   (state <s> ^superstate <sss>)
   (<sss> ^name learn-condition
          ^operator.name resolve-satisfaction-failure)
-->
   (<s> ^unresolved-conditions <cos>
        ^set <out-cond>)
}
#sp {learn-condition*apply*resolve-satisfaction-failure*interrupt
#   (state <s> ^linkstate.goal <lsd>
#   		  	  ^operator.name resolve-satisfaction-failure)
#-->
#(interrupt)
#(write (cmd print <lsd> -d 10))
#}
sp {resolve-satisfaction-failure*elaborate*unresolved
   (state <s> ^name resolve-satisfaction-failure
              ^superstate.superstate <sss>
              ^unresolved-conditions <cos>)
   (<sss> ^condition <co>)
   (<co> -^result.set.<x>)
-->
   (<cos> ^condition <co>)
}

# When the top condition is broken because of its child condition (e.g. on is broken because small block doesn't exist) add the child (missing small block) condition.
sp {resolve-satisfaction-failure*elaborate*select-bottom-most-conditions
   (state <s> ^name resolve-satisfaction-failure
              ^unresolved-conditions <cos>)
   (<cos> ^condition <co1>
          ^condition { <> <co1> <co2> })
   (<co1> ^args.<< 1 2 >> <co2>)
-->
   (<co1> ^added yes)
}

#PR - TODO this won't work in why not?
# When a concept is broken (larger-than, captured), the condition of the predicate appears unresolved as well. Only add the concept/link as unresolved condition.
sp {resolve-satisfaction-failure*elaborate*ignore-predicate-subcondition
   (state <s> ^name resolve-satisfaction-failure
              ^superstate.superstate.superstate <ssss>
              ^unresolved-conditions <cos>)
   (<cos> ^condition <co1>
          ^condition { <> <co1> <co2> })
   (<ssss> ^name evaluate-predicate
           ^predicate <pred>)
   (<pred> ^link <co2>
           ^condition <co1>)
-->
   (<co1> ^added yes)
}
   
sp {resolve-satisfaction-failure*propose*handle-unresolved-condition
   (state <s> ^name resolve-satisfaction-failure
              -^set.conditions
              ^unresolved-conditions <cos>)
   (<cos> ^condition <con>)
  -{ (<cos> ^condition {> <con> <con2>})} # Ensuring this operator is proposed only once given a set of conditions and it consists of at least one. 
-->
   (<s> ^operator <o> +)
   (<o> ^name handle-unresolved-condition
        ^unresolved-conditions <cos>)
}

sp {resolve-satisfaction-failure*apply*add-condition-without-subconditions
   (state <s> ^name resolve-satisfaction-failure
              ^set <out-cond>
     		  ^quiescence t #do not chunk through this rule (failure case)
              ^operator <o>)
   (<o> ^name handle-unresolved-condition
        ^unresolved-conditions <cos>)
   (<cos> ^condition <co1>)
   (<co1> -^added yes)
-->
   (<out-cond> ^conditions <co1>)
}

# If it has failed because a set was not satisfied but all conditions are satisfied.
#JK version commenting out
#TODO USE for Preeti version
#sp {resolve-conditions*propose*resolve-satisfaction-failure
#   (state <s> ^operator.name wait
#              ^impasse no-change
#              ^superstate <ss>
#              ^superstate.superstate <sss>)
#   (<ss> ^name resolve-conditions)
#   (<sss> ^name chunk-predicate-impasse)
#-->
#   (<ss> ^operator <o> + >)      
#   (<o> ^name resolve-satisfaction-failure)
#}

sp {resolve-conditions*elaborate*resolve-satisfaction-failure
   (state <s> #^name resolve-conditions
              ^superstate <ss>
              ^operator <o> +)
   (<o> ^name resolve-satisfaction-failure)
   (<ss> ^<gtype>.nlp-set <nlp-set>
         ^gtype { <> |predicate| <gtype> })
   (<nlp-set> ^<< nlp conditions >> <condition>)
   (<condition> ^args <args1>
                ^parameter <params1>)
-->
   (<condition> ^arg-count (size <args1>)
                ^param-count (size <params1>))
}
 
sp {resolve-conditions*elaborate*resolve-satisfaction-failure*select-nlp
   (state <s> #^name resolve-conditions
              ^superstate <ss>
              ^operator <o> +)
   (<o> ^name resolve-satisfaction-failure)
   (<ss> ^<gtype>.nlp-set <nlp-set>
         ^gtype { <> |predicate| <gtype> })
   (<nlp-set> ^<< nlp conditions >> <condition>)
   (<condition> #PR - TODO consider doing this with parameter instead of args
                ^args <args1>
                ^arg-count <argcount>)
   -{(<nlp-set> ^nlp { <condition2> <> <condition1> })
     (<condition2> ^arg-count { > <argcount> <argcount2> })}
-->
    (<o> ^nlp <condition>
         ^gtype <gtype>)
}

# Making the assumption that the result.set.instance has 2 args
# not considering multiple conditions with same no. of args yet
sp {resolve-conditions*apply*resolve-satisfaction-failure*neg-pair
   (state <s> ^name resolve-satisfaction-failure
              ^superstate <ss>
              ^superstate.superstate <sss>)
   (<ss> ^operator <o>)
   (<o> ^name resolve-satisfaction-failure
        ^nlp <cond>
        ^gtype <gtype>)
   (<cond> ^parameter <param>
           ^result.set.instance <inst>)
   (<param> ^1.param-id <paramid1>
            ^2.param-id <paramid2>)
   (<inst> ^1 <num> ^2 <cset>)
   (<sss> ^<gtype>.parameter-set.negpair <negpair>)
   (<negpair> ^<paramid1> { <num1> <> <num> } #num1 is what it should have been #PR - confirm with james
              ^<paramid2> <cset>)
-->
   (<s> ^set <set>)
   (<set> ^conditions <cond>)
}
# PR - end my  version

#case 3 inform instructor about condition not identified in the real world
sp {resolve-satisfaction-failure*propose*complete-handle-unresolved-condition
   (state <s> ^name resolve-satisfaction-failure
              ^PR-game-details yes
              ^generated <gen>
              ^added yes
              ^set <out-cond>
              ^descriptions <descs>)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-handle-unresolved-condition
        ^descriptions <descs>
        ^generated <gen>)   
}

# PR - TODO: complete this the way you complete can you see game concepts and remove unsatisfied condition from send-message
sp {resolve-satisfaction-failure*apply*complete-handle-unresolved-condition*condition-unsatisfied*remove-dialogue-context
   (state <s> ^name resolve-satisfaction-failure
              ^PR-game-details yes
              ^quiescence t #do not chunk through this rule (failure case)
              ^descriptions <descs>
              ^added yes
              ^generated <gen>
              ^set <out-cond>
              ^top-state <ts>
              ^top-state.interaction.changes <c> 
              ^operator <o>)
   (<o> ^name complete-handle-unresolved-condition)
   (<ts> ^dialogue-context <dc>)
-->
   (<ts> ^dialogue-context <dc> -) # remove dialogue-context if it exists from top-state (on answering why not?)
}
 
sp {resolve-satisfaction-failure*apply*complete-handle-unresolved-condition*condition-unsatisfied*send-message
   (state <s> ^name resolve-satisfaction-failure
              -^concept-seen
              -^purpose-type
              ^PR-game-details yes
              ^quiescence t #do not chunk through this rule (failure case)
              ^descriptions <descs>
              ^added yes
              ^generated <gen>
              ^set <out-cond>
              -^top-state.dialogue-context
              ^top-state.interaction.changes <c> 
              ^operator <o>)
   (<o> ^name complete-handle-unresolved-condition)
-->
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-unsatisfied-condition
        ^parameters.condition <co>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type single-word-response # PR - Additionally you could write extra rules (with type process-unsatisfied-condition in case instructor needs further detail about the issue or for clarifications.
          ^originator instructor)
   (<c> ^outgoing-message <out>)
   (<out> ^type unsatisfied-condition
          ^fields.descriptions <descs>)
}
# Alternate RHS for above. Right now, the above method ensures if there is an issue while learning a game, the execution continues
# Whereas in the following way, execution stops 
#   (<out> ^send-message <msg>)
#   (<msg> ^type unsatisfied-condition
#          ^fields.descriptions <descs>)

sp {resolve-satisfaction-failure*apply*complete-handle-unresolved-condition*concept-not-seen*send-message
   (state <s> ^name resolve-satisfaction-failure
              ^purpose-type <type>
              ^concept-seen <seen>
              ^gtype <gtype>
              ^operator <o>
              ^PR-game-details yes
              ^quiescence t #do not chunk through this rule (failure case)
              ^descriptions <descs>
              ^added yes
              ^generated <gen>
              ^set <out-cond>
              ^io.output-link <out>)
   (<o> ^name complete-handle-unresolved-condition)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type <type>
          ^fields.response <res>)
   (<res> ^descriptions <descs>
          ^concept-seen <seen>
          ^gtype <gtype>)
}

sp {resolve-satisfaction-failure*apply*complete-handle-unresolved-condition*mark*performed
   (state <s> ^name resolve-satisfaction-failure
              ^quiescence t #do not chunk through this rule (failure case)
              ^operator.name complete-handle-unresolved-condition
              ^top-state <ts>)
   (<ts> ^interaction.status <status>)
-->
   (<status> ^performed.dialog-event <de>)
   (<de> ^type explanation
         ^originator agent)
}

#case 1
#could be because concept has another unknown definition
#case 2
#could be because concepts has another known definition
#case 3, bad argument connection
#case 4, description incorrect could list simplest condition could not satisfy
#only reach this case if ruled out 1 or 2
#case 5, got to isets, but there is a negpair case....

#would be useful application of preeti's work-> describing an unsatified concept in english= I could not find any matched objects, or i could not find a value of an object...

