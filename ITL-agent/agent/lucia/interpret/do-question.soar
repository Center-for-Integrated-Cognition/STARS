##!
# @file
#
# @created p 20160408
# File: do-question.soar
# Author: Peter 
# Created: 8 April 2016
#
# Desc: This operator will create an action
#       to ask a question.
#
#		There are various kinds of questions, each with its own
#		propose and apply rules.
#


###################     WhatIsObjectQuestion      ####################

#   Propose an operator to decide to ask a WhatIsObjectQuestion question
sp {interpret*propose*do-question*what-is-object
   (state <s> ^problem-space interpret
              ^comprehension <c>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a WhatIsObjectQuestion)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-question
        ^type interpretation
        ^meaning <m>
        ^debug-info (concat |Decide to ask a WhatIsObjectQuestion question.|))
}

#   Build a WhatIsObjectQuestion question action
sp {interpret*apply*do-question*what-is-object
   (state <s> ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-question
        ^meaning <m>)
   (<m> ^is.a WhatIsObjectQuestion
        ^object <object>)
-->
   #   Add an action to define the property
   (<s> ^action <question>)
   (<question> ^action WHAT-IS-OBJECT-QUESTION
               ^object <object>
               ^next nil)
}


###################     WhatIsRelation      ####################

#   Propose an operator to decide to ask a WhatIsRelation question
sp {interpret*propose*do-question*what-is-relation
   (state <s> ^problem-space interpret
              ^comprehension <c>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a WhatIsRelation)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-question
        ^type interpretation
        ^meaning <m>
        ^debug-info (concat |Decide to ask a WhatIsRelation question.|))
}

#   Build a WhatIsRelation question action
sp {interpret*apply*do-question*what-is-relation
   (state <s> ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-question
        ^meaning <m>)
   (<m> ^is.a WhatIsRelation
        ^predicate <predicate>)
-->
   #   Add an action to define the property
   (<s> ^action <question>)
   (<question> ^action WHAT-IS-QUESTION
               ^predicate <predicate>
	           ^next nil)
}


###################     WhereIsObject      ####################

#   Propose an operator to decide to ask a WhereIsObject question
sp {interpret*propose*do-question*where-is-object
   (state <s> ^problem-space interpret
              ^comprehension <c>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a WhereIsObject)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-question
        ^type interpretation
        ^meaning <m>
        ^debug-info (concat |Decide to ask a WhereIsObject question.|))
}

#   Build a WhereIsObject question action
sp {interpret*apply*do-question*where-is-object
   (state <s> ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-question
        ^meaning <m>)
   (<m> ^is.a WhereIsObject
        ^object.referent <object>)
-->
   #   Add an action to define the property
   (<s> ^action <question>)
   (<question> ^action WHERE-IS-QUESTION
               ^object <object>
               ^next nil)
}


###################     ObjectIsClassQuestion      ####################

#   Propose an operator to decide to ask a ObjectIsClassQuestion question
sp {interpret*propose*do-question*object-is-class
   (state <s> ^problem-space interpret
              ^comprehension <c>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a ObjectIsClassQuestion)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-question
        ^type interpretation
        ^meaning <m>
        ^debug-info (concat |Decide to ask a ObjectIsClassQuestion question.|))
}

#   Build a ObjectIsClassQuestion question action
sp {interpret*apply*do-question*object-is-class
   (state <s> ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-question
        ^meaning <m>)
   (<m> ^is.a ObjectIsClassQuestion
        ^object.referent <object>
        ^class.predicate <predicate>)
-->
   #   Add an action to define the property
   (<s> ^action <question>)
   (<question> ^action OBJECT-IS-CLASS-QUESTION
               ^object <object>
               ^predicate <predicate>
               ^next nil)
}


###################     ObjectIsRelationQuestion      ####################

#   Propose an operator to decide to ask a ObjectIsRelationQuestion question
sp {interpret*propose*do-question*object-is-relation
   (state <s> ^problem-space interpret
              ^comprehension <c>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a ObjectIsRelationQuestion)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-question
        ^type interpretation
        ^meaning <m>
        ^debug-info (concat |Decide to ask a ObjectIsRelationQuestion question.|))
}

#   Build a ObjectIsRelationQuestion question action
sp {interpret*apply*do-question*object-is-relation
   (state <s> ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-question
        ^meaning <m>)
   (<m> ^is.a ObjectIsRelationQuestion
        ^object.referent <object>
        ^relation <prep-relation>)
   #    Unpack the relation
   (<prep-relation> ^prep <prep>
                    ^object.referent <prep-object>)
-->
   #   Add an action to ask the question
   (<s> ^action <question>)
   (<question> ^action OBJECT-IS-RELATION-QUESTION
               ^object <object>
               ^relation <relation>
               ^next nil)
   #    Build the relation structure
   (<relation> ^prep <prep>
               ^object <prep-object>)
}


###################     WhatClassIsObjectQuestion      ####################

#   Propose an operator to decide to ask a WhatClassIsObjectQuestion question
sp {interpret*propose*do-question*what-class-is-object
   (state <s> ^problem-space interpret
              ^comprehension <c>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a WhatClassIsObjectQuestion)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-question
        ^type interpretation
        ^meaning <m>
        ^debug-info (concat |Decide to ask a WhatClassIsObjectQuestion question.|))
}

#   Build a WhatClassIsObjectQuestion question action
sp {interpret*apply*do-question*what-class-is-object
   (state <s> ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-question
        ^meaning <m>)
   (<m> ^is.a WhatClassIsObjectQuestion
        ^object.referent <object>
        ^class.predicate <predicate>)
-->
   #   Add an action to ask the question
   (<s> ^action <question>)
   (<question> ^action WHAT-CLASS-IS-OBJECT-QUESTION
               ^object <object>
               ^predicate <predicate>
               ^next nil)
}
