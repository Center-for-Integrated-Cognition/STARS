#   Soar code produced automatically 
#   from file 'C:\Users\p\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\8puzzle\ecg\8p-objects.ecg'.

#   Name schema
sp {comprehend-word*evoked-schema*Name*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Name
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Name
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Name)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value name1)
}

#   Name schema
sp {comprehend-word*evoked-schema*Name*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Name
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Name)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value name1)
}

#   Game schema
sp {comprehend-word*evoked-schema*Game*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Game
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Game
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Game)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value game1)
}

#   Game schema
sp {comprehend-word*evoked-schema*Game*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Game
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Game)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value game1)
}

#   Puzzle schema
sp {comprehend-word*evoked-schema*Puzzle*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Puzzle
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Puzzle
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Puzzle)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value puzzle1)
}

#   Puzzle schema
sp {comprehend-word*evoked-schema*Puzzle*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Puzzle
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Puzzle)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value puzzle1)
}

