## Example Verbs: Move, Store, Put {down}, Pick {up}, Open, Close, Turn {on/off}, Cook, Discard, Serve, Organize, Set, Clean {up}
##        is, are
#Action verbs: run, hop, think, dream, imagine [have a direct object, sometimes indirect object]
# Linking Verbs: is, are, seems,  [have a predicate noun or predicate adjective]

smem --add {
           (<prefer> ^spelling |prefer|
                     ^structure-type V
                     ^semantic-structure action
                     ^tense present
                     ^number singular
                     ^assigners  <prefera1>
                               <prefera2>
                               <prefera3>
                    ^referent @101123
                    ^converts-to VP)
           (<prefera1> ^structure-type GP  #Gerund Phrase
                       ^relative-position after
                       ^syntactic-structure complement
                       ^semantic-structure *embed*
                       ^embed-structure subclause1
                       ^before <prefera2> 
                       ^before <prefera3>
                       ^required true)
           (<prefera2> ^structure-type P
                       ^lexical-item-spelling |over| 
                       ^before <prefera3>
                       ^syntactic-structure adjunct
                       ^optional true
                       ^referent-type literal)
           (<prefera3> ^structure-type GP  #Gerund Phrase
                       ^syntactic-structure complement2
                       ^semantic-structure *embed*
                       ^embed-structure subclause2
                       ^optional true)
}

smem --add {
           (<consider> ^spelling |consider|
                     ^structure-type V
                     ^semantic-structure action
                     ^tense present
                     ^number singular
                     ^assigners <prefera1>
                                <prefera2>
                                <prefera3>
                   ^referent @101146
                   ^converts-to VP)
           (<prefera1> ^structure-type GP  #Gerund Phrase
                       ^relative-position after
                       ^syntactic-structure complement
                       ^semantic-structure *embed*
                       ^embed-structure subclause1
                       ^before <prefera2> 
                       ^before <prefera3>
                       ^required true)
           (<prefera2> ^structure-type P
                       ^lexical-item-spelling |over| 
                       ^before <prefera3>
                       ^syntactic-structure adjunct
                       ^optional true
                       ^referent-type literal)
           (<prefera3> ^structure-type GP  #Gerund Phrase
                       ^syntactic-structure complement2
                       ^semantic-structure *embed*
                       ^embed-structure subclause2
                       ^optional true)
}
smem --add {
           (<avoid> ^spelling |avoid|
                     ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <avoida1>
                               <avoida2>
                               <avoida3>
                   ^referent @101124
                   ^converts-to VP)
           (<avoida1> ^structure-type GP  #Gerund Phrase
                       ^relative-position after
                       ^syntactic-structure complement
                       ^semantic-structure *embed*
                       ^embed-structure subclause1  #James fix inconsistent use of subclause vs subclause1
                       ^before <avoida2> 
                       ^before <avoida3>
                       ^required true)
           (<avoida2> ^structure-type P
                     ^lexical-item-spelling |over| 
                       ^before <avoida3>
                       ^syntactic-structure adjunct
                       ^semantic-structure on-off-state
                       ^optional true
                       ^referent-type literal)
           (<avoida3> ^structure-type GP  #Gerund Phrase
                       ^semantic-structure *embed*
                       ^embed-structure subclause2
                       ^optional true)
}
smem --add {
           
############################
   #### VERBS

   ## Tell
           (<tell> ^spelling |tell|
                   ^referent @101031
                   ^super-type @60991) 

           # AM: old version
           #(<tell> ^spelling |tell|
           #           ^referent @101132
           #           ^super-type @60999)
                                 

           (<throw> ^spelling |throw|
                   ^referent @101032
                   ^super-type @60998
                   ^directional true) 
   ## MOVE
           (<move> ^spelling |move|
                   ^referent @101101
                   ^tense present
                   ^directional true
                   ^super-type @60987)
	       (<write> ^spelling |write|
                   ^referent @101901
                   ^tense present
                   ^directional true
                   ^super-type @60987)
#    ## MOVE
#           (<moved> ^spelling |moved|
#                   ^referent @101101
#                   ^tense past
#                   ^directional true
#                   ^super-type @60986)
#      ## covered                                        ## JEL - decide was not covered - should be adj. 
#           (<covered> ^spelling |covered-v|
#                   ^current-word |covered|
#                   ^prior-word-stale false
#                   ^prior-word RC
#                   ^prior-word ADV
#                   ^prior-word-first false
#                   ^referent @101149
#                   ^tense past
#                   ^super-type @60986) 
#
#      ## matched
#           (<matched> ^spelling |matched-v|
#                   ^current-word |matched|
#                   ^prior-word-stale false
#                   ^prior-word IS-V
#                   ^prior-word |not|
#                   ^prior-word-first false
#                   ^referent @101147
#                   ^tense past
#                   ^super-type @60986)                             
   ## set
           (<set> ^spelling |set|
                   ^referent @101013
                   ^directional true
                   ^super-type @60997)
   ## place
           (<place> ^spelling |place|
                   ^referent @101002
                   ^super-type @60999
                   ^directional true)
           
      (<attack> ^spelling |attack|
                  # ^referent @101101
                ^referent @101144
                   ^super-type @60999
                   ^directional true)
      
(<fill> ^spelling |fill|
                ^referent @101244
                   ^super-type @60999
                   ^directional true)
        
   ## PUT
           (<put> ^spelling |put|
                   ^referent @101002
                   ^super-type @60985 
                   ^directional true)
           
   ## Said
           (<said> ^spelling |said|
                   ^referent @101116
                   ^tense past
                   ^super-type @60999) 
        

   ## discard
           (<discard> ^spelling |discard|
                      ^referent @101103
                      ^super-type @60998)
              
    ## pick
           (<pick> ^spelling |pick|
                  ^referent @101001
                  ^super-type @60998
                  ^can-be-part-of |pick-up|)

    ## find
           (<find> ^spelling |find|
                  ^referent @101020
                  ^super-type @60998)
          
    ## cook
           (<cook> ^spelling |cook|
                  ^referent @101012
                  ^super-type @60998)
                            
    ## open
           (<open> ^spelling |open|
                   ^referent @101003
                   ^super-type @60997                 
                   ^can-be-part-of |open-up|)
           
     ## close           
           (<close> ^spelling |close|
                    ^referent @101004
                    ^super-type @60997 
                    ^converts-to VP)
           
    ## organize           
           (<organize> ^spelling |organize|
                    ^referent @108009
                    ^super-type @60997)
           (@108009 ^handle organize)

    ## clean           
           (<clean> ^spelling |clean|
                    ^referent @101014
                    ^super-type @60997)
 

#    ## set           
#           (<set> ^spelling |set|
#                    ^referent @101013
#                    ^super-type @60997)
#           #@60997

                     
    ## activate           
           (<activate> ^spelling |activate|
                    ^referent @101005
                    ^super-type @60997)
                          
    ## STORE
          (<store> ^spelling |store|
                   ^referent @101102
                   ^super-type @60996)         
                              
                              

    ## Attach
#          (<attack> ^spelling |attack|
#                   ^referent @101144
#                   ^super-type @60997) 

    ## matches
           (<matches> ^spelling |matches|
                   ^referent @101147
                   ^tense present
                   ^directional true
                   ^super-type @60987)
                         
    ## Point
          (<point> ^spelling |point|
                   ^referent @101002
                   ^super-type @60995)

            ## check
           (<check> ^spelling |check|
                   ^super-type @60990 
                   ^referent @101113)

           (<test> ^spelling |test|
                   ^super-type @60990 
                   ^referent @101113)

      ## Fetch
     (<fetch> ^spelling |fetch|
             ^referent @101105
             ^super-type @60999
             ^directional true)
           
           (<has> ^spelling |has|
                   ^super-type @60989
                   ^referent @101119)
           
           (<have> ^spelling |have|
                   ^super-type @60989 
                   ^referent @101119)
           
           (<play> ^spelling |play|
                   ^super-type @60999 
                   ^referent @101120)
           
(<wines> ^spelling |wins|
                   ^super-type @60993 
                   ^referent @101121)
           
           (<wine> ^spelling |win|
                   ^super-type @60993 
                   ^referent @101121)
           
           (<lose> ^spelling |lose|
                   ^super-type @60993 
                   ^referent @101122)
}
smem --add { 
   ## Ignore
         (<ignore> ^spelling |ignore|
                   ^referent @101118
                   ^super-type @60988) 
             
          (<attend> ^spelling |attend|
                   ^referent @101117 
                   ^super-type @60988)
          

           (<attend-to> ^prior-word |attend|
                        ^current-word |to|
                         ^spelling |attend-to|
                         ^super-type @60998
                         ^referent @101117
                         ^consumes-prior-word true)
                                 
}
## Mobile Verbs
   
## STOP at the intersection/t-intersection/hall/door/hallway on the left.
smem --add {  
           (<stop> ^spelling |stop|
                   ^referent @101209
                   ^super-type @60995)
           
           
            (<stopx> ^spelling-single-word |stop|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @101209)
            
           (<deliver> ^spelling |deliver|
                      ^referent @101104
                      ^super-type @60999
                      ^directional true)
            
#           (<find> ^spelling |find|
#                      ^referent @101018
#                      ^super-type @60999)
                       
           (<scan> ^spelling |scan|
                      ^referent @101125
                      ^super-type @60992)
     ## give
           (<give> ^spelling |give|
                   ^referent @101126
                   ^super-type @60999
                   ^directional true)
           
           (<take> ^spelling |take|
                      ^referent @101127
                      ^super-type @60999)
                                  
           (<guid> ^spelling |guide|
                      ^referent @101128
                      ^super-type @60999)
                       
           (<serve> ^spelling |serve|
                      ^referent @101129
                      ^super-type @60999)
                                  
           (<perform> ^spelling |perform|
                      ^referent @101131
                      ^super-type @60998)
                                  
           (<bring> ^spelling |bring|
                      ^referent @101130
                      ^super-type @60999)
            
}

smem --add {
	(<scan> ^spelling-single-word |scan|
         ^structure-type CP
         ^semantic-structure action
         ^message-type command
         ^referent @101131)
  
  (<scanp> ^spelling |scan|
            ^super-type @60995
            ^referent @101131)


   (<face> ^spelling |face|
           ^referent @101204
           ^super-type @60998)
}
## Drive forward, down the hall

## Turn left

smem --add {
           (<turn-left>  ^prior-word |turn|
                         ^current-word |left|
                         ^spelling |turn-left|
                         ^structure-type CP
                         ^semantic-structure action
                         ^referent @101201
                         ^semantic-structure2 arg1
                         ^referent2 @409002
                         ^prior-word-first true
                         ^message-type command)
         }

## Turn right
smem --add {
           (<turn-right> ^prior-word |turn|
                         ^current-word |right|
                         ^spelling |turn-right|
                         ^structure-type CP
                         ^semantic-structure action
                         ^referent @101201
                         ^semantic-structure2 arg1
                         ^referent2 @409001
                         ^prior-word-first true
                         ^message-type command)
         }


## Turn around
smem --add {
           (<turn-around> ^prior-word |turn|
                          ^current-word |around|
                          ^spelling |turn-around|
                          ^structure-type CP
                          ^semantic-structure action
                          ^referent @101201
                         ^semantic-structure2 arg1
                         ^referent2 @409003
                          ^prior-word-first true
                          ^message-type command)
         }

########## SENSING VERBS
# detect/see/encounter/sense DP
smem --add {  
           (<see> ^spelling |see|
                  ^referent @101111
                  ^super-type @60997)
           
           (<detect> ^spelling |detect|
                     ^referent @101111
                     ^super-type @60997)           
            
           (<sensex> ^spelling |sense|
                     ^referent @101111
                     ^super-type @60997)             
           
           (<encounter> ^spelling |encounter|
                        ^referent @101111
                      ^super-type @60997)  
             
           (<reach> ^spelling |reach|
                    ^referent @101111
                    ^super-type @60997)
}
##################### Different ways to say: Drive Forward 
## Go down the hall, go forward, go to the end of the hall, go until you ...: Go PP
smem --add {     
           (<explore> ^spelling |explore|
                      ^referent @101110
                      ^super-type @60992)
                   
          (<go> ^spelling |go|
                 ^referent @101206
                 ^super-type @60992)
           
            (<gox> ^spelling-single-word |go|
                   ^structure-type CP
                   ^semantic-structure action
                   ^message-type command
                   ^referent @101206)          
           ## GO

#     forward
#           (<forward> ^spelling |forward|
#                      ^super-type @60995
#                      ^referent @101206) 

           (<forwardx> ^spelling-single-word |forward|
                       ^structure-type CP
                       ^semantic-structure action
                       ^message-type command
                       ^referent @101206) 

#           (<go-forward> ^prior-word |go|
#                         ^current-word |forward|
#                         ^spelling |go-forward|
#                         ^super-type @60992
#                         ^referent @101206
#                         ^prior-word-first true)
           
           (<go-down> ^prior-word |go|
                      ^current-word |down|
                      ^spelling |go-down|
                      ^super-type @60993
                      ^referent @101206
                      ^prior-word-first true)

#     drive
           (<drive> ^spelling |drive|
                    ^super-type @60992
                    ^referent @101206)

           (<drivex> ^spelling-single-word |drive|
                       ^structure-type CP
                       ^semantic-structure action
                       ^message-type command
                       ^referent @101206) 

#           (<drive-forward> ^prior-word |drive|
#                            ^current-word |forward|
#                         ^spelling |drive-forward|
#                         ^super-type @60992
#                         ^referent @101206
#                         ^prior-word-first true)
           

           (<drive-down> ^prior-word |drive|
                      ^current-word |down|
                      ^spelling |drive-down|
                      ^super-type @60993
                      ^referent @101206
                      ^prior-word-first true)

}

##########  Remember

 
smem --add {            
           (<rem>  ^spelling |remember|
                   ^referent @101112
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3>
                   ^converts-to VP)
          (<VT1> ^structure-type DP
                 ^before <VT3>
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
          (<VT2> ^structure-type P
                 ^syntactic-structure nil
                  ^lexical-item-spelling |as|
                 ^required true)
          (<VT3> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg2
                 ^required true)
                     
          
}

 
 
smem --add {            
           (<rem>  ^prior-word |remember|
                   ^referent @101112
                   ^spelling |remember-if|
                   ^current-word |if|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3> 
                   ^converts-to VP)
          (<VT1> ^structure-type CP
                 ^before <VT2> <VT3> 
                 ^relative-position after
                 ^semantic-structure *embed*
                 ^embed-structure if-subclause
                 ^syntactic-structure nil
                 ^required true)
           (<VT2> ^structure-type P
                  ^before <VT3> 
                  ^lexical-item-spelling |as|
                  ^syntactic-structure nil
                  ^required true)
           (<VT3> ^structure-type DP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^required true)
                               
}

smem --add { 
   ## Heard
           (<heard> ^spelling |heard|
                   ^referent @101115
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2>
                   ^converts-to VP)
          (<VT1> ^structure-type PN
                 ^before <VT2> 
                 ^relative-position before
                 ^syntactic-structure head
                 ^semantic-structure agent
                 ^required true) 
          (<VT2> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
}

smem --add {            
           (<rec>  ^spelling |recall|
                   ^referent @101114
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT2> <VT3>
                   ^converts-to VP)
#         (<VT1> ^structure-type PN
#                 ^exclusive <VT2> 
#                 ^relative-position after
#                 ^syntactic-structure head
#                 ^semantic-structure arg1
#                 ^optional true) 
          (<VT2> ^structure-type DP
                 ^exclusive <VT1> 
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^optional true)
          (<VT3>  ^structure-type PP
                    ^syntactic-structure complement
                    ^semantic-structure predicate
                    ^relative-position after
                    ^required true)
}                

# AM: EDIT: removed the 2nd argument 
# 'Think of a storage location of the soda'
# The soda argument is put under the first as a sub-relation

smem --add {            
           (<think>  ^spelling |think|
                   ^referent @101143
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^assigners <VT1> #<VT2> <VT1> 
                   ^converts-to VP)
          (<VT1> ^structure-type PP
          #                 ^before <VT2> 
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg2
                 ^required true)
#          (<VT2>  ^structure-type PP
#                    ^syntactic-structure complement
#                    ^semantic-structure arg1
#                    ^relative-position after
#                    ^required true)
}                                                                 

smem --add {    
           (<ask> ^spelling |ask|
                   ^referent @101030
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3>
                   ^converts-to VP)
          (<VT1> ^structure-type PN
                 ^before <VT2> <VT3>
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure agent
                 ^optional true) 
          (<VT2> ^structure-type U
                 ^exclusive <VT3>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
          (<VT3> ^structure-type DP
                 ^exclusive <VT2>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
     
}

smem --add {    
           (<say> ^spelling |say|
                   ^referent @101116
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT2> <VT3>
                   ^converts-to VP)
          (<VT2> ^structure-type U
                 ^exclusive <VT3>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
          (<VT3> ^structure-type DP
                 ^exclusive <VT2>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
     
}
            
  
######### Follow A1202

## Follow the left wall / Follow the right wall
smem --add {
           (<folllow> ^spelling |follow|
                      ^super-type @60993
                      ^referent @101202) 
}
   
smem --add {
           (<orient> ^spelling |orient|
                      ^semantic-structure action
                      ^referent @101203
                      ^converts-to VP
                      ^structure-type V
                      ^semantic-structure action
                      ^tense present
                      ^number singular
                      ^assigners  <VT1>
                      ^converts-to VP)  
          (<VT1> ^structure-type CARDINAL
                 ^syntactic-structure head
                 ^referent-type literal
                 ^semantic-structure arg1
                 ^required true)
}                         

# AM: The sentence 'Face the red box' didn't work with this included
#smem --add {
#           (<orient> ^spelling |face|
#                      ^semantic-structure action
#                      ^referent @101203
#                      ^converts-to VP
#                      ^structure-type V
#                      ^semantic-structure action
#                      ^tense present
#                      ^number singular
#                      ^assigners <VT1>
#                      ^converts-to VP) 
#          (<VT1> ^structure-type CARDINAL
#                 ^syntactic-structure head
#                 ^referent-type literal
#                 ^semantic-structure arg1
#                 ^required true)
#}    

smem --add {
          
       
           (<load> ^spelling |load|
                      ^semantic-structure action
                      ^referent @101145
                      ^converts-to VP
                      ^structure-type V
                      ^semantic-structure action
                      ^tense present
                      ^number singular
                      ^assigners  <VT1>
                      ^converts-to VP)  
          (<VT1> ^structure-type U
                 ^syntactic-structure head
                 ^referent-type literal
                 ^semantic-structure arg1
                 ^required true)
}        
### Sense Verbs        
            
 
smem --add {  ## Stack - can take a conjunction of objects to stack
           
           (<stack> ^spelling |stack|
                  ^structure-type V
                  ^semantic-structure action
                  ^tense present
                  ^number singular
                  ^assigners <stack1> <stack2> <stack3> <stack4> <stack5> 
                  ^referent @101011
                  ^converts-to VP)
           (<stack1> ^structure-type DP
                     ^before <stack3>
                     ^before <stack5>
                     ^syntactic-structure head
                     ^semantic-structure arg1
                     ^required true)
           (<stack2> ^structure-type CONJ
                     ^before <stack4>
                     ^syntactic-structure nil
                     ^optional true)
           (<stack3> ^structure-type DP
                     ^before <stack5>
                     ^syntactic-structure head
                     ^semantic-structure arg2
                     ^optional true)
           (<stack4> ^structure-type CONJ
                     ^syntactic-structure nil
                     ^optional true)
           (<stack5> ^structure-type DP
                     ^syntactic-structure head
                     ^semantic-structure arg3
                     ^optional true)
           }           
 
smem --add { 
# turn X on
      ## turn
           (@9011 ^spelling |turn|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <turna1>
                               <turna2>
                               <turna3>
                   ^referent @101005
                   ^converts-to VP)
           (<turna1> ^structure-type DP
                     ^relative-position after
                     ^syntactic-structure complement
                     ^semantic-structure arg1
                     ^before <turna2> 
                     ^before <turna3>
                     ^optional true)
           (<turna2> ^structure-type ADJ
                     ^exclusive <turna3>
                     ^lexical-item-spelling |on| 
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)
           (<turna3> ^structure-type ADJ
                     ^exclusive <turna2>
                     ^lexical-item-spelling |off|
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)
          ## WAIT
           (<wait> ^spelling-single-word |wait|
                   ^structure-type CP
                   ^message-type wait)
           
            ## WAIT
           (<wait2> ^spelling |wait|
                   ^super-type @60993 
                   ^referent @101007)
}

#   @60999  Move DP PP (optional - but usually there) ADV
#   @60998  Pick DP ADV
#   @60997  Clean DP ADV PP (optional) 
#   @60996  Store DP (PP optional)
#   @60995  Point PP
#   @60994  Stop
#   @60993  Go-down [DP: the hall] [PP: until...]

### VERB such as Store - has a object (DP) it is moving and a destination specified by a PP

## Should add adverb to it
         
smem --add {            
           (@60999  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT4> <VT5> <VT6> <VT7>
                   ^converts-to VP)
           (<VT0> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT1> ^structure-type DP                          # you .. 
                   ^relative-position before
                   ^syntactic-structure head
                   ^semantic-structure agent
                   ^optional true)
           (<VT2> ^structure-type V-AUX                       # can
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT3> ^structure-type DP   
                 ^before <VT5> <VT7>                         # what is being moved
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
           (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^exclusive <VT7>
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                  ^after #<VT3> #<VT4>
                  ^exclusive <VT7>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
           (<VT6> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT7> ^structure-type DP                             # Added to handle Give Bob a Tour
                   #^after <VT3>                                        # removed because causing interference with 41 mobil v2
                   ^exclusive <VT5> <VT4>
                   ^relative-position after
                   ^syntactic-structure head
                   ^semantic-structure arg2
                   ^optional true)

 
}
#         
## Has single argument, it is manipulating
## Includes adverb - Pick up the block slowly; pick the block up

smem --add {            
           (@60998 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3> <VT4> <VT5>
                   ^converts-to VP)
          (<VT1> ^structure-type V-AUX
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^syntactic-structure nil
                 ^optional true)
          (<VT2> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT3> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
          (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}
   
## Has single argument, such as Set or Organize, not necessarily a movable object.
##  Optional PP - such as until ...
smem --add {            
           (@60997 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular             # added 8/25/2016 JEL
                   ^assigners <VT0> 
                              <VT1> <VT2> <VT3> <VT4> <VT5> <VT6> 
                   ^converts-to VP)
          (<VT0> ^structure-type DP
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure agent
                 ^optional true)
          (<VT1> ^structure-type V-AUX
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT2> ^structure-type DP
                 ^before <VT3>
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)         
          (<VT3> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT2> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
          (<VT4> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT5> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
          (<VT6> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}        

## Has required dp, optional PP (Store) - 

smem --add {            
           (@60996  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3> <VT4> <VT5> <VT6>
                   ^converts-to VP)
          (<VT1> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT2> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
          (<VT3> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT2> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT4> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
           (<VT5> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT6> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

### VERB such as Point a destination specified by a PP
         
smem --add {            
           (@60995 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3> <VT4> <VT5> <VT6>
                   ^converts-to VP)
          (<VT1> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT2> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg1
                  ^optional true)
           (<VT3> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT2> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true)
           (<VT4> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT5> ^structure-type UNTIL-PP  # Until Clause
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                   ^optional true)
          (<VT6> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

### VERB such as stop that has no arguments except a possible adverb      
smem --add {            
           (@60994 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular 
                   ^assigners <VT0> <VT1> <VT4>
                   ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT1> ^structure-type ADV  
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}
#
#### VERB such as Forward with an optional a destination specified by a DP or PP, or PP: until
#         
smem --add {            
           (@60993 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT25> <VT3> <VT4>
                   ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT1> ^structure-type DP
                  ^before <VT2>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                 # ^referent-type literal
                  ^optional true)
           (<VT2> ^structure-type UNTIL-PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^optional true)
           (<VT25> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg1
                  ^optional true)
           (<VT3> ^structure-type ADV 
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

smem --add {            
           (@60992 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT0> <VT5>
                   ^converts-to VP)
          (<VT4> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT0> ^structure-type DP
                  ^before <VT1> <VT3>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^referent-type literal
                  ^optional true)
           (<VT1> ^structure-type UNTIL-PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^optional true)
           (<VT2> ^structure-type ADV 
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)           
          (<VT3> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure relation
                  ^optional true)
          (<VT5> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}
 
# Tell me the answer 
# Tell john if you see a box - 
# Tell me what you saw - 
smem --add {            
           (@60991 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1>  <VT2> <VT4>
                   ^converts-to VP)
          (<VT2> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT0> ^structure-type PN
                  ^before <VT1> 
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
           (<VT1> ^structure-type DP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^referent-type literal
                  ^optional true) 
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)     
}

 smem --add {            
           (@60990 ^structure-type V
                  ^semantic-structure action
                  ^tense present
                  ^number singular
                  ^assigners <VT0> <VT1>  <VT4>
                  ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT1> ^structure-type IF-CLAUSE
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)   
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true) 
}

smem --add {            
           (@60989 ^structure-type V
                  ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT0> <VT3> <VT4>
                   ^converts-to VP)
          (<VT4> ^structure-type DP
                 ^relative-position before
                 ^syntactic-structure head
                 ^semantic-structure agent
                 ^optional true)
          (<VT0> ^structure-type V-AUX
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^syntactic-structure nil
                 ^optional true)
          (<VT1> ^structure-type DP# |you have X |
                 ^exclusive <VT2> <VT3> 
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^optional true)
          (<VT2> ^structure-type C-ADJ-P # |you have more than X |
                 ^exclusive <VT1> <VT3> 
                 ^relative-position after
                 ^syntactic-structure predicate
                 ^semantic-structure predicate
                 ^optional true)
           (<VT3> ^structure-type ADJ #|you have lost.|
                 ^exclusive <VT1> <VT2> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
}


## Ignore - supports ignore below
smem --add {            
           (@60988 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT4>
                   ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^syntactic-structure nil
                 ^optional true)
          (<VT1> ^structure-type DP
                 ^exclusive <VT2>
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^optional true)
          (<VT2> ^structure-type P
                 ^exclusive <VT1>
                 ^strip-assigners true
                  ^referent-type literal
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^optional true)
           (<VT3> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT4> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

# move the box from the table to the stove. 
 
smem --add {            
           (@60987  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT4> <VT5> <VT7> <VT6>
                   ^converts-to VP)
           (<VT0> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT1> ^structure-type DP                          # you .. 
                   ^relative-position before
                   ^syntactic-structure head
                   ^semantic-structure agent
                   ^optional true)
           (<VT2> ^structure-type V-AUX                       # can
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT3> ^structure-type DP                             # what is being moved
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
           (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                  ^before <VT6> #<VT4>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  #^repeatable true                   Allowing this confuses things - maybe needed for move x from y to z but should do it differently
                  ^optional true)
           (<VT6> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                  ^after <VT5> <VT3>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg3
                  ^optional true)
           (<VT7> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)

 
}
   

### VERB such as ... was -> covered PP (by, during, with) 
         
smem --add {            
           (@60986 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3> <VT4> 
                   ^converts-to VP)
          (<VT1> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT2> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg1
                  ^optional true)
          (<VT3> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

 
smem --add {            
           (@60985  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT4> <VT5> <VT6> 
                   ^converts-to VP)
           (<VT0> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT1> ^structure-type DP                          # you .. 
                   ^relative-position before
                   ^syntactic-structure head
                   ^semantic-structure agent
                   ^optional true)
           (<VT2> ^structure-type V-AUX                       # can
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT3> ^structure-type DP  
                 ^before <VT5>                           # what is being moved
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
           (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                 #^after <VT3> #<VT4>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
           (<VT6> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
 
}

