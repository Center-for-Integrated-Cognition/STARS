##!
# @file
#
# @created p 20201120
# File: add-reference-info.soar
# Author: Peter 
# Created: 20 November 2020
#
# Desc: This file has a bunch of apply and/or elaboration rules
#       that should fire when a final message is being produced.
#
#       These rules should fire under either the interpret-done
#       or the actions-done operators.
#
#       Their purpose is to add the ^reference-info structures
#       that are needed for the Robot task scripts in Rosie
#       to a message that has been produced.
#

#   A rule for the ^arg1 on a command
#   This if for something that is NOT a person
sp {act*apply*actions-done*command*arg1*ref-info
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^arg1 <referent>)
   (<referent> ^root-category { <root> <> person })
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name arg1)
   (<constraint> ^category <root>)
}

#   A rule for the ^arg1 on a command
#   This if for something that IS a person from the world
sp {act*apply*actions-done*command*arg1*ref-info*person*world
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^arg1 <referent>)
   (<referent> ^root-category person
               ^predicates <predicates>)
   (<predicates> ^name <name>)
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name arg1)
   (<constraint> ^name <name>)
}

#   A rule for the ^arg1 on a command
#   This if for something that IS a person from smem
sp {act*apply*actions-done*command*arg1*ref-info*person*smem
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^arg1 <referent>)
   (<referent> ^root-category person
               ^name <name>)
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name arg1)
   (<constraint> ^name <name>)
}

#   A rule for the ^arg2 relation on a command
sp {act*apply*actions-done*command*arg2*rel*ref-info
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^arg2 <relation>)
   (<relation> ^item-type predicate
               ^handle << in1 on1 to1 >>
               ^2 <referent>)
   (<referent> ^root-category <root>)
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name arg2)
   (<constraint> ^category <root>)
}

#   A rule for the ^predicate relation on a command using name
sp {act*apply*actions-done*command*rel*ref-info*by-name
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^predicate <relation>)
   (<relation> ^item-type predicate
               ^handle << in1 on1 to1 >>
               ^2 <referent>)
   (<referent> ^root-category <root>
               ^name <name>)
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint1>
           ^constraint <constraint2>
           ^arg-name relation)
   (<constraint1> ^category <root>)
   (<constraint2> ^name <name>)
}

#   A rule for the ^predicate relation on a command using category
#   Use this if there is no name or possessive, and the language
#   does NOT say "current" or "starting".
sp {act*apply*actions-done*command*rel*ref-info*by-category
   (state <s> ^operator <o>
              ^result <message>
              ^top-state <top-state>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^predicate <relation>)
   (<relation> ^item-type predicate
               ^handle << in1 on1 to1 >>
               ^2 <referent>)
   (<referent> ^root-category <root>
               #    Don't fire for other cases
              -^name <name>
              -^possessive <possessive>)
   #    Make sure there was NOT "current" in the language
 -{(<top-state> ^comprehension.cxn-stack.m <meaning>)
   (<meaning> ^location <location>)
   (<location> ^is.a PrepRelation
               ^prep << in1 on1 to1 >>
               ^object.modifiers <modifiers>)
   (<modifiers> ^class state
                ^name << current1 starting1 >>)}
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint1>
           ^arg-name relation)
   (<constraint1> ^category <root>)
}

#   A rule for the ^predicate relation on a command using category
#   This is a special case for "the current/starting location"
#   It's not enough to just check that the object has
#   ^modifier1 current1 or ^modifier1 starting1
#   because if the language said "the kitchen" and
#   the kitchen was current we don't want the double ref-info.
#   Therefore, we have to check that the language had a named state.
#   Use this if there is no name or possessive, and the language
#   DOES say "current" or "starting".
sp {act*apply*actions-done*command*rel*ref-info*by-state-name
   (state <s> ^operator <o>
              ^result <message>
              ^top-state <top-state>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^predicate <relation>)
   (<relation> ^item-type predicate
               ^handle << in1 on1 to1 >>
               ^2 <referent>)
   (<referent> ^predicates <predicates>)
   #    It appears that location is necessary,
   #    but we can be flexible about the modifier.
   (<predicates> ^category location
                 ^modifier1 { <name> << current1 starting1 >> })
   #    Make sure there IS "current" in the language
   (<top-state> ^comprehension.cxn-stack.m <meaning>)
   (<meaning> ^location <location>)
   (<location> ^is.a PrepRelation
               ^prep << in1 on1 to1 >>
               ^object.modifiers <modifiers>)
   (<modifiers> ^class state
                ^name <name>)
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint1>
           ^constraint <constraint2>
           ^arg-name relation)
   (<constraint1> ^category location)
   (<constraint2> ^modifier1 <name>)
}

#   A rule for the ^predicate relation on a command using possessive
sp {act*apply*actions-done*command*rel*ref-info*by-possessive
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type command
              ^predicate <relation>)
   (<relation> ^item-type predicate
               ^handle << in1 on1 to1 >>
               ^2 <referent>)
   (<referent> ^root-category <root>
               ^possessive <possessive>)
-->
   (<message> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint1>
           ^constraint <constraint2>
           ^arg-name relation)
   (<constraint1> ^category <root>)
   (<constraint2> ^possessive <possessive>)
}

#   A rule for the ^arg1 on a ^subclause on an object-description
sp {act*apply*actions-done*object-description*subclause*arg1*ref-info
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type object-description
              ^subclause <subclause>)
   (<subclause> ^arg1 <referent>)
   (<referent> ^root-category <root>)
-->
   (<subclause> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name arg1)
   (<constraint> ^category <root>)
}

#   A rule for the ^predicate relation on a ^subclause
sp {act*apply*actions-done*object-description*subclause*rel*2*ref-info
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type object-description
              ^subclause <subclause>)
   (<subclause> ^predicate <relation>)
   (<relation> ^item-type predicate
               ^handle << in1 on1 to1 >>
               ^2 <referent>)
   (<referent> ^root-category <root>)
-->
   (<subclause> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name relation)
   (<constraint> ^category <root>)
}

#   A rule for the ^arg1 on a 2nd level ^subclause on an object-description
sp {act*apply*actions-done*object-description*subclause2*arg1*ref-info
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type object-description
              ^subclause.subclause <subclause>)
   (<subclause> ^arg1 <referent>)
   (<referent> ^root-category <root>)
-->
   (<subclause> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name arg1)
   (<constraint> ^category <root>)
}

#   A rule for the ^predicate relation on a 2nd level ^subclause
sp {act*apply*actions-done*object-description*subclause2*rel*2*ref-info
   (state <s> ^operator <o>
              ^result <message>
             -^top-state.dialog-context
             -^top-state.agent-params.disable-reference-info true
             -^top-state.agent-params.hypothetical true)
   (<o> ^name actions-done)
   (<message> ^message-type object-description
              ^subclause.subclause <subclause>)
   (<subclause> ^predicate <relation>)
   (<relation> ^item-type predicate
               ^handle << in1 on1 to1 >>
               ^2 <referent>)
   (<referent> ^root-category <root>)
-->
   (<subclause> ^reference-info <info>)
   (<info> ^referent <referent>
           ^constraint <constraint>
           ^arg-name relation)
   (<constraint> ^category <root>)
}
