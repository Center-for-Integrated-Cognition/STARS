sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t436896-9
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t436896-8
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2> ^<a6> <a7>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    (<a7> ^arg-type object ^id <o4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t436896-7
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2> ^<a6> <a7>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    (<a7> ^arg-type object ^id <o4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t436896-6
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^superoperator <s3> ^superoperator <s5> ^evaluation <e2>)
    (<p1> ^name action)
    (<s3> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^subtask-handle <s4> ^type subtask)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
   -{ (<s3> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t436896-5
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^superoperator <s3> ^superoperator <s5> ^evaluation <e2>)
    (<p1> ^name action)
    (<s3> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^subtask-handle <s4> ^type subtask)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
   -{ (<s3> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*execution-type*internal*apply*task-operator*mark*performed-subtask*OpNoChange*t436896-4
    :chunk
    (state <s1> ^operator <o1> ^problem-space <p1> ^current-task-segment <c1>)
    (<o1> ^item-type task-operator ^subtask-handle <s2> ^task-handle <t1>)
    (<p1> ^execution-type internal ^name action)
    -->
    (<c1> ^performed-subtask <s2>)
}

sp {chunk*execution-type*internal*apply*task-operator*increment*plan-length*OpNoChange*t436896-3
    :chunk
    (state <s1> ^problem-space <p1> ^plan-length <p2> ^operator <o1>)
    (<p1> ^execution-type internal ^name action)
    (<o1> ^task-handle <t1>)
    -->
    (<s1> ^plan-length <p2> - ^plan-length (+ <p2> 1))
}

sp {chunk*execution-type*internal*apply*task-operator*update*current-evaluation-depth*OpNoChange*t436896-2
    :chunk
    (state <s1> ^problem-space <p1> ^current-evaluation-depth <c1>
          ^operator <o1>)
    (<p1> ^execution-type internal ^name action)
    (<o1> ^task-handle <t1>)
    -->
    (<s1> ^current-evaluation-depth <c1> -
           ^current-evaluation-depth (- <c1> 1))
}

sp {chunk*execution-type*internal*apply*task-operator*mark*tried-tied-operator*OpNoChange*t436896-1
    :chunk
    (state <s1> ^untried-tied-operator <u1> ^operator <u1> ^problem-space <p1>)
    (<p1> ^execution-type internal ^name action)
    (<u1> ^task-handle <t1>)
    -->
    (<s1> ^untried-tied-operator <u1> - ^tried-tied-operator <u1>)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t436891-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<d1> ^copy-objects-map <c2>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i2> ^pred-count 1)
    (<i2> ^subtask-handle <s2> ^type subtask)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t436854-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1term219)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1term219 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t436843-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1term219 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t436834-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1exit170)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1term219
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t436662-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1exit170)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1exit170)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t436647-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1exit170 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t436638-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1repeat171)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1exit170
           ^next-goal-type loop-exit ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t436617-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal203)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int202
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t425189-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal203)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle unload1goal203)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t425159-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal203 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal203 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t425150-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int197)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ceramic-bowl1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal203
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t425130-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int194)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int197
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t425068-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i3> ^object <i2>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t425068-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i5>)
    (<a10> ^arg-type object ^id <i6>)
    (<i5> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i6> ^predicates <p2>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t425068-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i5>)
    (<a10> ^arg-type object ^id <i6>)
    (<i5> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i6> ^predicates <p2>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t425068-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t425068-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t425052-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t425052-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t425052-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t425052-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t425052-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t424987-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal198)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int197
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t408397-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal198)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle unload1goal198)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t408367-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal198 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal198 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t408358-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int194)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ceramic-plate1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal198
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t408338-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int191)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int194
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t408277-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t408277-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t408277-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t408277-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t408277-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t408260-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t408260-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t408260-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t408260-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t408260-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t408244-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t408244-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t408244-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t408244-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t408244-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t408155-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal195)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int194
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t408024-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask214)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t401995-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask213)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t384531-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask212)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t384472-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal195)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal195)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t384427-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal195 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal195 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t384418-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int191)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category glass-tumbler1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal195
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t384398-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int189)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int191
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t384276-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal192)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int191
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t383243-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal192)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle unload1goal192)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t383213-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal192 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal192 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t383204-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int189)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category steak-knife1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal192
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t383184-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int180)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int189
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t383125-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i3> ^object <i2>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t383125-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i5>)
    (<a10> ^arg-type object ^id <i6>)
    (<i5> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i6> ^predicates <p2>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t383125-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i5>)
    (<a10> ^arg-type object ^id <i6>)
    (<i5> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i6> ^predicates <p2>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t383125-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t383125-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t383110-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t383110-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t383110-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t383110-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t383110-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t382973-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal190)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int189
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t371394-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal190)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle unload1goal190)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t371364-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal190 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal190 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t371355-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int180)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category metal-fork1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal190
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t371335-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1start178)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int180
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t371293-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1goal176)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat171
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t371123-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t371123-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t371123-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t371123-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t371123-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t371107-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t371107-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t371107-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t371107-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t371107-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t371091-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t371091-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t371091-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t371091-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t371091-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t371047-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1term204)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1term204 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t371036-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1term204 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t371027-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int202)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1term204
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t370846-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int202)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int202 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t370835-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int202 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t368848-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int197)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int197 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t368837-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int197 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t366842-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int194)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int194 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t366831-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int194 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t363210-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int191)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int191 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t363199-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int191 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t361656-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int189)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int189 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t361645-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int189 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t359576-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int180)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int180 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t359565-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int180 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t359556-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal181)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int180
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t358945-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask187)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t353059-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask186)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t347891-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1
          ^affordance1 grabbable1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask185)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t341816-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask184)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t341769-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal181)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal181)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t341721-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal181 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal181 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t341712-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1start178)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category paring-knife1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal181
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t340150-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1start178)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1start178 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t340119-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category rack1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle unload1 ^item-type task-operator ^name op_unload1174
           ^arg1 <a1> ^subtask-handle subtask175)
    (<a1> ^id <i3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t340101-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1goal176)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle tidy1goal176)
    (<i1> ^subtask-handle subtask175 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t340076-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1goal176 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> tidy1goal176 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t340065-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1int172)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1goal176
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t339747-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1int172)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1int172 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t339736-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1int172 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t339727-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat171)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^property dish1 ^category rack1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle tidy1int172
           ^next-goal-type intermediate-goal ^has-conditions true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t339714-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat171)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1repeat171)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t339699-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1repeat171 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t339690-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1exit89)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat171
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t339266-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1exit89)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1exit89)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t339251-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1exit89 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t339242-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1repeat90)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1exit89
           ^next-goal-type loop-exit ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t339211-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t339211-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t339211-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t339211-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t339211-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t339151-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal123)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int122
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t333220-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask167)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t333166-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal123)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal123)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t333121-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal123 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal123 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t333112-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int121)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category jar-of-salsa1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal123
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t333092-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int118)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int121
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t333026-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t333026-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t333026-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t333026-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t333026-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t333011-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t333011-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t333011-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t333011-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t333011-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t332947-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal120)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int121
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t332659-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask163)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t327631-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask162)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t320942-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal120)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal120)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t320897-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal120 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal120 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t320888-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int118)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category half-and-half1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal120
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t320868-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int117)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int118
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t320803-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t320803-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t320803-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t320803-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t320803-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t320786-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t320786-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t320786-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t320786-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t320786-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t320770-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t320770-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t320770-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t320770-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t320770-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t320682-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal119)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int118
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t320194-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask158)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t315044-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask157)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t307980-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask156)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t307921-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal119)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category pantry1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal119)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t307876-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal119 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal119 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category pantry1)
    (<i2> ^predicates <p2>)
    (<p2> ^category pantry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t307867-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int117)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category crackers1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal119
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t307847-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int111)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int117
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t307721-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal116)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int117
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t295406-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal116)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal116)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t295361-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal116 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal116 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t295352-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int111)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category granola-bars1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal116
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t295332-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int107)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int111
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t295183-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal110)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int111
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t281395-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal110)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal110)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t281350-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal110 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal110 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t281341-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int107)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category box-of-aluminum-foil1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal110
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t281321-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int105)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int107
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t281259-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t281259-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t281259-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t281259-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t281259-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t281242-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t281242-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t281242-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t281242-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t281242-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t281227-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t281227-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t281227-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t281227-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t281227-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t281066-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal108)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int107
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t280058-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask146)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t272639-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask145)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t260551-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask144)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t260492-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal108)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal108)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t260447-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal108 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal108 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t260438-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int105)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category coffee-grinder1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal108
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t260418-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int103)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int105
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t260223-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal106)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int105
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t246066-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal106)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal106)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t246021-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal106 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal106 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t246012-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int103)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category steak-knife1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal106
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t245992-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int101)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int103
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t245932-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t245932-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t245932-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t245932-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t245932-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t245916-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t245916-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t245916-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t245916-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t245916-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t245900-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t245900-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t245900-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t245900-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t245900-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t245692-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal102)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int103
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t243818-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask137)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t238044-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask136)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t231719-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask135)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t231665-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal102)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal102)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t231620-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal102 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal102 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t231611-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int101)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category corkscrew1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal102
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t231591-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int99)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int101
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t231532-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t231532-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t231532-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t231532-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t231532-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t231299-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal100)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int101
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t225456-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1 ^category garbage1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask131)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t219875-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal100)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category garbage1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle store1goal100)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t219847-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal100 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal100 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category garbage1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t219838-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int99)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category paper-cup1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal100
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t219818-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1start97)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int99
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t219760-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t219760-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t219760-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t219760-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t219760-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t219504-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal98)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int99
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t212056-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1 ^property recycling1 ^category bin1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask128)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t205271-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1
          ^affordance1 grabbable1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask127)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t205232-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t205232-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t205161-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal98)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^property recycling1 ^category bin1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle store1goal98)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t205133-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal98 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal98 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^property recycling1 ^category bin1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t205124-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1start97)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category newspaper1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal98
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t205076-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1goal95)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat90
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t204884-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1term124)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1term124 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t204873-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1term124 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t204864-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int122)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1term124
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t204690-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int122)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int122 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t204679-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int122 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t202904-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int121)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int121 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t202893-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int121 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t201179-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int118)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int118 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t201168-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int118 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t199321-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int117)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int117 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t199310-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int117 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t197009-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int111)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int111 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t196998-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int111 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t195150-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int107)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int107 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t195139-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int107 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t191600-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int105)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int105 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t191589-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int105 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t187961-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int103)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int103 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t187950-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int103 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t186551-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int101)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int101 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t186540-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int101 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t183154-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int99)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int99 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t183143-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int99 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t179630-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1start97)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1start97 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t179599-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category counter1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle store1 ^item-type task-operator ^name op_store193
           ^arg1 <a1> ^subtask-handle subtask94)
    (<a1> ^id <i3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t179581-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1goal95)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle tidy1goal95)
    (<i1> ^subtask-handle subtask94 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t179556-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1goal95 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> tidy1goal95 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t179545-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1int91)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1goal95
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t179241-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1int91)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1int91 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t179230-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1int91 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t179221-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat90)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category counter1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle tidy1int91
           ^next-goal-type intermediate-goal ^has-conditions true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t179208-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat90)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1repeat90)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t179193-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1repeat90 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t179184-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1exit5)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat90
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t178774-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1exit5)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1exit5)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t178759-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1exit5 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t178750-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1repeat6)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1exit5
           ^next-goal-type loop-exit ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t178719-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i3> ^object <i2>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t178719-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i5>)
    (<a10> ^arg-type object ^id <i6>)
    (<i5> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i6> ^predicates <p2>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t178719-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i5>)
    (<a10> ^arg-type object ^id <i6>)
    (<i5> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i6> ^predicates <p2>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t178719-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t178719-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t178703-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t178703-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t178703-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t178703-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t178703-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t178689-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t178689-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
    (<i1> ^type relation ^handle <h1> ^1 <i3> ^2 <i5>)
    (<i2> ^type relation ^handle <h2> ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i5>)
    (<a5> ^arg-type partial-predicate ^handle <h2> ^2 <i6>)
    (<a6> ^arg-type object ^id <i3>)
    (<a7> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i5> ^object <i3> ^object <i6> ^object <i4>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle <h1>)
    (<p4> ^handle <h2>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t178689-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
    (<i1> ^type relation ^handle <h1> ^1 <i3> ^2 <i5>)
    (<i2> ^type relation ^handle <h2> ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i5>)
    (<a5> ^arg-type partial-predicate ^handle <h2> ^2 <i6>)
    (<a6> ^arg-type object ^id <i3>)
    (<a7> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i5> ^object <i3> ^object <i6> ^object <i4>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle <h1>)
    (<p4> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t178689-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t178689-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t178658-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal42)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int43
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t166263-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 not-open1 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t166263-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 not-open1 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t166243-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t166243-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t166242-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t166242-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t165786-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal42)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle clear1goal42)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t165756-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal42 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal42 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t165747-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int41)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category apple-juice1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal42
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t165727-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int38)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int41
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t165648-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal40)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int41
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t151453-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal40)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal40)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t151408-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal40 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal40 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t151399-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int38)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ketchup1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal40
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t151379-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int37)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int38
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t151277-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal39)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int38
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t131063-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal39)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal39)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t131018-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal39 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal39 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t131009-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int37)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category milk1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal39
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t130989-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int33)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int37
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t130926-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t130926-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t130926-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t130926-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t130926-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t130909-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t130909-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t130909-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t130909-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t130909-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t130893-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t130893-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t130893-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t130893-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t130893-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t130781-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal36)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int37
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t129991-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask78)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t124280-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask77)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t116717-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask76)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t116653-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal36)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category pantry1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal36)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t116608-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal36 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal36 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category pantry1)
    (<i2> ^predicates <p2>)
    (<p2> ^category pantry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t116599-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int33)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category pop-tart-box1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal36
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t116579-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int31)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int33
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t116431-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal34)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int33
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t101224-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal34)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal34)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t101179-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal34 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal34 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t101170-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int31)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category cereal-box1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal34
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t101150-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int29)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int31
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t101089-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t101089-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t101089-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t101089-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t101089-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t101072-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t101072-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t101072-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t101072-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t101072-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t101056-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t101056-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t101056-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t101056-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t101056-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t100896-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal32)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int31
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t99968-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask69)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t93494-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask68)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t80721-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask67)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t80662-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal32)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal32)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t80617-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal32 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal32 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t80608-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int29)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ceramic-plate1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal32
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t80588-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int27)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int29
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t80394-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal30)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int29
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t70622-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal30)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal30)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t70577-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal30 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal30 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t70568-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int27)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category bottle-opener1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal30
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t70548-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int24)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int27
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t70489-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t70489-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t70489-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t70489-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t70489-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t70473-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t70473-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t70473-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t70473-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t70473-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t70457-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t70457-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t70457-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t70457-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t70457-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t70248-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal26)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int27
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t69880-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask60)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t63676-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask59)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t48715-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask58)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t48641-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal26)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal26)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t48596-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal26 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal26 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t48587-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int24)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category plastic-fork1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal26
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t48567-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1start13)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int24
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t48509-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t48509-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t48509-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t48509-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t48509-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t48492-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t48492-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t48492-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t48492-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t48492-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t48477-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t48477-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t48477-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t48477-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t48477-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t48462-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h2> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^subtask-handle <s2> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i3> ^1 <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t48462-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h1> ^handle <h3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h2> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h4> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i4>)
    (<a5> ^arg-type object ^id <i5>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i5> ^object <i7> ^object <i8>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h2> ^instance <i9> -^dont-copy <i9>)
    (<i9> -^3 <i10> ^2 <i4> ^1 <i7>)
    (<p5> ^handle <h4> ^instance <i11>)
    (<i11> ^2 <i5> ^1 <i8>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t48462-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h1> ^handle <h3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h2> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h4> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i4>)
    (<a5> ^arg-type object ^id <i5>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i5> ^object <i7> ^object <i8>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h2> ^instance <i9> -^dont-copy <i9>)
    (<i9> -^3 <i10> ^2 <i4> ^1 <i7>)
    (<p5> ^handle <h4> ^instance <i11>)
    (<i11> ^2 <i5> ^1 <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t48462-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_close1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t48462-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_close1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t48229-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal25)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int24
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t48212-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle close1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t48202-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle close1)
    (<o1> ^next-goal-handle close1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t48193-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle close1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle close1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t47323-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1goal1)
    (<t1> ^task-handle close1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle close1goal1)
    (<i2> ^1 <i1> ^property-handle is-open1 ^handle not-open1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t47306-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle close1)
    (<o1> ^next-goal-handle close1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t47297-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle close1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle close1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t47284-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle close1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t47260-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask54)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t47188-5
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^subtask-handle <s2> ^task-handle <t2>)
    (<a9> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t47188-4
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i4> ^type relation ^2 <i5> ^1 <i6> ^handle <h5>)
    (<i5> ^predicates <p2>)
    (<i6> ^predicates <p1>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i3>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2> ^object <i5> ^object <i6>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a12> ^arg-type object ^id <i6>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t47188-3
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i4> ^type relation ^2 <i5> ^1 <i6> ^handle <h5>)
    (<i5> ^predicates <p2>)
    (<i6> ^predicates <p1>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i3>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2> ^object <i5> ^object <i6>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a12> ^arg-type object ^id <i6>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t47188-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t47188-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t47158-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t47148-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t47139-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle put-down1goal2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t42901-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle put-down1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask53)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t42862-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t42862-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t42855-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^handle <h2> ^2 <i2> ^1 <i3>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i3> <i4> ^<i2> <i5>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i6> ^pred-count 1)
    (<i6> ^2 <i5> ^1 <i4> ^handle <h2> ^type relation)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t42849-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i4> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t42836-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1goal2)
    (<t1> ^task-handle put-down1 ^arg2 <a1> ^arg2 <a2> ^arg1 <a3> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i2>)
    (<a2> ^arg-type partial-predicate ^handle <h1>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i3> ^pred-count 1 ^handle put-down1goal2)
    (<i3> ^2 <i2> ^1 <i1> ^handle <h1> ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t42818-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1goal2 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t42809-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle put-down1 ^name <n1> ^arg2 <a1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1goal2
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t42777-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t42754-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t42746-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask52)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t42745-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a12>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> < <a1> } <a5>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<a3> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
   -{ (<c2> ^{ <a6> <> <a1> <> <a4> } <a7>)
      (<a7> ^arg-type <a8>)}
   -{ (<t2> ^{ <a9> <> <a1> <> <a4> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a5> ^arg-type object ^id <i2>)
    (<a12> ^arg-type object ^id <i2>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t42661-5
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t42661-4
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t42661-3
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t42661-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t42661-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t42632-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t42622-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t42613-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t34768-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask51)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t34729-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t34729-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t34718-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1goal1)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle pick-up1goal1)
    (<i2> ^1 <i1> ^property-handle is-grabbed1 ^handle grabbed1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t34701-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t34692-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t34686-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t34662-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1
          ^affordance1 grabbable1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask50)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t34580-5
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t34580-4
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t34580-3
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t34580-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t34580-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t34550-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle open1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t34540-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle open1)
    (<o1> ^next-goal-handle open1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t34531-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle open1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle open1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t34251-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t34241-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t34232-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t34215-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle face1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle face1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t34205-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle face1)
    (<o1> ^next-goal-handle face1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t34196-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle face1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle face1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t32496-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle face1goal1)
    (<t1> ^task-handle face1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle face1goal1)
    (<i1> ^command-name face-command ^type execute-command)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t32481-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle face1)
    (<o1> ^next-goal-handle face1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t32472-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle face1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle face1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t32457-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle face1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle face1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t32436-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t32426-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle goto-xy1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle goto-xy1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t32416-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-xy1)
    (<o1> ^next-goal-handle goto-xy1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t32407-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle goto-xy1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle goto-xy1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t30529-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle goto-xy1goal1)
    (<t1> ^task-handle go-to-xy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle goto-xy1goal1)
    (<i1> ^command-name go-to-command ^type execute-command)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t30514-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-xy1)
    (<o1> ^next-goal-handle goto-xy1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t30505-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle goto-xy1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle goto-xy1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t27819-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle goto-xy1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle goto-xy1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t27798-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type coordinate ^coord <c2>)
    (<c2> -^z <z1> ^y <y1> ^x <x1>)
    -->
    (<d1> ^<c1> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^coord <c4> ^arg-type coordinate)
    (<c4> ^y <y1> ^x <x1>)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t27792-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1goal1)
    (<t1> ^task-handle approach1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle approach1goal1)
    (<i2> ^1 <i1> ^property-handle is-reachable1 ^handle reachable1
           ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t27775-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t27766-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t27748-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t27724-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle open1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask49)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t27685-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t27685-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t27678-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^property-handle <p1> ^handle <h2> ^1 <i2>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i2> <i3>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i4> ^pred-count 1)
    (<i4> ^1 <i3> ^property-handle <p1> ^handle <h2> ^type unary)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t27669-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1goal1)
    (<t1> ^task-handle open1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle open1goal1)
    (<i2> ^1 <i1> ^property-handle is-open1 ^handle open2 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t27652-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle open1)
    (<o1> ^next-goal-handle open1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t27643-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle open1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle open1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t27637-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle open1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t27613-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask48)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t27612-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a9>)
    (<t2> ^task-handle <t1> ^<a1> <a2>)
   -{ (<c2> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
   -{ (<t2> ^{ <a6> <> <a1> } <a7>)
      (<a7> ^arg-type <a8>)}
    (<a2> ^arg-type object ^id <i1>)
    (<a9> ^arg-type object ^id <i1>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t27572-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 not-open1 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t27572-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 not-open1 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t27571-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_close1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t27571-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_close1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t27542-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t27542-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t27540-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t27540-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t26852-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a8>
           ^<a3> <a9>)
    (<a8> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i4> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t26817-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t26809-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^type unary ^property-handle <p1> ^handle <h3> ^1 <i5>)
    (<i2> ^type relation ^handle <h2> ^2 <i3> ^1 <i4>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i4> <i6> ^<i3> <i7> ^<i5> <i8>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^2 <i9> ^1 <i10> ^pred-count 2)
    (<i9> ^1 <i8> ^property-handle <p1> ^handle <h3> ^type unary)
    (<i10> ^2 <i7> ^1 <i6> ^handle <h2> ^type relation)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t26801-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t26788-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal25)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal25)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t26743-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal25 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal25 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t26734-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1start13)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category pepsi-can1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal25
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t26686-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1goal11)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat6
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t26494-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1term44)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1term44 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t26483-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1term44 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t26474-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int43)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1term44
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t26300-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int43)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int43 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t26289-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int43 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t24759-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int41)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int41 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t24748-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int41 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t23055-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int38)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int38 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t23044-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int38 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t21645-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int37)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int37 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t21634-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int37 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t19628-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int33)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int33 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t19617-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int33 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t15931-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int31)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int31 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t15920-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int31 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t13603-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int29)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int29 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t13592-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int29 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t10118-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int27)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int27 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t10107-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int27 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t6847-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int24)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int24 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t6836-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int24 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1972-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1start13)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1start13 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t1944-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1938-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category table1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle clear1 ^item-type task-operator ^name op_clear19
           ^arg1 <a1> ^subtask-handle subtask10)
    (<a1> ^id <i3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1920-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1goal11)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle tidy1goal11)
    (<i1> ^subtask-handle subtask10 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1895-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1goal11 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> tidy1goal11 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1884-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1int7)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1goal11
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1580-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1int7)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1int7 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1569-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1int7 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1560-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat6)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category table1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle tidy1int7
           ^next-goal-type intermediate-goal ^has-conditions true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1547-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat6)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1repeat6)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1532-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1repeat6 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1523-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1start2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat6
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1111-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1start2)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1start2 ^item-type start-goal)
}



