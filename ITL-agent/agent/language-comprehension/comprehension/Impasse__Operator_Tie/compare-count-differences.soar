sp {selection*propose*compare-count-differences
   (state <s> ^name selection
              ^evaluation <e1> { < <e1> <e2> })
   (<e1> ^count-difference
        -^compared <e2>)
   (<e2> ^count-difference
        -^compared <e1>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
}

sp {apply*compare-count-differences*both-equal*one-required
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^count-difference <cd1>
         ^superoperator <so1>)
   (<e2> ^count-difference <cd1>
         ^superoperator <so2>)
   (<so1> ^assigner.lt.required true)
  -(<so2> ^assigner.lt.required true) 
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*both-equal*not-zero*not-required
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so1>)
   (<e2> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>
         -^assigner.lt.required true)
   (<so2> ^assigner.decision-count < <dc>
         -^assigner.lt.required true)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*both-equal*not-zero*both-required
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so1>)
   (<e2> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>
          ^assigner.lt.required true)
   (<so2> ^assigner.decision-count < <dc>
          ^assigner.lt.required true)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*both-go-to-zero*one-required
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1>  ^assigner.lt.required true)
   (<so2> -^assigner.lt.required true)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*both-go-to-zero*one-exclusive
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1>  ^assigner.lt.exclusive)
   (<so2> -^assigner.lt.required true 
          -^assigner.lt.exclusive)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*both-go-to-zero*both-exclusive
   (state <s> ^operator <op>
             ^superstate <ss>)
   (<op> ^name compare-count-differences
        ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1>  ^assigner.lt.exclusive
           -^assigner.lt.required true)
   (<so2> -^assigner.lt.required true 
          ^assigner.lt.exclusive)
-->
   (<ss> ^operator <so1> = <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}
#
#
#sp {apply*compare-count-differences*both-go-to-zero*no-required*exclusive
#   (state <s> ^operator <op>
#              ^superstate <ss>)
#   (<op> ^name compare-count-differences
#         ^evaluation <e1>
#         ^evaluation { <> <e1> <e2> })
#   (<e1> ^final-referent-count 0
#         ^superoperator <so1>)
#   (<e2> ^final-referent-count 0
#         ^superoperator <so2>)
#   (<so1> ^assigner.decision-count <dc>
#         -^assigner.lt.exclusive
#         -^assigner.lt.required true)
#   (<so2> ^assigner.decision-count < <dc>
#         -^assigner.lt.required true 
#         -^assigner.lt.exclusive)
#-->
#   (<ss> ^operator <so1> > <so2>)
#   (<e1> ^compared <e2>)
#   (<e2> ^compared <e1>)
#}

sp {apply*compare-count-differences*both-go-to-zero*no-required
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>
         -^assigner.lt.required true)
   (<so2> ^assigner.decision-count < <dc>
         -^assigner.lt.required true 
         -^assigner.lt.exclusive)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*both-go-to-zero*no-required*equal
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>
         -^assigner.lt.required true)
   (<so2> ^assigner.decision-count <dc>
         -^assigner.lt.required true 
         -^assigner.lt.exclusive)
-->
   (<ss> ^operator <so1> = <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*both-go-to-zero*both-required
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>
         ^assigner.lt.required true)
   (<so2> ^assigner.decision-count < <dc>
         ^assigner.lt.required true)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}



sp {apply*compare-count-differences*both-go-to-zero*both-required*equal
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>
         ^assigner.lt.required true)
   (<so2> ^assigner.decision-count <dc>
         ^assigner.lt.required true)
-->
   (<ss> ^operator <so1> = <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*both-go-to-zero*both-required*before
  #:interrupt
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>
         ^assigner <ass1>)
   (<ass1> ^parent-receiver <pr>
           ^lt.before <solt>
           ^lt.required true)
   (<so2> ^assigner <ass2>)
   (<ass2> ^parent-receiver <pr>
           ^decision-count <dc>
           ^lt.required true
           ^lt <solt>)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*one-isnt-zero*other-doesnt*not-grounded
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^superoperator.assigner.parent-receiver.lt.referent nil
         ^superoperator <so1>)
   (<e2> ^final-referent-count <> 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>)
   (<so2> ^assigner.decision-count < <dc>)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*one-isnt-zero*other-doesnt*not-grounded2
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^superoperator.assigner.parent-receiver.lt.referent nil
         ^superoperator <so1>)
   (<e2> ^final-referent-count <> 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>)
   (<so2> ^assigner.decision-count > <dc>)
-->
   (<ss> ^operator <so1> < <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*one-goes-to-zero*other-doesnt
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^final-referent-count 0
         ^superoperator <so1>
        -^superoperator.assigner.parent-receiver.lt.referent nil )
   (<e2> ^final-referent-count <> 0
         ^superoperator <so2>)
-->
   (<ss> ^operator <so1> < <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*one*prefer-larger-change
  #:interrupt
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so1>)
   (<e2> ^count-difference > <cd1>
         ^final-referent-count <> 0
         ^superoperator <so2>)
-->
   (<ss> ^operator <so1> < <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

