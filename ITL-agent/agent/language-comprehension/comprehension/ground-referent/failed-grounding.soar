sp {ground-referent*propose*failed-grounding
   (state <s> ^name ground-referent   
             # ^quiescence t          
              ^proto-referents none)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name failed-grounding)
   #  (interrupt)
}
#sp {ground-referent*apply*failed-grounding*two*protorefs
#   (state <s> ^name ground-referent
#              ^proto-referent <pr>
#              ^proto-referent <pr2> > <pr>)
#-->
#(interrupt)
#   }

# Generate a referent that will have all of the constraints added to it
#  This is for the case when it is not an indefinite referent (a/an)
#  and it is not a named object or location                                                              
sp {ground-referent*apply*failed-grounding
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
             -^constraint-lt.specifier indefinite
              ^top-state.dialog-world.objects <objs>
             -^constraint.property.handle << name location category >>)
-->
   (<s> ^proto-referent <pr>)
 #  (<objs> ^object <pr>)
   (<pr> ^predicates <pred>
         ^handle (make-constant-symbol |new-object-id|)
         ^item-type object)
   (<pred> ^is-visible1 not-visible1
           ^dialog-object true
           ^category object)
  # (write (crlf) |Nothing passed all constraints for definite referent. Creating not-visible object.|)
}
sp {ground-referent*apply*failed-grounding*category
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
             -^constraint-lt.specifier indefinite
              ^top-state.dialog-world.objects <objs>
              ^constraint <con>)
   (<con> ^property.handle category 
          ^handle <cat>)
-->
   (<s> ^proto-referent <pr>)
  # (<objs> ^object <pr>)
   (<pr> ^predicates <pred>
         ^handle (make-constant-symbol |new-object-id|)
         ^item-type object) ## AM: all 'objects' are now ^item-type object, the category is used to differentiate
   (<pred> ^is-visible1 not-visible1
           ^dialog-object true
           ^category <cat>)
   #(write (crlf) |Nothing passed all constraints for definite referent. Creating not-visible object| <cat>)
}

# If location or named object then use it. Assume it is not visible (in ^world) 
sp {ground-referent*apply*failed-grounding*location
  # :interrupt
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
             -^constraint-lt.specifier indefinite
              ^top-state.dialog-world.objects <objs>
              ^constraint <ref>)
   (<ref> ^property <prop>
          ^handle <handle>
          ^item-type <item-type>
          ^predicates.is-visible1 visible1)
   (<prop> ^handle << location name >>)
-->
   (<s> ^proto-referent <ref2>)
  # (<objs> ^object <ref2>)
   (<ref2> ^handle <handle>
          ^property <prop>
          ^item-type <item-type>
          ^predicates <pred>)
   (<pred> ^dialog-object true
            ^is-visible1 not-visible1
           ^category object)
   #(write (crlf) |Location or named object found: | <ref> | for definite referent. Marking it not-visible.|)
}

# If location or named object then use it. Assume it is not visible (in ^world) 
sp {ground-referent*apply*failed-grounding*location2
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
             -^constraint-lt.specifier indefinite
              ^top-state.dialog-world.objects <objs>
              ^constraint <ref>)
   (<ref> ^property.handle << location name >>
          ^predicates.is-visible1 not-visible1)
-->
   (<s> ^proto-referent <ref>)
 #  (<objs> ^object <ref>)
 #  (write (crlf) |Location or named object found: | <ref> | for definite referent. Previously found.|)
}

# Generate a referent that will have all of the constraints added to it
#  This is for the case when it is an indefinite referent (a/an) of a category type (location, block, object, piece)
#  Add it to the dialog-world so it can be refered to in the future
                                                   
sp {ground-referent*apply*failed-grounding*indefinite*non-category
  # :interrupt
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
              ^constraint-lt.specifier indefinite
             -^superstate.operator.<< double-constraints constraints >>.constraint.property.handle category
              ^top-state.dialog-world.objects <objs>)
-->
 #  (write (crlf) |Added indefinite object referent | <pr> | to dialog-world.|)
 #  (<objs> ^object <pr>)
   (<s> ^proto-referent <pr>)
   (<pr> ^predicates <pred>
         ^handle (make-constant-symbol |new-object-id|)
         ^item-type object)
   (<pred> ^is-visible1 not-visible1
           ^dialog-object true
           ^category object)
}     
sp {ground-referent*apply*failed-grounding*indefinite*category
 #  :interrupt
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
              ^constraint-lt.specifier indefinite
              ^superstate.operator.<< double-constraints constraints >>.constraint <con>
              ^top-state.dialog-world.objects <objs>)
   (<con> ^handle <obj-type>
          ^property.handle category)
-->
  # (write (crlf) |Added indefinite entity referent | <pr> | to dialog-world.|)
  # (<objs> ^object <pr>)
   (<s> ^proto-referent <pr>)
   (<pr> ^predicates <pred>
         ^handle (make-constant-symbol |new-object-id|)
         ^item-type object) # AM: all objects have item-type object, the category is used to differentiate
   (<pred> ^dialog-object true
            ^is-visible1 not-visible1
            ^category <obj-type>)
}

# AM: EDIT: Included sm-proto-referent in all of these rules as well

sp {ground-referent*apply*failed-grounding*property
   (state <s> ^operator.name << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
   (<constraint> ^handle <value> 
                 ^property.<< name handle >> { <prop> <> category })
    (<pr> ^predicates <pred>)
  -(<pred> ^<prop>)
   (<pr> -^<< handle name category >> <value>)
-->
   (<pr> ^predicates-copied true)
   (<pred> ^<prop> <value>)
   #(write (crlf) |Add predicate: ^| <prop> | | <value>)
}

sp {ground-referent*apply*failed-grounding*property1
   #:interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
   (<constraint> ^referent <ref>)
   (<ref> ^handle <value> 
          ^property.<< name handle >> <prop>)
   (<pr> ^predicates <pred>)
   (<pr> -^<< handle name >> <value>)
-->
   (<pr> ^predicates-copied true)
   (<pred> ^<prop> <value>)
   #(write (crlf) |Add predicate 1: ^| <prop> | | <value>)
}

sp {ground-referent*apply*failed-grounding*property15
  # :interrupt
   (state <s> ^operator.name << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
   (<constraint> ^referent <ref>)
   (<ref> ^handle <value> 
         -^property)
   (<pr> ^predicates <pred>)
   (<pr> -^<< handle name >> <value>)
-->
   (<pr> ^predicates-copied true)
   (<pred> ^handle <value>)
   #(write (crlf) |Add predicate 15: ^predicate.handle | <value>)
}

sp {ground-referent*apply*failed-grounding*property16
  # :interrupt
   (state <s> ^operator.name << create-hypothetical quantifier failed-grounding >>
              ^proto-referent <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
   (<constraint> ^handle { <value>  <> all <> some <> many <> your <> one }
                -^item-type << predicate property >>
                -^property.handle << property shape >>
                -^relation
                -^modifier true) 
   (<pr> ^predicates <pred>
        -^predicates-copied true)
  -(<pred> ^category <value>)
   (<pr> -^<< handle name >> <value>)
-->
   (<pr> ^predicates-copied true)
   (<pred> ^handle <value>)
   #(write (crlf) |Add predicate 16: ^handle | <value>)
}


sp {ground-referent*apply*failed-grounding*property16-2*modi*relation
  # :interrupt
   (state <s> ^operator.name << create-hypothetical quantifier failed-grounding >>
              ^proto-referent <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>              
             ^superstate.operator.<< double-constraints constraints >>.constraint { <> <constraint> <constraint2> })
   (<constraint> ^handle { <value>  <> all <> some <> many <> your <> one }
                -^item-type << predicate property >>
                -^property.handle << property shape >>
                -^relation
                 ^modifier true) 
   (<pr> ^predicates <pred>
        -^predicates-copied true)
  -(<pred> ^category <value>)
   (<pr> -^<< handle name >> <value>)
   (<constraint2> ^relation <value2>)
-->
   (<pr> ^predicates-copied true)
   (<value2> ^predicates <constraint>)
   #(write (crlf) |Add predicate 16-mod: | <value2> | ^property | <constraint>)
}



sp {ground-referent*apply*failed-grounding*property16-2*modi*property
  # :interrupt
   (state <s> ^operator.name << create-hypothetical quantifier failed-grounding >>
              ^proto-referent <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>              
              ^superstate.operator.<< double-constraints constraints >>.constraint { <> <constraint> <constraint2> })
   (<constraint> ^handle { <value>  <> all <> some <> many <> your <> one }
                -^item-type << predicate property >>
                -^property.handle << property shape >>
                -^relation
                 ^modifier true) 
   (<pr> ^predicates <pred>
        -^predicates-copied true)
  -(<pred> ^category <value>)
   (<pr> -^<< handle name >> <value>)
   (<constraint2> ^property <value2>)
   (<value2> ^handle property)
-->
   (<pr> ^predicates-copied true)
   (<pred> ^property-modifier <constraint>)
   (<constraint> ^modifying <constraint2>)
   #(write (crlf) |Add predicate 16-mod-property: | <pred> | ^property-modifier | <constraint>)
}

sp {ground-referent*apply*failed-grounding*property17
   #:interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
   (<constraint> ^handle <value> 
                -^<< movable category number quantity type multiple >> <x>
                -^item-type << predicate property >>
                -^property.handle << property >>) #category >>)
   (<pr> ^predicates <pred>)
   (<pred> ^category <value>)
-->
   (<pr> ^predicates-copied true)
   #(write (crlf) |No properties to copy 17 | <value>)
}
sp {ground-referent*apply*failed-grounding*property2
  #:interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint.{ <prop> << movable category number quantity type multiple >> } <value>)
   (<pr> ^predicates <pred>)
-->
   (<pr> ^predicates-copied true)
   (<pred> ^<prop> <value>)
   #(write (crlf) |Add predicate 2: ^| <prop> | | <value>)
}

sp {ground-referent*apply*failed-grounding*property3
 # :interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding  index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
  -{(<constraint> ^referent.handle <value>              ## Added referent
                  ^property.<< name handle >>  <prop>)}
  -(<constraint> ^<< movable category type number quantity multiple handle >>)
-->
   (<pr> ^predicates-copied true)
   #(write (crlf) |No predicates - 3|)
}

sp {ground-referent*apply*failed-grounding*property4
 # :interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
  -{(<constraint> ^referent.handle <value>              ## Added referent
                  ^property.<< name handle >>  <prop>)}
   (<constraint> ^handle)
  -{(<constraint> ^{ <prop> << movable category number quantity type multiple >> } <value>)  #2
    (<pr> ^predicates)}
  -{(<constraint> ^handle <value> 
                  ^property.<< name handle >> { <prop> <> category })}  # 1
  -{(<s> ^constraints.quantifier.lt-referent <constraint>)}
-->
   (<pr> ^predicates-copied true)
   #(write (crlf) |No predicates - 4|)
}


sp {ground-referent*apply*failed-grounding*property45
 # :interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^proto-referent <pr>
              #^top-state.dialog-world.objects.object <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator <so>)
   (<so> ^constraint-count 1
         ^<< double-constraints constraints >>.constraint <constraint>)
  -{(<constraint> ^referent.handle <value>              ## Added referent
                  ^property.<< name handle >>  <prop>)}
   (<constraint> ^handle
                 ^property.handle name)
  -{(<constraint> ^{ <prop> << movable category number quantity type multiple >> } <value>)  #2
    (<pr> ^predicates)}
  -{(<s> ^constraints.quantifier.lt-referent <constraint>)}
-->
   (<pr> ^predicates-copied true)
   #(write (crlf) |No predicates - 45|)
}

sp {ground-referent*apply*failed-grounding*relation
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^{ << sm-proto-referent proto-referent >> } <pr>
#              ^proto-referent <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
   (<constraint> ^relation <value>
                -^handle)
-->
   (<pr> ^predicates-copied true
         ^relation <value>)
   #(write (crlf) |Add relation: | <value>)
}

sp {ground-referent*apply*failed-grounding*relation*multiple-constraint
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^proto-referent <pr>
             -^superstate.name evaluate-operator
              ^superstate.operator.<< double-constraints constraints >>.constraint <constraint>)
   (<constraint> ^relation <value>
                 ^handle)
-->
   (<pr> ^predicates-copied true
         ^predicates <constraint>)
   #(write (crlf) |Add predicates and relation structure: | <constraint>)
}


#sp {ground-referent*apply*failed-grounding*relation2
#  # :interrupt
#   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
#              ^proto-referent <pr>
#              #^top-state.dialog-world.objects.object <pr>
#             -^superstate.name evaluate-operator
#              ^constraints.complement <comp>)
#   (<comp> ^head.referent <ref>
#           ^lt.relation.handle <arg>)
#-->
#   (<pr> ^predicates-copied true
#         ^relation <rel>)
#   (<rel> ^2 <ref> ^handle <arg>)
#   #(write (crlf) |Add relation: | <ref> |: | <arg>)
#}

sp {ground-referent*apply*failed-grounding*relation2
  # :interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
              ^proto-referent <pr>
             -^superstate.name evaluate-operator
              ^constraints.complement <comp>)
   (<comp> ^head.referent <ref>
          -^lt.directional true
           ^lt.relation.handle <arg>)   
  -{(<s> ^superstate.operator.<< double-constraints constraints >>.constraint.relation <value>)
    (<value> ^2 <ref> ^handle <arg>)}
-->
   (<pr> ^predicates-copied true
         ^relation <rel>)
   (<rel> ^2 <ref> ^handle <arg>)
   #(write (crlf) |Add relation: | <ref> |: | <arg>)
}
#sp {ground-referent*apply*failed-grounding*relation2
#  # :interrupt
#   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding index-semantic-memory >>
#              ^proto-referent <pr>
#             -^superstate.name evaluate-operator
#              ^constraints.complement <comp>)
#   (<comp> ^head.referent <ref>
#           ^lt.relation.handle <arg>)   
#  -{(<s> ^superstate.operator.<< double-constraints constraints >>.constraint.relation <value>)
#    (<value> ^2 <ref> ^handle <arg>)}
#-->
#   (<pr> ^predicates-copied true
#         ^relation <rel>)
#   (<rel> ^2 <ref> ^handle <arg>)
#   #(write (crlf) |Add relation: | <ref> |: | <arg>)
#}

sp {ground-referent*apply*failed-grounding*copy-possessive-flag
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
             -^constraint-lt.specifier indefinite
              ^candidate-set.possessive true
              #^top-state.dialog-world.objects.object <pr>
              ^proto-referent <pr>)
-->
   (<pr> ^possessive true)
}
sp {ground-referent*apply*failed-grounding*copy-specifier-distinct
  # :interrupt
   (state <s> ^operator.name failed-grounding
             -^superstate.name evaluate-operator
              ^constraint-lt.specifier distinct
              #^top-state.dialog-world.objects.object <pr>
              ^proto-referent <pr>)
-->
   (<pr> ^specifier distinct)
}
   

######################################################################
## Copy referent - mark ground-tested - add referent to dialog-list
sp {ground-referent*apply*failed-grounding*finish
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding >>
              ^superstate.operator.<< double-constraints constraints >> <c>
              ^proto-referent <ref>
              ^quiescence t
              )
   (<ref> ^predicates-copied true) 
-->
   (<c> ^ground-tested <c>
        ^referent <ref>)
}

## Add referent to dialog-object-list
sp {ground-referent*apply*failed-grounding*finish2
  # :interrupt
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding >> 
               ^quiescence t         
              ^top-state <ts>
              ^proto-referent <ref>
              ^top-state.dialog-world.objects <objs>)
   (<ref> ^predicates-copied true) 
   (<ts> ^dialog-object-list <dol>)
-->
   (<ts> ^dialog-object-list <dol> -
                             <ndol>)
   (<objs> ^object <ref>)
   (<ndol> ^referent <ref>
           ^next <dol>)
}

## Add referent to dialog-object-list-access
sp {ground-referent*apply*failed-grounding*finish3
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding >> 
               ^quiescence t         
              ^segment <ss>
              ^proto-referent <ref>
              ^top-state.dialog-world.objects <objs>)
   (<ref> ^predicates-copied true) 
   (<ss> ^dialog-object-list-access <dol>)
-->
   (<ss> ^dialog-object-list-access <dol> -
                                   <ndol>)
   (<objs> ^object <ref>)
   (<ndol> ^referent <ref>
           ^next <dol>)
}

### Remove old referent

sp {apply*failed-grounding*remove-current-referent
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding >> 
               ^quiescence t         
             -^proto-referent <obj>
              ^superstate.operator <so>
              ^constraints <cs>)
   (<so> ^parameter <p>
         ^<< double-constraints constraints >> <cs>)
   (<cs> ^referent <obj>)
-->
   (<cs> ^referent <obj> -)
   #(write (crlf) |Remove prior referent | <obj> | from | <cs>)
}

#### For Grounding failures during evaluation

sp {ground-referent*apply*failed-grounding*evaluate-operator
   (state <s> ^operator.name  << create-hypothetical quantifier failed-grounding >> 
               ^quiescence t         
              ^superstate <ss>)
   (<ss> ^name evaluate-operator
         ^superstate <sss>)
   (<sss> ^operator.evaluation <e>)
-->
   (<e> ^final-referent-count 0)
}

