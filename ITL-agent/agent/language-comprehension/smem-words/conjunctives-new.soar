# Conjunctions: for, and, but, or, nor, because, while, if, whenever, so, and yet
#1. Coordinating conjunctions join things that are the same, and there are only seven of these. (for, and, nor, but, or, yet, so)
#2. Correlative conjunctions are always used in pairs. (either...or, both...and)
#3. Subordinating conjunctions join dependent clauses with independent clauses. There are many subordinating conjunctions. (because, while, whenever, since, if...)

smem --add {

           (<and> ^spelling |and|
                  ^structure-type CONJ
                  ^semantic-structure conjunction
                  #^converts-to-any true                  
                  ^super-converts-to CONJP
                  ^merge-delay true
                  ^alternative-structure CP-CONJ       
                  )
           
             (<andCP> ^spelling |and|
                   ^structure-type CP-CONJ
                   ^alternative-structure CONJ 
                   ^semantic-structure conjunction  
                   #^super-converts-to CONJP
                   #^merge-delay true
            ) 
            (<andx> ^spelling |andx|
                  ^structure-type CONJ
                  ^semantic-structure conjunction
                  #^converts-to-any true                  
                  ^super-converts-to CONJP                
                  ^super-converts-to CONJ-C-ADJ-P
                  ^merge-delay true
                  #^alternative-structure CP-CONJ       
                  )
             (<andcCP> ^spelling |andc|
                   ^structure-type CP-CONJ
                   #^alternative-structure CONJ 
                   ^semantic-structure conjunction  
                   #^super-converts-to CONJP
                   #^merge-delay true
            )  

#           (<pluscCP> ^spelling |plus|
#                   ^structure-type CONJ
#                  ^semantic-structure conjunction
#                  #^converts-to-any true                  
#                  #^super-converts-to CONJP
#                  #^merge-delay true
#                  #^alternative-structure CP-CONJ  
#            )  
			
             (<pluscCP> ^spelling |plus|
                   ^structure-type CP-CONJ
                   #^alternative-structure CONJ 
                   ^semantic-structure conjunction  
                   #^super-converts-to CONJP
                   #^merge-delay true
            )                  

         (<but> ^spelling |but|
                  ^structure-type CONJ
                  ^semantic-structure conjunction
                 #^converts-to-any true                  
                  ^super-converts-to CONJP
                  ^merge-delay true
                  ^alternative-structure CP-CONJ       
                  )

           
           (<butCP> ^spelling |but|
                   ^structure-type CP-CONJ
                   ^alternative-structure CONJ 
                   ^semantic-structure conjunction  
                  #^super-converts-to CONJP
                  #^merge-delay true
            )
            
          (<and2>  ^current-word |and|
                   ^prior-word |,|
                   ^spelling |, and|
                   ^structure-type CONJ
                   ^semantic-structure conjunction
                   ^converts-to-any true
                   ^merge-delay true)
         
           (<and3> ^spelling |,|
                   ^structure-type CONJ
                   ^semantic-structure conjunction
                   ^converts-to-any true
                   ^merge-delay true)
}

smem --add {
           (<a-conj> ^structure-type CONJ-ADJ
                     ^spelling |CONJ-ADJ|
                     ^current-word ADJ
                     ^prior-word CONJ
                     ^prior-word-first false
                     ^prior-word-first true
                     ^converts-to CONJP
                     ^assigners <ass2> <ass3>)
           (<ass2> ^structure-type CONJ
                   ^before <ass3>
                   ^required true
                   ^syntactic-structure CONJ)
           (<ass3> ^structure-type ADJ
                   ^required true
                   ^semantic-structure predicate
                   ^syntactic-structure predicate)        
}

smem --add {
           (<a-conj> ^structure-type CONJ-N
                     ^spelling |CONJ-N|
                     ^current-word N
                     ^prior-word CONJ
                     ^prior-word-first false
                     ^prior-word-first true
                     ^converts-to CONJP
                     ^assigners <ass2> <ass3>)
           (<ass2> ^structure-type CONJ
                   ^before <ass3>
                   ^required true
                   ^syntactic-structure CONJ)
           (<ass3> ^structure-type N
                   ^required true
                   ^semantic-structure predicate
                   ^syntactic-structure head)        
}


smem --add {
           (<a-conj> ^structure-type CONJ-DP
                     ^spelling |CONJ-DP|
                     ^current-word D
                     ^prior-word CONJ
                     ^prior-word-first false
                     ^prior-word-first true
                     ^converts-to CONJP
                     ^assigners <ass2> <ass3>)
           (<ass2> ^structure-type CONJ
                   ^before <ass3>
                   ^required true
                   ^syntactic-structure CONJ)
           (<ass3> ^structure-type DP
                   ^required true
                   ^semantic-structure predicate
                   ^syntactic-structure head)        
}

smem --add {
           (<a-conj> ^structure-type CONJ-PP
                     ^spelling |CONJ-PP|
                     ^current-word P
                     ^prior-word CONJ
                     ^prior-word-first false
                     ^prior-word-first true
                     ^converts-to CONJP
                     ^assigners <ass2> <ass3>)
           (<ass2> ^structure-type CONJ
                   ^before <ass3>
                   ^required true
                   ^syntactic-structure CONJ)
           (<ass3> ^structure-type PP
                   ^required true
                   ^semantic-structure predicate
                   ^syntactic-structure complement)        
}

smem --add {
           (<CP-AND-CP> ^construction |CP-CONJ-CP|
                        ^structure-type C  
                        ^converts-to CP    # did not exist
                        ^current-word CP-CONJ
                        ^prior-word CP    
                        ^prior-word-first false   # by having both - means it doesn't matter whether first or not.
                        ^prior-word-first true	
                        ^assigners <ass1> <ass2> <ass3> <ass4>)
           (<ass1> ^structure-type CP
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   ^before <ass2>
                   ^before <ass3> <ass4>)
           (<ass2> ^structure-type CP-CONJ
                   ^before <ass3>
                   ^before <ass4>
                   ^required true
                   ^syntactic-structure CONJ
                   )
           (<ass3> ^structure-type CP
                   ^exclusive <ass4>
                   ^optional true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   )
           (<ass4> ^structure-type VP
                   ^exclusive <ass3>
                   ^optional true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   )
}


smem --add {
           (<CP-AND-CP> ^construction |CP-AND-CP|
                        ^structure-type C  
                        ^converts-to CP    # did not exist
                        ^current-word CONJ
                        ^prior-word CP    
                        ^prior-word-first false   # by having both - means it doesn't matter whether first or not.
                        ^prior-word-first true	
                        ^assigners <ass1> <ass2> <ass3>)# <ass4>) used to include T
           (<ass1> ^structure-type CP
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   ^before <ass2>
                   ^before <ass3>)
           (<ass2> ^structure-type CONJ
                   ^before <ass3>
                   ^required true
                   ^syntactic-structure CONJ
                   )
           (<ass3> ^structure-type CP
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   )
}
smem --add {
           (<VP-AND-CP> ^construction |VP-CONJ-CP|
                        ^structure-type C  
                        ^converts-to CP    # did not exist
                        ^current-word CP-CONJ
                        ^prior-word VP    
                        ^prior-word-first false   # by having both - means it doesn't matter whether first or not.
                        ^prior-word-first true	
                        ^assigners <ass1> <ass2> <ass3> <ass4>)
           (<ass1> ^structure-type VP
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   ^before <ass2>
                   ^before <ass3> <ass4>)
           (<ass2> ^structure-type CP-CONJ
                   ^before <ass3>
                   ^before <ass4>
                   ^required true
                   ^syntactic-structure CONJ
                   )
           (<ass3> ^structure-type CP
                   ^exclusive <ass4>
                   ^optional true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   )
           (<ass4> ^structure-type VP
                   ^exclusive <ass3>
                   ^optional true
                   ^syntactic-structure sentence
                   ^semantic-structure *embed*
                   ^embed-structure subclause
                   )
}


smem --add {
           (<a-conj> ^structure-type CONJ-C-ADJ
                     ^spelling |CONJ-C-ADJ-P|
                     ^current-word C-ADJ
                     ^prior-word CONJ
                     ^prior-word-first false
                     ^prior-word-first true
                     ^converts-to CONJ-C-ADJ-P
                     ^assigners <ass2> <ass3>)
           (<ass2> ^structure-type CONJ
                   ^before <ass3>
                   ^required true
                   ^syntactic-structure CONJ)
           (<ass3> ^structure-type C-ADJ-P
                   ^required true
                   ^syntactic-structure head)        
}
