#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\x-actions.ecg'.

#   UntilDeclarative schema
sp {comprehend-word*evoked-schema*UntilDeclarative*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema UntilDeclarative
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name UntilDeclarative
               ^is <a>
               ^assertion nil)
   (<a> ^a UntilDeclarative)
}

#   UntilDeclarative schema
sp {comprehend-word*evoked-schema*UntilDeclarative*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema UntilDeclarative
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^assertion nil)
   (<a> ^a UntilDeclarative)
}

#   MoveDistance schema
sp {comprehend-word*evoked-schema*MoveDistance*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema MoveDistance
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name MoveDistance
               ^is <a>
               ^distance nil)
   (<a> ^a MoveDistance)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   MoveDistance schema
sp {comprehend-word*evoked-schema*MoveDistance*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema MoveDistance
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^distance nil)
   (<a> ^a MoveDistance)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   UntilSituation schema
sp {comprehend-word*evoked-schema*UntilSituation*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema UntilSituation
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name UntilSituation
               ^is <a>
               ^situation nil)
   (<a> ^a UntilSituation)
}

#   UntilSituation schema
sp {comprehend-word*evoked-schema*UntilSituation*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema UntilSituation
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^situation nil)
   (<a> ^a UntilSituation)
}

