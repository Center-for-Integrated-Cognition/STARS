#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\x-lingschemas.ecg'.

#   Measurement schema
sp {comprehend-word*evoked-schema*Measurement*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Measurement
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name Measurement
               ^is <a>
               ^units nil
               ^number nil)
   (<a> ^a Measurement)
}

#   Measurement schema
sp {comprehend-word*evoked-schema*Measurement*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Measurement
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^units nil
               ^number nil)
   (<a> ^a Measurement)
}

#   VerbModifier schema
sp {comprehend-word*evoked-schema*VerbModifier*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema VerbModifier
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name VerbModifier
               ^is <a>
               ^id nil)
   (<a> ^a VerbModifier)
}

#   VerbModifier schema
sp {comprehend-word*evoked-schema*VerbModifier*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema VerbModifier
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^id nil)
   (<a> ^a VerbModifier)
}

#   SituationDescriptor schema
sp {comprehend-word*evoked-schema*SituationDescriptor*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema SituationDescriptor
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name SituationDescriptor
               ^is <a>
               ^subject nil
               ^action nil
               ^object nil)
   (<a> ^a SituationDescriptor)
}

#   SituationDescriptor schema
sp {comprehend-word*evoked-schema*SituationDescriptor*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema SituationDescriptor
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^subject nil
               ^action nil
               ^object nil)
   (<a> ^a SituationDescriptor)
}

#   ConceptIsThatAssertion schema
sp {comprehend-word*evoked-schema*ConceptIsThatAssertion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ConceptIsThatAssertion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name ConceptIsThatAssertion
               ^is <a>
               ^concept nil
               ^assertion nil)
   (<a> ^a ConceptIsThatAssertion)
   (<e1> ^schema Assertion
         ^target <e-target>)
}

#   ConceptIsThatAssertion schema
sp {comprehend-word*evoked-schema*ConceptIsThatAssertion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ConceptIsThatAssertion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^concept nil
               ^assertion nil)
   (<a> ^a ConceptIsThatAssertion)
   (<e1> ^schema Assertion
         ^target <e-target>)
}

