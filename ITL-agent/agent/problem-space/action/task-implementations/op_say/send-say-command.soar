### Say the message via the interaction stack ###

sp {op_say1*propose*send-say-command*no*person
   (state <s> ^name op_say1
              ^sentence-obj <obj>
             -^person)
-->
   (<s> ^operator <o> + =)
   (<o> ^name send-say-command
        ^item-type command-operator
        ^command-name say-command
        ^arg1.id <obj>)
}

sp {op_say1*propose*send-say-command*with*person
   (state <s> ^name op_say1
              ^sentence-obj <obj>
              ^person <person>)
   (<person> ^predicates.is-visible1 visible1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name send-say-command
        ^item-type command-operator
        ^command-name say-command
        ^arg1.id <obj>
        ^arg2 <arg2>)
   (<arg2> ^handle to1
           ^2 <person>)
}

### For all domains we simulate this command
sp {op_say1*external*apply*send-say-command
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^operator <o>
              ^io.output-link <ol>
              ^current-task-segment <seg>)
   (<o> ^name send-say-command
        ^command-name <cmd-name>
        ^arg1.id <obj>
       -^arg2)
-->
   (<ol> ^perform-action <pa>)
   (<pa> ^item-type output-command
         ^name say
         ^object <obj>)
   (<seg> ^<cmd-name> <pa>)
}

sp {op_say1*external*apply*send-say-command*with*arg2
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^operator <o>
              ^io.output-link <ol>
              ^current-task-segment <seg>)
   (<o> ^name send-say-command
        ^command-name <cmd-name>
        ^arg1.id <obj>
        ^arg2.{2} <person>)

-->
   (<ol> ^perform-action <pa>)
   (<pa> ^item-type output-command
         ^name say
         ^object <obj>
         ^person <person>)
   (<seg> ^<cmd-name> <pa>)
}
