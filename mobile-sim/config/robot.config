// This file holds ALL constants, configurations probcog needs
// Users should set the system variable PROBCOG_CONFIG to point
// at their local/personal version of this configuration file
// to ensure that Util can find the appropriate config file.

tag_config = "config/cse-simple.tagdb";

proc_config = "procman/proc.config";

kinect {
    xoff = 0.140;
    yoff = 0.000;
    zoff = 0.565;

    // Sensor calibration
    calib_rgb = "kinect_5_rgb.config";   // This is not our kinect

    // Calibration w.r.t. the robot
    calib_robot = "mobile_kinect_calib.config"; // Should be auto-generated at some point

    min_range = .25;
    max_range = 5;
}

// Mobile robot stuff
robot {
    // gui battery limits (v)
    batteryMin  = 24.0;
    batteryWarn = 25.0;
    batteryMax  = 27.0;

    geometry {
        width  = 0.56;
        radius = 0.46;
        circles_x = [0.13335];
        circles_y = [0.00000];

        centerOffsetX_m = 0.20;            // Half the axle separation
    }

    lcm {
        map_channel = "ROBOT_MAP_DATA";
        laser_channel = "HOKUYO_LIDAR";
        pose_channel = "POSE";
        drive_channel = "DIFF_DRIVE";
    }
}

// XXX These are currently being used, but need to be revisted. Calibration
// not currently applied correctly.
cameraCalibration {
    // The following camera calibration parameters should convert a vector with Z
    // pointing OUT of the camera and X "horizontal" (standard camera coordinate frame)
    // given the measured servo angles.  The transformation is written here in order
    // including the necessary servo angles
    //
    // IMPORTANT NOTES
    //   Note #1: Servo coordinate systems are on the axis at the servo face with an AX12 label
    //
    //   Note #2: The original intention was that these transformations are applied exactly in order
    //              e.g. translate(poseToPan), rotate(poseToPan), translate(panToTilt), rotate...
    //            If applied via a 4x4 RBT, rotations will occur first, yielding an incorrect end
    //            result.  We should fix this, but it's not important enough to do before magic
    //            PLEASE mark your code with a relevant note
    //
    extrinsics {
        // 1) coordinate transform from pose to pan servo axis
        poseToPan {
            position = [0.206375, 0, 0.5953];   // pose to pan servo translation
            rollpitchyaw_degrees = [0, 0, 0];   // "    "  "   "     rotations
        }
        // 2) measurement: pan servo angle
        // 3) coordinate transform from pan servo axis to tilt servo axis
        panToTilt {
            position = [0, 0.0206375, 0.044];   // pan servo to tilt servo translation
            rollpitchyaw_degrees = [-90, 0, 0]; // "   "     "  "    "     rotations
        }
        // 4) measurement: tilt servo angle
        // 5) coordinate transformation from tilt servo to camera center
        tiltToCam {
            position = [0, -0.038, -.0206375];  // tilt servo to camera translation
            rollpitchyaw_degrees = [0, 90, 0];  // "    "     "  "      rotation
        }
        // Result: transformation from camera coordinate frame (z out, y down)
        //   to robot coordinate frame (rear axel center on ground)
    }

    servo_error_deg {
        ids  = [   2,     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,    15 ];
        pan  = [ 0.0,   0.0,   0.0,   0.0,  -2.2,   0.0,   0.0,  -1.9,   0.0,  -2.0,   0.0,   0.0,  -3.0,   0.0 ];
        tilt = [ 0.0,   0.0,   0.0,   0.0,   5.7,   0.0,   0.0,  -0.4,   0.0,   4.0,   0.0,   0.0,   3.0,   0.0 ];
    }

    // camera calibration parameters for CalTech camera calibration toolbox
    // determined on robot #2 on June 3rd, 2010
    intrinsics {
        //fc = [477.73045, 478.72077];            // focal length
        //cc = [393.83418, 256.00990];            // principal point
        //kc = [-0.27777, 0.08649, 0.00082,       // distortion (combined radial/tangential model)
        //       0.00093, 0.00000];
        skew = 0;                               // skew

        // From april-carl, default model
        fc = [ 773.621630, 773.949082 ];
        cc = [ 639.435827, 558.448606 ];
        kc = [ 0.010309, 0.145309, -0.218348, 0.117207 ];

        // error terms (just to have available)
        //kc_err = [1.21183, 1.22115];
        cc_err = [1.99970, 1.55518];

        kc_err = [0.00328, 0.00430, 0.00037, 0.00031, 0.00000];
        pixel_err = [0.40137, 0.26483];
    }

    imWidth = 1296;
    imHeight = 964;
}

tag_detection {
    verbose            = false;
    channel            = "TAG_DETECTIONS";// publishing channel
    follow_enable_dflt = true;   // only used by CameraFollower

    tag {                                       // TagDetector settings
        family      = "Tag36h11";               // tag family for detections
        size_m      = 0.15;

        segSigma    = 1;
        sigma       = 0;
        minMag      = 0.004;
        maxEdgeCost_deg = 30;
        magThresh   = 2000;
        thetaThresh = 100;
        errorBits   = 0;
        weightScale = 100;
        decimate    = false;
    }

    pxRadiusMax     = 200;                      // pixel radius from optical center for tag detections

    // robots {
    //     tagSize_m       = 0.137;                    // tag width for homographyToPose transformations
    //     rangeLimit      = 2.0;                      // range limit for tag detections
    // }
}

pathControl { // See control.Params for details
    maxLookahead_m = 0.60;
    minLookahead_m = 0.4;//0.10;

    speedPreview_m = 1.5;
    previewDistThresh_m = 0.3;

    maxSpeed_p = 0.95;
    minSpeed_p = 0.35;

    turnRatio_p = 12.0;

    turnInPlaceThresh_deg = 30;
    slowdownDist_m = 0.50;
    destTolerance_m = 0.15;
    minMotorSpeed_p = 0.01;

    minSampleRate_m = 0.02;
    broom_lookahead_m = .6;
    broom_width_m = .6;

    useUnknownChecking = "false";

    path_timeout_s = 1.0;
}

// === Real time simulation stuff begins here ===
monte_carlo {
    // Search parameters
    lambda = 1000;
    xyt_dist_m = 0.3;       // Range within which nodes are merged in meters
    xyt_theta_deg = 3.0;    // Same as above, but for orientation

    max_search_depth = 20;   // How should this be selected? This seems sufficient for CSE
    num_exploration_samples = 1;
    num_evaluation_samples = 125;

    // Robot parameters
    default_steps_per_second = 5;
    steps_per_second = 20;
    default_forward_search_time = 90.0; // [s]

    // Lidar parameters
    step_degrees = 5;
    min_degrees = -90; //-135;
    max_degrees = 90; //135;
    max_range = 7.5;
}
