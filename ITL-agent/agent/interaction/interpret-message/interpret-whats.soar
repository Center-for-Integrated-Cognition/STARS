
#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-whats
   (state <s> ^name interpret-message
              ^instructor-message <msg>
             -^task-operator <op>)
   (<msg> ^message-type command ^action.word-structure.spelling |what's|)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name interpret-whats
        ^command-message <msg>)
}

sp {interpret-message*propose*interpret-whats2
   (state <s> ^name interpret-message
              ^instructor-message <msg>
             -^task-operator <op>)
   (<msg> ^message-type command ^action.word-structure.spelling |whats|)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name interpret-whats
        ^command-message <msg>)
}

sp {interpret-message*apply*interpret-whats
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^operator <o>)
   (<o> ^name interpret-whats)
   (<msg> ^arg1.handle <type>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type whats-question
        ^parameters.message <type>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type interjection
          ^originator agent)
}

sp {dialog-event*propose*whats-question-respond
   (state <s> ^name dialog-event
              ^purpose <p>)
   (<p> ^type whats-question ^parameters.message <type>)
-->
   (<s> ^operator <o> +)
   (<o> ^name whats-question-respond
        ^type <type>)
}

sp {dialog-event*apply*whats-question-respond*time
   (state <s> ^name dialog-event
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name whats-question-respond
        ^type time)
-->
   (<status> ^performed.dialog-event <de>)
   (<de> ^type interjection
         ^originator agent)
   (<changes> ^outgoing-message <msg1>)
   (<msg1> ^type current-time
          ^complete-message true)
}

