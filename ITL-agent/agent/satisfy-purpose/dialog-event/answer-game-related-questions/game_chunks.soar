sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t56836-2
    :chunk
    (state <s1> ^retrieve-game simple-maze317)
    -->
    (<s1> ^retrieve-handle action-default322 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t56836-1
    :chunk
    (state <s1> ^retrieve-game simple-maze317)
    -->
    (<s1> ^retrieve-handle goal-default325 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t56829-1
    :chunk
    (state <s1> ^retrieve-handle goal-default325 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^aname goal-default325 +
           ^handle goal-default325 +)
    (<p3> ^argnum 1 +)
    (<p17> ^conditions <n1> + ^aname goal-default325 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p10> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c4> ^type attribute + ^name red1 + ^attribute color + ^result <r6> +
           ^parameter <p13> + ^negative false + ^args <a7> + ^rtype single +)
    (<r6> ^set <p12> +)
    (<p13> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p15> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r7> ^set <p14> +)
    (<p15> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p16> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t56821-1
    :chunk
    (state <s1> ^retrieve-handle action-default322 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default322 + ^handle action-default322 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname action-default322 +)
    (<n1> ^type concept + ^name adjacent + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 1 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a8> ^1 <c5> + ^2 <c1> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t55065-3
    :chunk
    (state <s1> ^retrieve-game othello291)
    -->
    (<s1> ^retrieve-handle capture-blocks292 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t55065-2
    :chunk
    (state <s1> ^retrieve-game othello291)
    -->
    (<s1> ^retrieve-handle goal-default312 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t55065-1
    :chunk
    (state <s1> ^retrieve-game othello291)
    -->
    (<s1> ^retrieve-handle failure-default316 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t55058-1
    :chunk
    (state <s1> ^retrieve-handle goal-default312 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname goal-default312 +
           ^handle goal-default312 +)
    (<p3> ^argnum 5 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname goal-default312 +)
    (<n1> ^type concept + ^name covered + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r6> + ^parameter <p18> +
           ^negative false + ^args <a7> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r6> ^set <p16> +)
    (<p18> ^1 <p17> + ^2 <p19> + ^num 2 +)
    (<p17> ^type single + ^param-id 4 +)
    (<p19> ^type set + ^param-id 2 +)
    (<a7> ^2 <c3> + ^num 1 +)
    (<c3> ^type concept + ^name captured + ^attribute predicate +
           ^result <r7> + ^parameter <p21> + ^negative false + ^args <a6> +
           ^rtype set +)
    (<r7> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r8> + ^parameter <p23> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p24> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p24> ^num 0 +)
    (<n3> ^type function + ^name count + ^result <r11> + ^parameter <p27> +
           ^negative false + ^args <a12> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r11> ^set <p25> +)
    (<p27> ^1 <p26> + ^2 <p28> + ^num 2 +)
    (<p26> ^type single + ^param-id 5 +)
    (<p28> ^type set + ^param-id 3 +)
    (<a12> ^2 <c6> + ^num 1 +)
    (<c6> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r12> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype set +)
    (<r12> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p32> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r13> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p33> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p33> ^num 0 +)
    (<n4> ^type function + ^name greater + ^result <r5> + ^parameter <p14> +
           ^negative false + ^args <a8> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^num 2 +)
    (<p13> ^type single + ^param-id 4 +)
    (<p15> ^type single + ^param-id 5 +)
    (<a8> ^1 <n2> + ^2 <n3> + ^num 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t55050-1
    :chunk
    (state <s1> ^retrieve-handle capture-blocks292 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p4> + ^verb-structure <v2> +
           ^aname capture-blocks292 + ^handle capture-blocks292 +)
    (<p3> ^argnum 4 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <c9> +
           ^aname capture-blocks292 +)
    (<n1> ^type function + ^name between + ^result <r2> + ^parameter <p10> +
           ^negative false + ^args <a3> + ^rtype set +
           ^function board-between +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^2 <p11> + ^3 <p12> + ^num 3 +)
    (<p9> ^type set + ^param-id 3 +)
    (<p11> ^type single + ^param-id 1 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^3 <c6> + ^num 3 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r3> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p15> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p15> ^num 0 +)
    (<c3> ^type concept + ^name clear + ^attribute predicate + ^result <r6> +
           ^parameter <p17> + ^negative false + ^args <a6> + ^rtype single +)
    (<r6> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p19> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p20> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p20> ^num 0 +)
    (<c6> ^type concept + ^name captured + ^attribute predicate +
           ^result <r10> + ^parameter <p22> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r10> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r1> + ^parameter <p7> + ^negative false + ^args <a10> +
           ^rtype set +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^num 1 +)
    (<p6> ^type set + ^param-id 3 +)
    (<a10> ^1 <n1> + ^num 1 +)
    (<c9> ^type concept + ^name free + ^attribute predicate + ^result <r14> +
           ^parameter <p28> + ^negative false + ^args <a14> + ^rtype single +)
    (<r14> ^set <p26> +)
    (<p28> ^1 <p27> + ^num 1 +)
    (<p27> ^type single + ^param-id 4 +)
    (<a14> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p30> + ^negative false + ^args <a13> + ^rtype single +)
    (<r15> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a13> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name block + ^attribute category +
           ^result <r16> + ^parameter <p32> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r16> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a12> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p33> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p33> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 4 + ^2 1 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t55042-1
    :chunk
    (state <s1> ^retrieve-handle failure-default316 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname failure-default316 +
           ^handle failure-default316 +)
    (<p3> ^argnum 5 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname failure-default316 +)
    (<n1> ^type concept + ^name covered + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r6> + ^parameter <p18> +
           ^negative false + ^args <a7> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r6> ^set <p16> +)
    (<p18> ^1 <p17> + ^2 <p19> + ^num 2 +)
    (<p17> ^type single + ^param-id 4 +)
    (<p19> ^type set + ^param-id 2 +)
    (<a7> ^2 <c3> + ^num 1 +)
    (<c3> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r7> + ^parameter <p21> + ^negative false + ^args <a6> +
           ^rtype set +)
    (<r7> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r8> + ^parameter <p23> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p24> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p24> ^num 0 +)
    (<n3> ^type function + ^name count + ^result <r11> + ^parameter <p27> +
           ^negative false + ^args <a12> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r11> ^set <p25> +)
    (<p27> ^1 <p26> + ^2 <p28> + ^num 2 +)
    (<p26> ^type single + ^param-id 5 +)
    (<p28> ^type set + ^param-id 3 +)
    (<a12> ^2 <c6> + ^num 1 +)
    (<c6> ^type concept + ^name captured + ^attribute predicate +
           ^result <r12> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype set +)
    (<r12> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p32> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r13> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p33> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p33> ^num 0 +)
    (<n4> ^type function + ^name greater + ^result <r5> + ^parameter <p14> +
           ^negative false + ^args <a8> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^num 2 +)
    (<p13> ^type single + ^param-id 4 +)
    (<p15> ^type single + ^param-id 5 +)
    (<a8> ^1 <n2> + ^2 <n3> + ^num 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t54147-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name covered ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p11> +
           ^aname covered + ^handle covered +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n2> + ^aname covered +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c2> + ^2 <c3> + ^num 2 +)
    (<c2> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
}

sp {chunk*justification-34235*onc*t52288-2
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function board-between ^rtype set ^name between ^type function
          ^args <a2> ^negative <c3> ^parameter <p1> ^result <r1>)
    (<a2> ^num 3 ^1 <c6> ^2 <c4> ^3 <c5>)
    (<c6> ^rtype set ^result <r4>)
    (<l1> ^game <g1>)
    (<r4> ^set <p5>)
    (<p5> ^instance <i3>)
    (<i3> ^1 <s3>)
    (<c5> ^result <r3>)
    (<r3> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n3>)
    (<n3> ^predicates <p8>)
    (<c4> ^result <r2>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 { <> <n3> <n2> })
    (<n2> ^predicates <p7>)
    (<r1> ^set <p2>)
    (<p2> ^instance <s2>)
    (<s2> ^2 <n2> ^3 <n3> ^1 <s4>)
    (<p7> ^{ << x y >> <c8> } <c9> ^{ <> <c8> << x y >> <c10> } <c12>)
    (<p8> ^<c8> <c9> ^<c10> <c11>)
    (<s3> ^<c7> <n4>)
    (<n4> ^predicates <p6>)
   -{ (<p6> ^<c10> { >= <c11> >= <c12> <y> } ^<c10> <y>)}
   -{ (<p6> ^<c10> { <= <c11> <= <c12> <y> } ^<c10> <y>)}
    (<p6> ^<c8> <c9>)
    -->
    (<s4> ^object <n4> +)
}

sp {chunk*justification-34121*t52282-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function board-between ^rtype set ^type function ^args <a2>
          ^negative <c3> ^parameter <p1> ^result <r1> ^name <c4>)
    (<a2> ^num 3 ^2 <c5> ^3 <c6> ^1 <c7>)
    (<l1> ^game <g1>)
    (<c6> ^result <r3>)
    (<r3> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n3>)
    (<c5> ^result <r2>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 { <> <n3> <n2> })
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <s2> +)
    (<s2> ^1 <s3> + ^3 <n3> + ^2 <n2> +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t48206-4
    :chunk
    (state <s1> ^retrieve-game jealous-husbands273)
    -->
    (<s1> ^retrieve-handle all-crossed92 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t48206-3
    :chunk
    (state <s1> ^retrieve-game jealous-husbands273)
    -->
    (<s1> ^retrieve-handle cross-river191 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t48206-2
    :chunk
    (state <s1> ^retrieve-game jealous-husbands273)
    -->
    (<s1> ^retrieve-handle cross-two197 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t48206-1
    :chunk
    (state <s1> ^retrieve-game jealous-husbands273)
    -->
    (<s1> ^retrieve-handle failure-default282 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t48190-1
    :chunk
    (state <s1> ^retrieve-handle failure-default282 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p8> + ^aname failure-default282 +
           ^handle failure-default282 +)
    (<p3> ^argnum 4 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname failure-default282 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 3 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a4> ^1 <c3> + ^2 <c2> + ^num 2 +)
    (<c3> ^type attribute + ^name man1 + ^attribute shape + ^result <r3> +
           ^parameter <p14> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<n3> ^type concept + ^name husband + ^attribute predicate +
           ^result <r6> + ^parameter <p23> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r6> ^set <p21> +)
    (<p23> ^1 <p22> + ^2 <p24> + ^num 2 +)
    (<p22> ^type single + ^param-id 4 +)
    (<p24> ^type single + ^param-id 1 +)
    (<c1> ^type attribute + ^name woman1 + ^attribute shape + ^result <r7> +
           ^parameter <p26> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a6> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p28> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <p27> +)
    (<p28> ^num 0 +)
    # PR - Change the bottom to ^1 <c1> for failure of jealous-husbands to work
    (<a7> ^2 <c1> + ^num 1 +)
    (<c2> ^type attribute + ^name bank1 + ^attribute shape + ^result <r9> +
           ^parameter <p30> + ^negative false + ^args <a10> + ^rtype single +)
    (<r9> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a10> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p32> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r10> ^set <p31> +)
    (<p32> ^num 0 +)
    (<n4> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r5> + ^parameter <p19> + ^negative true + ^args <a8> +
           ^rtype single +)
    (<r5> ^set <p17> +)
    (<p19> ^1 <p18> + ^2 <p20> + ^num 2 +)
    (<p18> ^type single + ^param-id 4 +)
    (<p20> ^type single + ^param-id 2 +)
    (<a8> ^1 <n3> + ^2 <c2> + ^num 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t47770-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name husband ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p12> +
           ^aname husband + ^handle husband +)
    (<p3> ^argnum 3 +)
    (<p12> ^conditions <n2> + ^conditions <n3> + ^aname husband +)
    (<n2> ^type attribute-of + ^name last-name + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a3> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^2 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name man1 + ^attribute shape + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<n3> ^type attribute-of + ^name last-name + ^result <r4> +
           ^parameter <p15> + ^negative false + ^args <a5> + ^rtype single +
           ^return-type number +)
    (<r4> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type single + ^param-id 3 +)
    (<p16> ^type single + ^param-id 2 +)
    (<a5> ^2 <c4> + ^num 1 +)
    (<c4> ^name object + ^attribute input-arg + ^result <r5> +
           ^parameter <p18> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <r6> +)
    (<p18> ^1 <p17> + ^num 1 +)
    (<p17> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t45123-5
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads245)
    -->
    (<s1> ^retrieve-handle action-default250 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t45123-4
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads245)
    -->
    (<s1> ^retrieve-handle action-default255 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t45123-3
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads245)
    -->
    (<s1> ^retrieve-handle action-default261 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t45123-2
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads245)
    -->
    (<s1> ^retrieve-handle action-default267 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t45123-1
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads245)
    -->
    (<s1> ^retrieve-handle goal-default272 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t45116-1
    :chunk
    (state <s1> ^retrieve-handle action-default255 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default255 + ^handle action-default255 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname action-default255 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type state-pair + ^name left-of1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 3 +)
    (<p17> ^type single + ^param-id 1 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type concept + ^name clear + ^attribute predicate + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name location + ^attribute category +
           ^result <r8> + ^parameter <p21> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t45108-1
    :chunk
    (state <s1> ^retrieve-handle goal-default272 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p18> + ^aname goal-default272 +
           ^handle goal-default272 +)
    (<p3> ^argnum 2 +)
    (<p18> ^conditions <n1> + ^conditions <n2> + ^aname goal-default272 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name blue1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 2 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name blue1 + ^attribute color + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a7> + ^rtype set +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p17> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p17> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r10> + ^parameter <p21> + ^negative false + ^args <a11> +
           ^rtype set +)
    (<r10> ^set <p19> +)
    (<p21> ^1 <p20> + ^num 1 +)
    (<p20> ^type set + ^param-id 1 +)
    (<a11> ^1 <c7> + ^2 <c10> + ^num 2 +)
    (<c7> ^type attribute + ^name red1 + ^attribute color + ^result <r11> +
           ^parameter <p24> + ^negative false + ^args <a10> + ^rtype set +)
    (<r11> ^set <p22> +)
    (<p24> ^1 <p23> + ^num 1 +)
    (<p23> ^type set + ^param-id 1 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p26> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a9> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p27> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p27> ^num 0 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p29> + ^negative false + ^args <a14> + ^rtype set +)
    (<r15> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a14> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name location + ^attribute category +
           ^result <r16> + ^parameter <p31> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r16> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a13> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p32> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p32> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t45100-1
    :chunk
    (state <s1> ^retrieve-handle action-default267 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default267 + ^handle action-default267 +)
    (<p3> ^argnum 5 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname action-default267 +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name blue1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 4 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a5> ^1 <c5> + ^2 <c6> + ^num 2 +)
    (<c6> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a8> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<n3> ^type state-pair + ^name left-of1 + ^attribute prepositions +
           ^result <r11> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p25> ^1 <p24> + ^2 <p26> + ^num 2 +)
    (<p24> ^type single + ^param-id 4 +)
    (<p26> ^type single + ^param-id 5 +)
    (<a9> ^1 <c5> + ^2 <c9> + ^num 2 +)
    (<c9> ^type concept + ^name clear + ^attribute predicate + ^result <r12> +
           ^parameter <p28> + ^negative false + ^args <a12> + ^rtype single +)
    (<r12> ^set <p27> +)
    (<p28> ^num 0 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r13> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p31> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p31> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r17> + ^parameter <p37> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r17> ^set <p36> +)
    (<p37> ^num 0 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r18> + ^parameter <p38> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r18> ^set <r19> +)
    (<p38> ^num 0 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r20> + ^parameter <p40> + ^negative false + ^args <a17> +
           ^rtype single +)
    (<r20> ^set <p39> +)
    (<p40> ^num 0 +)
    (<a17> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r21> + ^parameter <p41> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r21> ^set <r22> +)
    (<p41> ^num 0 +)
    (<n4> ^type state-pair + ^name left-of1 + ^attribute prepositions +
           ^result <r16> + ^parameter <p34> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r16> ^set <p32> +)
    (<p34> ^1 <p33> + ^2 <p35> + ^num 2 +)
    (<p33> ^type single + ^param-id 2 +)
    (<p35> ^type single + ^param-id 4 +)
    (<a15> ^1 <c1> + ^2 <c5> + ^num 2 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t45092-1
    :chunk
    (state <s1> ^retrieve-handle action-default261 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default261 + ^handle action-default261 +)
    (<p3> ^argnum 5 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname action-default261 +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 4 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a5> ^1 <c5> + ^2 <c6> + ^num 2 +)
    (<c6> ^type attribute + ^name blue1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a8> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<n3> ^type state-pair + ^name right-of1 + ^attribute prepositions +
           ^result <r11> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p25> ^1 <p24> + ^2 <p26> + ^num 2 +)
    (<p24> ^type single + ^param-id 4 +)
    (<p26> ^type single + ^param-id 5 +)
    (<a9> ^1 <c5> + ^2 <c9> + ^num 2 +)
    (<c9> ^type concept + ^name clear + ^attribute predicate + ^result <r12> +
           ^parameter <p28> + ^negative false + ^args <a12> + ^rtype single +)
    (<r12> ^set <p27> +)
    (<p28> ^num 0 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r13> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p31> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p31> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r17> + ^parameter <p37> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r17> ^set <p36> +)
    (<p37> ^num 0 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r18> + ^parameter <p38> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r18> ^set <r19> +)
    (<p38> ^num 0 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r20> + ^parameter <p40> + ^negative false + ^args <a17> +
           ^rtype single +)
    (<r20> ^set <p39> +)
    (<p40> ^num 0 +)
    (<a17> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r21> + ^parameter <p41> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r21> ^set <r22> +)
    (<p41> ^num 0 +)
    (<n4> ^type state-pair + ^name right-of1 + ^attribute prepositions +
           ^result <r16> + ^parameter <p34> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r16> ^set <p32> +)
    (<p34> ^1 <p33> + ^2 <p35> + ^num 2 +)
    (<p33> ^type single + ^param-id 2 +)
    (<p35> ^type single + ^param-id 4 +)
    (<a15> ^1 <c1> + ^2 <c5> + ^num 2 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t45084-1
    :chunk
    (state <s1> ^retrieve-handle action-default250 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default250 + ^handle action-default250 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname action-default250 +)
    (<n1> ^type state-pair + ^name right-of1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 2 +)
    (<p17> ^type single + ^param-id 1 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name blue1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t40747-2
    :chunk
    (state <s1> ^retrieve-game mahjong237)
    -->
    (<s1> ^retrieve-handle action-default241 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t40747-1
    :chunk
    (state <s1> ^retrieve-game mahjong237)
    -->
    (<s1> ^retrieve-handle goal-default244 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t40740-1
    :chunk
    (state <s1> ^retrieve-handle action-default241 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p15> + ^verb-structure <v2> +
           ^aname action-default241 + ^handle action-default241 +)
    (<p3> ^argnum 4 +)
    (<p15> ^conditions <n1> + ^conditions <n2> + ^conditions <c9> +
           ^aname action-default241 +)
    (<n1> ^type attribute-of + ^name color + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a5> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c2> + ^num 1 +)
    (<c2> ^type concept + ^name free + ^attribute predicate + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p13> + ^negative false + ^args <a2> + ^rtype single +)
    (<r4> ^set <p12> +)
    (<p13> ^num 0 +)
    (<a2> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r6> ^set <r5> +)
    (<r5> ^instance <i1> + ^instance <i2> + ^instance <i3> + ^instance <i4> +
           ^instance <i5> + ^instance <i6> + ^instance <i7> + ^instance <i8> +
           ^instance <i9> +)
    (<p14> ^num 0 +)
    (<n2> ^type attribute-of + ^name color + ^result <r7> + ^parameter <p18> +
           ^negative false + ^args <a10> + ^rtype single +
           ^return-type number +)
    (<r7> ^set <p16> +)
    (<p18> ^1 <p17> + ^2 <p19> + ^num 2 +)
    (<p17> ^type single + ^param-id 4 +)
    (<p19> ^type single + ^param-id 2 +)
    (<a10> ^2 <c5> + ^num 1 +)
    (<c5> ^type concept + ^name free + ^attribute predicate + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a9> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a9> ^1 <c6> + ^num 1 +)
    (<c6> ^type concept + ^name clear + ^attribute predicate + ^result <r9> +
           ^parameter <p23> + ^negative false + ^args <a8> + ^rtype single +)
    (<r9> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category +
           ^result <r10> + ^parameter <p25> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r10> ^set <p24> +)
    (<p25> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p26> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r12> ^set <r11> +)
    (<r11> ^instance <i10> + ^instance <i11> + ^instance <i12> +
           ^instance <i13> + ^instance <i14> + ^instance <i15> +
           ^instance <i16> + ^instance <i17> + ^instance <i18> +)
    (<p26> ^num 0 +)
    (<c9> ^type attribute + ^name garbage + ^attribute name + ^result <r13> +
           ^parameter <p29> + ^negative false + ^args <a12> + ^rtype single +)
    (<r13> ^set <p27> +)
    (<p29> ^1 <p28> + ^num 1 +)
    (<p28> ^type single + ^param-id 3 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p31> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r14> ^set <p30> +)
    (<p31> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> +)
    (<v1> ^1 1 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t40732-1
    :chunk
    (state <s1> ^retrieve-handle goal-default244 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p15> + ^aname goal-default244 +
           ^handle goal-default244 +)
    (<p3> ^argnum 1 +)
    (<p15> ^conditions <n1> + ^aname goal-default244 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type attribute + ^name garbage + ^attribute name + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t39013-4
    :chunk
    (state <s1> ^retrieve-game picaria224)
    -->
    (<s1> ^retrieve-handle place-block96 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t39013-3
    :chunk
    (state <s1> ^retrieve-game picaria224)
    -->
    (<s1> ^retrieve-handle three-in-a-row107 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t39013-2
    :chunk
    (state <s1> ^retrieve-game picaria224)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row115 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t39013-1
    :chunk
    (state <s1> ^retrieve-game picaria224)
    -->
    (<s1> ^retrieve-handle slide-next-to225 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t39000-1
    :chunk
    (state <s1> ^retrieve-handle slide-next-to225 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname slide-next-to225 + ^handle slide-next-to225 +)
    (<p3> ^argnum 4 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname slide-next-to225 +)
    (<n1> ^type state-pair + ^name near1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype set +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type set + ^param-id 1 +)
    (<a8> ^1 <c5> + ^2 <c8> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype set +)
    (<r7> ^set <p17> +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type set + ^param-id 1 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<c8> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype set +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r19> + ^parameter <p36> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r19> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a16> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r20> + ^parameter <p37> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r20> ^set <r21> +)
    (<p37> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r14> + ^parameter <p28> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r14> ^set <p26> +)
    (<p28> ^1 <p27> + ^2 <p29> + ^num 2 +)
    (<p27> ^type single + ^param-id 2 +)
    (<p29> ^type single + ^param-id 4 +)
    (<a14> ^1 <c10> + ^2 <c1> + ^num 2 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p31> + ^negative false + ^args <a13> + ^rtype single +)
    (<r15> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a13> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name block + ^attribute category +
           ^result <r16> + ^parameter <p33> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r16> ^set <p32> +)
    (<p33> ^num 0 +)
    (<a12> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p34> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p34> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t35699-2
    :chunk
    (state <s1> ^retrieve-game eight-puzzle221)
    -->
    (<s1> ^retrieve-handle slide-block2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t35699-1
    :chunk
    (state <s1> ^retrieve-game eight-puzzle221)
    -->
    (<s1> ^retrieve-handle goal-default223 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t35689-1
    :chunk
    (state <s1> ^retrieve-handle goal-default223 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default223 +
           ^handle goal-default223 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default223 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 8 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t34410-2
    :chunk
    (state <s1> ^retrieve-game eight-puzzle-iso209)
    -->
    (<s1> ^retrieve-handle slide-block2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t34410-1
    :chunk
    (state <s1> ^retrieve-game eight-puzzle-iso209)
    -->
    (<s1> ^retrieve-handle goal-default211 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t34400-1
    :chunk
    (state <s1> ^retrieve-handle goal-default211 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default211 +
           ^handle goal-default211 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default211 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched171 + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 8 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t33108-4
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals190)
    -->
    (<s1> ^retrieve-handle all-crossed92 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t33108-3
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals190)
    -->
    (<s1> ^retrieve-handle cross-river191 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t33108-2
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals190)
    -->
    (<s1> ^retrieve-handle cross-two197 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t33108-1
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals190)
    -->
    (<s1> ^retrieve-handle failure-default208 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t33098-1
    :chunk
    (state <s1> ^retrieve-handle cross-river191 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^verb-structure <v2> +
           ^aname cross-river191 + ^handle cross-river191 +)
    (<p3> ^argnum 4 +)
    (<p17> ^conditions <n1> + ^conditions <c6> + ^conditions <c9> +
           ^aname cross-river191 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type concept + ^name current + ^attribute predicate +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name bank1 + ^attribute shape + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
    (<c6> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r8> + ^parameter <p20> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r8> ^set <p18> +)
    (<p20> ^1 <p19> + ^num 1 +)
    (<p19> ^type single + ^param-id 2 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name bank1 + ^attribute shape + ^result <r9> +
           ^parameter <p22> + ^negative false + ^args <a8> + ^rtype single +)
    (<r9> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p24> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r10> ^set <p23> +)
    (<p24> ^num 0 +)
    (<c9> ^type attribute + ^name boat1 + ^attribute shape + ^result <r11> +
           ^parameter <p27> + ^negative false + ^args <a11> + ^rtype single +)
    (<r11> ^set <p25> +)
    (<p27> ^1 <p26> + ^num 1 +)
    (<p26> ^type single + ^param-id 1 +)
    (<a11> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p29> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p28> +)
    (<p29> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 4 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t33090-1
    :chunk
    (state <s1> ^retrieve-handle cross-two197 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p11> + ^verb-structure <v2> +
           ^aname cross-two197 + ^handle cross-two197 +)
    (<p3> ^argnum 5 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <c8> +
           ^conditions <c11> + ^aname cross-two197 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type concept + ^name current + ^attribute predicate +
           ^result <r9> + ^parameter <p20> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r9> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a9> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name bank1 + ^attribute shape + ^result <r10> +
           ^parameter <p22> + ^negative false + ^args <a8> + ^rtype single +)
    (<r10> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r5> + ^parameter <p14> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^num 2 +)
    (<p13> ^type single + ^param-id 2 +)
    (<p15> ^type single + ^param-id 1 +)
    (<a6> ^1 <c4> + ^2 <c3> + ^num 2 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r6> +
           ^parameter <p17> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p18> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <r8> +)
    (<p18> ^num 0 +)
    (<c8> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r12> + ^parameter <p27> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r12> ^set <p25> +)
    (<p27> ^1 <p26> + ^num 1 +)
    (<p26> ^type single + ^param-id 5 +)
    (<a12> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name bank1 + ^attribute shape + ^result <r13> +
           ^parameter <p29> + ^negative false + ^args <a11> + ^rtype single +)
    (<r13> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a11> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p31> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r14> ^set <p30> +)
    (<p31> ^num 0 +)
    (<c11> ^type attribute + ^name boat1 + ^attribute shape + ^result <r15> +
           ^parameter <p34> + ^negative false + ^args <a14> + ^rtype single +)
    (<r15> ^set <p32> +)
    (<p34> ^1 <p33> + ^num 1 +)
    (<p33> ^type single + ^param-id 4 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r16> + ^parameter <p36> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r16> ^set <p35> +)
    (<p36> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> + ^3 <v4> +)
    (<v1> ^1 3 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 4 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
    (<v4> ^1 2 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t33082-1
    :chunk
    (state <s1> ^retrieve-handle failure-default208 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p4> + ^aname failure-default208 +
           ^handle failure-default208 +)
    (<p3> ^argnum 5 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^conditions <n5> + ^aname failure-default208 +)
    (<n3> ^type function + ^name count + ^result <r2> + ^parameter <p11> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 4 +)
    (<p12> ^type set + ^param-id 2 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r3> + ^parameter <p15> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type set + ^param-id 2 +)
    (<p16> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name cannibal1 + ^attribute shape +
           ^result <r4> + ^parameter <p18> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p17> +)
    (<p18> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p20> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a4> ^2 <n2> + ^num 1 +)
    (<n4> ^type function + ^name count + ^result <r6> + ^parameter <p23> +
           ^negative false + ^args <a11> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r6> ^set <p21> +)
    (<p23> ^1 <p22> + ^2 <p24> + ^num 2 +)
    (<p22> ^type single + ^param-id 5 +)
    (<p24> ^type set + ^param-id 3 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r7> + ^parameter <p27> + ^negative false + ^args <a8> +
           ^rtype set +)
    (<r7> ^set <p25> +)
    (<p27> ^1 <p26> + ^2 <p28> + ^num 2 +)
    (<p26> ^type set + ^param-id 3 +)
    (<p28> ^type single + ^param-id 1 +)
    (<c3> ^type attribute + ^name bank1 + ^attribute shape + ^result <r10> +
           ^parameter <p34> + ^negative false + ^args <a10> + ^rtype single +)
    (<r10> ^set <p33> +)
    (<p34> ^num 0 +)
    (<a10> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p36> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r11> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a8> ^1 <c4> + ^2 <c3> + ^num 2 +)
    (<c4> ^type attribute + ^name missionary1 + ^attribute shape +
           ^result <r8> + ^parameter <p30> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r8> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p32> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a11> ^2 <n1> + ^num 1 +)
    (<n5> ^type function + ^name greater + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 4 +)
    (<p8> ^type single + ^param-id 5 +)
    (<a5> ^1 <n3> + ^2 <n4> + ^num 2 +)
}

sp {chunk*justification-21739*onc*t32664-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r3> ^name <c4>)
    (<a2> ^num 2 ^2 <n2> ^1 <n3>)
    (<p1> ^num 2)
    (<l1> ^game <g1>)
    (<r3> ^set <p6>)
    (<n3> ^result <r2>)
    (<r2> ^set <p4>)
    (<p4> ^instance <p5>)
    (<p5> ^1 <c6>)
    (<n2> ^result <r1>)
    (<r1> ^set <p2>)
    (<p2> ^instance <p3>)
    (<p3> ^1 { < <c6> <c5> })
    -->
    (<p6> ^instance <i1> +)
    (<i1> ^1 <c6> + ^2 <c5> +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t29568-4
    :chunk
    (state <s1> ^retrieve-game nine-holes184)
    -->
    (<s1> ^retrieve-handle place-block96 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t29568-3
    :chunk
    (state <s1> ^retrieve-game nine-holes184)
    -->
    (<s1> ^retrieve-handle three-in-a-row107 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t29568-2
    :chunk
    (state <s1> ^retrieve-game nine-holes184)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row115 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t29568-1
    :chunk
    (state <s1> ^retrieve-game nine-holes184)
    -->
    (<s1> ^retrieve-handle fly185 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t29552-1
    :chunk
    (state <s1> ^retrieve-handle fly185 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p16> + ^verb-structure <v2> +
           ^aname fly185 + ^handle fly185 +)
    (<p3> ^argnum 3 +)
    (<p16> ^conditions <n1> + ^conditions <c6> + ^conditions <c9> +
           ^aname fly185 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a6> +
           ^rtype set +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a6> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p15> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r7> ^set <r8> +)
    (<p15> ^num 0 +)
    (<c6> ^type attribute + ^name red1 + ^attribute color + ^result <r9> +
           ^parameter <p19> + ^negative false + ^args <a9> + ^rtype single +)
    (<r9> ^set <p17> +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category +
           ^result <r10> + ^parameter <p21> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r10> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p22> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r11> ^set <r12> +)
    (<p22> ^num 0 +)
    (<c9> ^type concept + ^name clear + ^attribute predicate + ^result <r13> +
           ^parameter <p25> + ^negative false + ^args <a12> + ^rtype single +)
    (<r13> ^set <p23> +)
    (<p25> ^1 <p24> + ^num 1 +)
    (<p24> ^type single + ^param-id 3 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name location + ^attribute category +
           ^result <r14> + ^parameter <p27> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r14> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a11> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r15> + ^parameter <p28> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r15> ^set <r16> +)
    (<p28> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t27354-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-4177)
    -->
    (<s1> ^retrieve-handle stack-block124 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t27354-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-4177)
    -->
    (<s1> ^retrieve-handle goal-default183 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t27347-1
    :chunk
    (state <s1> ^retrieve-handle goal-default183 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p8> + ^aname goal-default183 +
           ^handle goal-default183 +)
    (<p3> ^argnum 4 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname goal-default183 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name medium1 + ^attribute size + ^result <r3> +
           ^parameter <p14> + ^negative false + ^args <a4> + ^rtype single +)
    (<r3> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p16> + ^negative false + ^args <a3> + ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 3 +)
    (<p12> ^type single + ^param-id 4 +)
    (<a5> ^1 <c2> + ^2 <c5> + ^num 2 +)
    (<c1> ^type attribute + ^name small1 + ^attribute size + ^result <r12> +
           ^parameter <p28> + ^negative false + ^args <a12> + ^rtype single +)
    (<r12> ^set <p27> +)
    (<p28> ^num 0 +)
    (<a12> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name block + ^attribute category +
           ^result <r13> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r13> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p31> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p31> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r7> + ^parameter <p20> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r7> ^set <p18> +)
    (<p20> ^1 <p19> + ^2 <p21> + ^num 2 +)
    (<p19> ^type single + ^param-id 1 +)
    (<p21> ^type single + ^param-id 2 +)
    (<a9> ^1 <c6> + ^2 <c1> + ^num 2 +)
    (<c6> ^type attribute + ^name tiny1 + ^attribute size + ^result <r8> +
           ^parameter <p23> + ^negative false + ^args <a8> + ^rtype single +)
    (<r8> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category + ^result <r9> +
           ^parameter <p25> + ^negative false + ^args <a7> + ^rtype single +)
    (<r9> ^set <p24> +)
    (<p25> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p26> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r10> ^set <r11> +)
    (<p26> ^num 0 +)
    (<c5> ^type attribute + ^name large1 + ^attribute size + ^result <r17> +
           ^parameter <p36> + ^negative false + ^args <a15> + ^rtype single +)
    (<r17> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a15> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name block + ^attribute category +
           ^result <r18> + ^parameter <p38> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r18> ^set <p37> +)
    (<p38> ^num 0 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r19> + ^parameter <p39> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r19> ^set <r20> +)
    (<p39> ^num 0 +)
    (<n4> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r16> + ^parameter <p34> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r16> ^set <p32> +)
    (<p34> ^1 <p33> + ^num 1 +)
    (<p33> ^type single + ^param-id 4 +)
    (<a16> ^1 <c5> + ^2 <c13> + ^num 2 +)
    (<c13> ^type attribute + ^name blue1 + ^attribute color + ^result <r21> +
           ^parameter <p41> + ^negative false + ^args <a19> + ^rtype single +)
    (<r21> ^set <p40> +)
    (<p41> ^num 0 +)
    (<a19> ^1 <c14> + ^num 1 +)
    (<c14> ^type attribute + ^name location + ^attribute category +
           ^result <r22> + ^parameter <p43> + ^negative false + ^args <a18> +
           ^rtype single +)
    (<r22> ^set <p42> +)
    (<p43> ^num 0 +)
    (<a18> ^1 <c15> + ^num 1 +)
    (<c15> ^type attribute + ^name object + ^attribute primitive +
           ^result <r23> + ^parameter <p44> + ^negative false + ^args <a17> +
           ^rtype single +)
    (<r23> ^set <r24> +)
    (<p44> ^num 0 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t25380-2
    :chunk
    (state <s1> ^retrieve-game iso-five-puzzle166)
    -->
    (<s1> ^retrieve-handle slide-block2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t25380-1
    :chunk
    (state <s1> ^retrieve-game iso-five-puzzle166)
    -->
    (<s1> ^retrieve-handle goal-default168 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t25370-1
    :chunk
    (state <s1> ^retrieve-handle goal-default168 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default168 +
           ^handle goal-default168 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default168 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched171 + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 5 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t25260-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name matched171 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p8> +
           ^aname matched171 + ^handle matched171 +)
    (<p3> ^argnum 3 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname matched171 +)
    (<n1> ^type attribute-of + ^name value + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a1> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^2 <c3> + ^num 1 +)
    (<n2> ^type attribute-of + ^name value + ^result <r2> + ^parameter <p11> +
           ^negative false + ^args <a2> + ^rtype single +
           ^return-type number +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 3 +)
    (<p12> ^type single + ^param-id 1 +)
    (<a2> ^2 <c4> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p18> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p17> +)
    (<p18> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p19> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p19> ^num 0 +)
    (<c4> ^name object + ^attribute input-arg + ^result <r7> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <r8> +)
    (<p21> ^1 <p20> + ^num 1 +)
    (<p20> ^type single + ^param-id 1 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r3> + ^parameter <p15> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r3> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type single + ^param-id 2 +)
    (<p16> ^type single + ^param-id 1 +)
    (<a5> ^1 <c3> + ^2 <c4> + ^num 2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t23491-2
    :chunk
    (state <s1> ^retrieve-game world-blocks158)
    -->
    (<s1> ^retrieve-handle action-default161 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t23491-1
    :chunk
    (state <s1> ^retrieve-game world-blocks158)
    -->
    (<s1> ^retrieve-handle goal-default165 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t23484-1
    :chunk
    (state <s1> ^retrieve-handle goal-default165 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p12> + ^aname goal-default165 +
           ^handle goal-default165 +)
    (<p3> ^argnum 1 +)
    (<p12> ^conditions <n1> + ^conditions <n2> + ^aname goal-default165 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p26> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p26> ^type single + ^param-id 2 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name purple1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p10> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c1> ^type attribute + ^name blue1 + ^attribute color + ^result <r7> +
           ^parameter <p17> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p19> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p20> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p20> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p15> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p27> + ^num 2 +)
    (<p14> ^type single + ^param-id 1 +)
    (<p27> ^type single + ^param-id 3 +)
    (<a8> ^1 <c1> + ^2 <c7> + ^num 2 +)
    (<c7> ^type attribute + ^name yellow1 + ^attribute color + ^result <r11> +
           ^parameter <p22> + ^negative false + ^args <a11> + ^rtype single +)
    (<r11> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p25> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t23476-1
    :chunk
    (state <s1> ^retrieve-handle action-default161 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p9> + ^verb-structure <v2> +
           ^aname action-default161 + ^handle action-default161 +)
    (<p3> ^argnum 2 +)
    (<p9> ^conditions <c1> + ^conditions <c3> + ^aname action-default161 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a2> + ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r2> + ^parameter <p8> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<c3> ^type concept + ^name clear + ^attribute predicate + ^result <r3> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p12> ^1 <p11> + ^num 1 +)
    (<p11> ^type single + ^param-id 1 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p14> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p15> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p15> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t21852-4
    :chunk
    (state <s1> ^retrieve-game three-mens-morris150)
    -->
    (<s1> ^retrieve-handle place-block96 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t21852-3
    :chunk
    (state <s1> ^retrieve-game three-mens-morris150)
    -->
    (<s1> ^retrieve-handle three-in-a-row107 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t21852-2
    :chunk
    (state <s1> ^retrieve-game three-mens-morris150)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row115 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t21852-1
    :chunk
    (state <s1> ^retrieve-game three-mens-morris150)
    -->
    (<s1> ^retrieve-handle slide-adjacent151 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t21842-1
    :chunk
    (state <s1> ^retrieve-handle slide-adjacent151 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname slide-adjacent151 + ^handle slide-adjacent151 +)
    (<p3> ^argnum 4 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname slide-adjacent151 +)
    (<n1> ^type concept + ^name adjacent + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 2 +)
    (<p17> ^type single + ^param-id 4 +)
    (<a8> ^1 <c5> + ^2 <c1> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r14> + ^parameter <p28> + ^negative false + ^args <a14> +
           ^rtype set +)
    (<r14> ^set <p26> +)
    (<p28> ^1 <p27> + ^num 1 +)
    (<p27> ^type set + ^param-id 1 +)
    (<a14> ^1 <c9> + ^2 <c12> + ^num 2 +)
    (<c9> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p31> + ^negative false + ^args <a13> + ^rtype set +)
    (<r15> ^set <p29> +)
    (<p31> ^1 <p30> + ^num 1 +)
    (<p30> ^type set + ^param-id 1 +)
    (<a13> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name block + ^attribute category +
           ^result <r16> + ^parameter <p33> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r16> ^set <p32> +)
    (<p33> ^num 0 +)
    (<a12> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p34> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p34> ^num 0 +)
    (<c12> ^type attribute + ^name location + ^attribute category +
           ^result <r19> + ^parameter <p36> + ^negative false + ^args <a16> +
           ^rtype set +)
    (<r19> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a16> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r20> + ^parameter <p37> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r20> ^set <r21> +)
    (<p37> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk*justification-14241*t21199-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r2> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 1)
    (<c5> ^rtype set)
    (<c6> ^rtype set ^result <r1>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r2> ^set <p4>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <s2>)
   -{ (<s2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
   -{ (<s2> ^<elem> <e>)
     -{ (<n2> ^instance <instance1>)
        (<instance1> ^1 <e> ^2 <objb>)
        (<c5> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <v*2>)
        (<v*2> ^<elem2> <objb>)}}
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^1 <s2> +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t19331-3
    :chunk
    (state <s1> ^retrieve-game risk140)
    -->
    (<s1> ^retrieve-handle action-default145 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t19331-2
    :chunk
    (state <s1> ^retrieve-game risk140)
    -->
    (<s1> ^retrieve-handle goal-default147 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t19331-1
    :chunk
    (state <s1> ^retrieve-game risk140)
    -->
    (<s1> ^retrieve-handle failure-default149 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t19324-1
    :chunk
    (state <s1> ^retrieve-handle failure-default149 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname failure-default149 +
           ^handle failure-default149 +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n1> + ^aname failure-default149 +)
    (<n1> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t19316-1
    :chunk
    (state <s1> ^retrieve-handle goal-default147 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname goal-default147 +
           ^handle goal-default147 +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n1> + ^aname goal-default147 +)
    (<n1> ^type concept + ^name captured + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t19308-1
    :chunk
    (state <s1> ^retrieve-handle action-default145 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default145 + ^handle action-default145 +)
    (<p3> ^argnum 4 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname action-default145 +)
    (<n1> ^type state-pair + ^name near1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n3> ^type function + ^name count + ^result <r7> + ^parameter <p19> +
           ^negative false + ^args <a11> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r7> ^set <p17> +)
    (<p19> ^1 <p18> + ^2 <p20> + ^num 2 +)
    (<p18> ^type single + ^param-id 4 +)
    (<p20> ^type set + ^param-id 2 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r8> + ^parameter <p23> + ^negative false + ^args <a7> +
           ^rtype set +)
    (<r8> ^set <p21> +)
    (<p23> ^1 <p22> + ^2 <p24> + ^num 2 +)
    (<p22> ^type set + ^param-id 2 +)
    (<p24> ^type single + ^param-id 1 +)
    (<c4> ^type concept + ^name captured + ^attribute predicate +
           ^result <r12> + ^parameter <p29> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a10> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p31> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a9> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p32> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p32> ^num 0 +)
    (<a7> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r9> +
           ^parameter <p26> + ^negative false + ^args <a6> + ^rtype single +)
    (<r9> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p27> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r10> ^set <r11> +)
    (<p27> ^num 0 +)
    (<a11> ^2 <n2> + ^num 1 +)
    (<n4> ^type function + ^name greater + ^result <r6> + ^parameter <p16> +
           ^negative false + ^args <a12> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 4 +)
    (<a12> ^1 <n3> + ^2 <f1> + ^num 2 +)
    (<f1> ^name number + ^result <r16> + ^parameter <p33> + ^negative false +
           ^args <a12> + ^rtype single + ^return-type number +)
    (<r16> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 1 +)
    (<p33> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 3 + ^verb-name move1 + ^verb-prep move1 +)
}

sp {chunk*justification-12309*onc*t18262-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r3> ^name <c4>)
    (<a2> ^num 2 ^2 <f1> ^1 <n2>)
    (<p1> ^num 1)
    (<l1> ^game <g1>)
    (<r3> ^set <p4>)
    (<n2> ^result <r2>)
    (<r2> ^set <p2>)
    (<p2> ^instance <p3>)
    (<p3> ^1 <c6>)
    (<f1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i1>)
    (<i1> ^1 { < <c6> <c5> })
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^1 <c6> +)
}

sp {chunk*justification-12284*onc*t18257-2
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r3> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r2>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<r3> ^set <p5>)
    (<p5> ^instance <i3>)
    (<i3> ^2 <n4> ^1 <s2>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<s2> ^object <n5> +)
}

sp {chunk*justification-12272*t18257-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p1> ^result <r2> ^name <c3> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p1> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set)
    (<l1> ^game <g1>)
    (<r2> ^set <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <n2>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <s2> +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t17073-2
    :chunk
    (state <s1> ^retrieve-game blocks-world132)
    -->
    (<s1> ^retrieve-handle action-default135 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t17073-1
    :chunk
    (state <s1> ^retrieve-game blocks-world132)
    -->
    (<s1> ^retrieve-handle goal-default139 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t17066-1
    :chunk
    (state <s1> ^retrieve-handle action-default135 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p9> + ^verb-structure <v2> +
           ^aname action-default135 + ^handle action-default135 +)
    (<p3> ^argnum 2 +)
    (<p9> ^conditions <c1> + ^conditions <c3> + ^aname action-default135 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a2> + ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r2> + ^parameter <p8> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<c3> ^type concept + ^name clear + ^attribute predicate + ^result <r3> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p12> ^1 <p11> + ^num 1 +)
    (<p11> ^type single + ^param-id 1 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p14> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p15> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p15> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t17058-1
    :chunk
    (state <s1> ^retrieve-handle goal-default139 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p12> + ^aname goal-default139 +
           ^handle goal-default139 +)
    (<p3> ^argnum 1 +)
    (<p12> ^conditions <n1> + ^conditions <n2> + ^aname goal-default139 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name green1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p10> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p17> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p19> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p20> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p20> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p15> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p15> ^1 <p14> + ^num 1 +)
    (<p14> ^type single + ^param-id 1 +)
    (<a8> ^1 <c1> + ^2 <c7> + ^num 2 +)
    (<c7> ^type attribute + ^name orange1 + ^attribute color + ^result <r11> +
           ^parameter <p22> + ^negative false + ^args <a11> + ^rtype single +)
    (<r11> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p25> ^num 0 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t15434-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-3123)
    -->
    (<s1> ^retrieve-handle stack-block124 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t15434-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-3123)
    -->
    (<s1> ^retrieve-handle goal-default131 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t15419-1
    :chunk
    (state <s1> ^retrieve-handle goal-default131 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p12> + ^aname goal-default131 +
           ^handle goal-default131 +)
    (<p3> ^argnum 3 +)
    (<p12> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname goal-default131 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name blue1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c1> ^type attribute + ^name large1 + ^attribute size + ^result <r7> +
           ^parameter <p18> + ^negative false + ^args <a8> + ^rtype single +)
    (<r7> ^set <p17> +)
    (<p18> ^num 0 +)
    (<a8> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p20> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a7> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p21> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p21> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p15> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type single + ^param-id 2 +)
    (<p16> ^type single + ^param-id 3 +)
    (<a5> ^1 <c5> + ^2 <c1> + ^num 2 +)
    (<c5> ^type attribute + ^name medium1 + ^attribute size + ^result <r16> +
           ^parameter <p32> + ^negative false + ^args <a15> + ^rtype single +)
    (<r16> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a15> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name block + ^attribute category +
           ^result <r17> + ^parameter <p34> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r17> ^set <p33> +)
    (<p34> ^num 0 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r18> + ^parameter <p35> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r18> ^set <r19> +)
    (<p35> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r11> ^set <p22> +)
    (<p24> ^1 <p23> + ^2 <p25> + ^num 2 +)
    (<p23> ^type single + ^param-id 1 +)
    (<p25> ^type single + ^param-id 2 +)
    (<a12> ^1 <c8> + ^2 <c5> + ^num 2 +)
    (<c8> ^type attribute + ^name small1 + ^attribute size + ^result <r12> +
           ^parameter <p27> + ^negative false + ^args <a11> + ^rtype single +)
    (<r12> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a11> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name block + ^attribute category +
           ^result <r13> + ^parameter <p29> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r13> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a10> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p30> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p30> ^num 0 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t13280-3
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe95)
    -->
    (<s1> ^retrieve-handle place-block96 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t13280-2
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe95)
    -->
    (<s1> ^retrieve-handle three-in-a-row107 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t13280-1
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe95)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row115 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t13273-1
    :chunk
    (state <s1> ^retrieve-handle enemy-3-in-a-row115 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p4> + ^aname enemy-3-in-a-row115 +
           ^handle enemy-3-in-a-row115 +)
    (<p3> ^argnum 2 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname enemy-3-in-a-row115 +)
    (<n1> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^num 1 +)
    (<p10> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^num 1 +)
    (<c1> ^type state-pair + ^name linear + ^attribute preposition +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 2 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a5> ^2 <n1> + ^num 1 +)
    (<n3> ^name number + ^result <r7> + ^parameter <p19> + ^negative false +
           ^args <a6> + ^rtype single + ^return-type number +)
    (<r7> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 3 +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t13265-1
    :chunk
    (state <s1> ^retrieve-handle place-block96 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p10> + ^verb-structure <v2> +
           ^aname place-block96 + ^handle place-block96 +)
    (<p3> ^argnum 2 +)
    (<p10> ^conditions <c1> + ^conditions <c4> + ^aname place-block96 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a3> + ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p8> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p9> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p9> ^num 0 +)
    (<c4> ^type concept + ^name free + ^attribute predicate + ^result <r5> +
           ^parameter <p13> + ^negative false + ^args <a7> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p13> ^1 <p12> + ^num 1 +)
    (<p12> ^type single + ^param-id 1 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r6> +
           ^parameter <p15> + ^negative false + ^args <a6> + ^rtype single +)
    (<r6> ^set <p14> +)
    (<p15> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r7> +
           ^parameter <p17> + ^negative false + ^args <a5> + ^rtype single +)
    (<r7> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a5> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p18> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p18> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t13257-1
    :chunk
    (state <s1> ^retrieve-handle three-in-a-row107 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p4> + ^aname three-in-a-row107 +
           ^handle three-in-a-row107 +)
    (<p3> ^argnum 2 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname three-in-a-row107 +)
    (<n1> ^type concept + ^name captured + ^attribute predicate +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^num 1 +)
    (<p10> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^num 1 +)
    (<c1> ^type state-pair + ^name linear + ^attribute preposition +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 2 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a5> ^2 <n1> + ^num 1 +)
    (<n3> ^name number + ^result <r7> + ^parameter <p19> + ^negative false +
           ^args <a6> + ^rtype single + ^return-type number +)
    (<r7> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 3 +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t13147-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name occupied ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p14> +
           ^aname occupied + ^handle occupied +)
    (<p3> ^argnum 1 +)
    (<p14> ^conditions <n2> + ^aname occupied +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c2> + ^2 <c3> + ^num 2 +)
    (<c2> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c3> ^type attribute + ^name blue1 + ^attribute color + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a5> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p13> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r6> ^set <r7> +)
    (<p13> ^num 0 +)
}

sp {chunk*justification-8148*t11907-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <c4>)
    (<c4> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r1> ^attribute <c5>)
    (<a2> ^num 1 ^1 <c6>)
    (<c6> -^rtype set)
    (<p2> ^num { < 2 <c7> })
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^1 <s2>)
   -{ (<s2> ^<elem> <obja>)
     -{ (<c6> ^result <r*1>)
        (<r*1> ^set <s*3>)
        (<s*3> ^instance <i*1>)
        (<i*1> ^1 <obja>)}}
   -{ (<s2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
    (<r1> ^set <p3>)
    -->
    (<p3> ^instance <i1> +)
    (<i1> ^1 <s2> +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t11898-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name captured ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p14> +
           ^aname captured + ^handle captured +)
    (<p3> ^argnum 1 +)
    (<p14> ^conditions <n2> + ^aname captured +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c2> + ^2 <c3> + ^num 2 +)
    (<c2> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c3> ^type attribute + ^name red1 + ^attribute color + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a5> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p13> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r6> ^set <r7> +)
    (<p13> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t10605-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name free ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p12> +
           ^aname free + ^handle free +)
    (<p3> ^argnum 1 +)
    (<p12> ^conditions <n1> + ^aname free +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p10> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p11> ^num 0 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t9096-6
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans55)
    -->
    (<s1> ^retrieve-handle action-default67 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t9096-5
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans55)
    -->
    (<s1> ^retrieve-handle action-default79 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t9096-4
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans55)
    -->
    (<s1> ^retrieve-handle action-default83 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t9096-3
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans55)
    -->
    (<s1> ^retrieve-handle failure-default87 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t9096-2
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans55)
    -->
    (<s1> ^retrieve-handle failure-default91 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t9096-1
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans55)
    -->
    (<s1> ^retrieve-handle all-crossed92 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t9089-1
    :chunk
    (state <s1> ^retrieve-handle action-default79 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p11> + ^verb-structure <v2> +
           ^aname action-default79 + ^handle action-default79 +)
    (<p3> ^argnum 2 +)
    (<p11> ^conditions <c1> + ^conditions <c4> + ^aname action-default79 +)
    (<c1> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name bank1 + ^attribute shape + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<c4> ^type attribute + ^name boat1 + ^attribute shape + ^result <r4> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r4> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type single + ^param-id 1 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r5> ^set <p15> +)
    (<p16> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t9081-1
    :chunk
    (state <s1> ^retrieve-handle failure-default91 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^aname failure-default91 +
           ^handle failure-default91 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname failure-default91 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name green1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name bank1 + ^attribute shape + ^result <r12> +
           ^parameter <p26> + ^negative false + ^args <a10> + ^rtype single +)
    (<r12> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p28> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <p27> +)
    (<p28> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 3 +)
    (<p17> ^type single + ^param-id 2 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name yellow1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t9073-1
    :chunk
    (state <s1> ^retrieve-handle action-default83 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p15> + ^verb-structure <v2> +
           ^aname action-default83 + ^handle action-default83 +)
    (<p3> ^argnum 3 +)
    (<p15> ^conditions <n1> + ^conditions <c5> + ^aname action-default83 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type attribute + ^name boat1 + ^attribute shape + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<c5> ^type concept + ^name current + ^attribute predicate +
           ^result <r7> + ^parameter <p18> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r7> ^set <p16> +)
    (<p18> ^1 <p17> + ^num 1 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a8> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name bank1 + ^attribute shape + ^result <r8> +
           ^parameter <p20> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a7> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <p21> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t9065-1
    :chunk
    (state <s1> ^retrieve-handle all-crossed92 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p17> + ^aname all-crossed92 +
           ^handle all-crossed92 +)
    (<p3> ^argnum 1 +)
    (<p17> ^conditions <n1> + ^aname all-crossed92 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type attribute + ^name destination1 + ^attribute name +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name bank1 + ^attribute shape + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t9057-1
    :chunk
    (state <s1> ^retrieve-handle failure-default87 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^aname failure-default87 +
           ^handle failure-default87 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname failure-default87 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name yellow1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name bank1 + ^attribute shape + ^result <r12> +
           ^parameter <p26> + ^negative false + ^args <a10> + ^rtype single +)
    (<r12> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p28> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <p27> +)
    (<p28> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 1 +)
    (<p17> ^type single + ^param-id 2 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t9049-1
    :chunk
    (state <s1> ^retrieve-handle action-default67 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^verb-structure <v2> +
           ^aname action-default67 + ^handle action-default67 +)
    (<p3> ^argnum 3 +)
    (<p17> ^conditions <n1> + ^conditions <c6> + ^aname action-default67 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type concept + ^name current + ^attribute predicate +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name bank1 + ^attribute shape + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
    (<c6> ^type concept + ^name clear + ^attribute predicate + ^result <r8> +
           ^parameter <p20> + ^negative false + ^args <a9> + ^rtype single +)
    (<r8> ^set <p18> +)
    (<p20> ^1 <p19> + ^num 1 +)
    (<p19> ^type single + ^param-id 3 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name boat1 + ^attribute shape + ^result <r9> +
           ^parameter <p22> + ^negative false + ^args <a8> + ^rtype single +)
    (<r9> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p24> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r10> ^set <p23> +)
    (<p24> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk*justification-6152*t8939-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r2> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 1)
    (<c5> -^rtype set)
    (<c6> ^rtype set ^result <r1>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r2> ^set <p4>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <s2>)
   -{ (<s2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
   -{ (<s2> ^<elem> <e>)
     -{ (<n2> ^instance <instance1>)
        (<instance1> ^1 <e> ^2 <objb>)
        (<c5> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <objb>)}}
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^1 <s2> +)
}

sp {chunk*justification-6118*onc*t8933-2
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <c3>)
    (<c3> ^rtype set ^type attribute ^args <a2> ^negative <c4> ^parameter <p1>
          ^result <r1> ^name <c6> ^attribute <c7>)
    (<a2> ^1 <c5>)
    (<c5> -^rtype set ^result <r2>)
    (<l1> ^game <g1>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i2>)
    (<i2> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^2 <c6> ^3 <c7> ^1 <s2>)
    (<p3> ^<c7> <c6>)
    -->
    (<s2> ^object <n1> +)
}

sp {chunk*justification-6112*t8933-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <c3>)
    (<c3> ^rtype set ^type attribute ^args <a2> ^negative <c4> ^parameter <p1>
          ^result <r1> ^name <c6> ^attribute <c7>)
    (<a2> ^1 <c5>)
    (<c5> -^rtype set)
    (<l1> ^game <g1>)
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^2 <c6> + ^3 <c7> + ^1 <s2> +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t6257-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name opposite ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p13> +
           ^aname opposite + ^handle opposite +)
    (<p3> ^argnum 1 +)
    (<p13> ^conditions <n1> + ^aname opposite +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name boat1 + ^attribute shape + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t5433-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name current ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p13> +
           ^aname current + ^handle current +)
    (<p3> ^argnum 1 +)
    (<p13> ^conditions <n1> + ^aname current +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name boat1 + ^attribute shape + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
}

sp {chunk*justification-3230*t5092-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype single ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r4> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r2>)
    (<p2> ^num { < 2 <c7> })
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<r4> ^set <p4>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <n5> +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t4059-2
    :chunk
    (state <s1> ^retrieve-game five-puzzle1)
    -->
    (<s1> ^retrieve-handle slide-block2 +)
}

sp {chunk-multi*chunk-game-impasse*apply*complete*snc*t4059-1
    :chunk
    (state <s1> ^retrieve-game five-puzzle1)
    -->
    (<s1> ^retrieve-handle goal-default54 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t4052-1
    :chunk
    (state <s1> ^retrieve-handle goal-default54 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default54 +
           ^handle goal-default54 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default54 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 5 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t4044-1
    :chunk
    (state <s1> ^retrieve-handle slide-block2 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname slide-block2 + ^handle slide-block2 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname slide-block2 +)
    (<n1> ^type concept + ^name adjacent + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r10> + ^parameter <p22> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r10> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p23> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r11> ^set <r12> +)
    (<p23> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 1 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a7> ^1 <c5> + ^2 <c1> + ^num 2 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p20> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p20> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk*justification-2681*t3934-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function soar-count ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r2> ^name <c4>)
    (<a2> ^num 1 ^2 <c5>)
    (<p1> ^num 2)
    (<c5> ^rtype set ^result <r1>)
    (<l1> ^game <g1>)
    (<r2> ^set <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <s2>)
   -{ (<s2> -^<something> <s*3>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<p3> ^instance <p4> +)
    (<p4> ^1 (size <s2>) + ^2 <s2> +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t3925-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name matched ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p8> +
           ^aname matched + ^handle matched +)
    (<p3> ^argnum 3 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname matched +)
    (<n1> ^type attribute-of + ^name color + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a1> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^2 <c3> + ^num 1 +)
    (<n2> ^type attribute-of + ^name color + ^result <r2> + ^parameter <p11> +
           ^negative false + ^args <a2> + ^rtype single +
           ^return-type number +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 3 +)
    (<p12> ^type single + ^param-id 1 +)
    (<a2> ^2 <c4> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p18> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p17> +)
    (<p18> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p19> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p19> ^num 0 +)
    (<c4> ^name object + ^attribute input-arg + ^result <r7> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <r8> +)
    (<p21> ^1 <p20> + ^num 1 +)
    (<p20> ^type single + ^param-id 1 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r3> + ^parameter <p15> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r3> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type single + ^param-id 2 +)
    (<p16> ^type single + ^param-id 1 +)
    (<a5> ^1 <c3> + ^2 <c4> + ^num 2 +)
}

sp {chunk*justification-2378*t3562-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^type attribute-of ^args <a2> ^parameter <p1> ^negative <c3>
          ^result <r1> ^name <c4>)
    (<a2> ^num 1 ^2 <c5>)
    (<p1> ^num 2)
    (<c5> -^rtype set ^result <r2>)
    (<l1> ^game <g1>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p4>)
    (<r1> ^set <p2>)
    (<p4> ^<c4> <c6>)
    -->
    (<p2> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <c6> +)
}

sp {chunk*justification-1795*t2710-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <c3>)
    (<c3> ^rtype single ^type attribute ^args <a2> ^negative <c4>
          ^parameter <p1> ^result <r3> ^name <c6> ^attribute <c7>)
    (<p1> ^num { < 2 <c8> })
    (<l1> ^game <g1>)
    (<a2> ^1 <c5>)
    (<r3> ^set <p3>)
    (<c5> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c7> <c6>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t2701-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p11> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n1> + ^aname clear +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t2691-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name adjacent ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p8> +
           ^aname adjacent + ^handle adjacent +)
    (<p3> ^argnum 2 +)
    (<p8> ^conditions <n2> + ^conditions <n3> + ^aname adjacent +)
    (<n2> ^type state-pair + ^name diagonal-with1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c2> + ^2 <c3> + ^num 2 +)
    (<c2> ^name object + ^attribute input-arg + ^result <r3> +
           ^parameter <p14> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <r4> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type single + ^param-id 1 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r5> +
           ^parameter <p16> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <r6> +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
    (<n3> ^type state-pair + ^name near1 + ^attribute prepositions +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 1 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a3> ^1 <c2> + ^2 <c3> + ^num 2 +)
}
sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3243-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle action-default22)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3243-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle goal-default28)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t3133-1
    :chunk
    (state <s1> ^retrieve-handle goal-default28 ^gtype goal)
    -->
    (<s1> ^goal <g1>)
    (<g1> ^potential-args <p1> ^parameter-set <p2> ^formated predicate
           ^primary-rtype single ^nlp-set <n1> ^aname goal-default28
           ^handle goal-default28)
    (<p2> ^argnum 3)
    (<n1> ^conditions <c1> ^conditions <c2> ^conditions <c3>
           ^aname goal-default28)
    (<c1> ^type state-pair ^attribute prepositions ^rtype single ^name on1
           ^negative false ^parameter <p3> ^args <a1> ^result <r1>)
    (<p3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> ^type single ^param-id 3)
    (<i2> ^type single ^param-id 2)
    (<a1> ^num 2 ^2 <i3> ^1 <i4>)
    (<r1> ^set <s2>)
    (<i3> ^type attribute ^rtype single ^attribute size ^name large1
           ^negative false ^args <a2> ^parameter <p6> ^result <r4>)
    (<a2> ^num 1 ^1 <i5>)
    (<i5> ^type attribute ^rtype single ^name block ^attribute category
           ^negative false ^parameter <p4> ^args <a3> ^result <r3>)
    (<p4> ^num 0)
    (<a3> ^num 1 ^1 <i6>)
    (<i6> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p5> ^result <r2> ^args <a4>)
    (<p5> ^num 0)
    (<r2> ^set <s3>)
    (<r3> ^set <s4>)
    (<p6> ^num 0)
    (<r4> ^set <s5>)
    (<c2> ^type state-pair ^attribute prepositions ^rtype single ^name on1
           ^negative false ^parameter <p7> ^args <a5> ^result <r8>)
    (<p7> ^num 1 ^1 <i7>)
    (<i7> ^type single ^param-id 3)
    (<a5> ^num 2 ^2 <i8> ^1 <i3>)
    (<i8> ^type attribute ^rtype single ^attribute color ^name blue1
           ^negative false ^args <a6> ^parameter <p10> ^result <r7>)
    (<a6> ^num 1 ^1 <i9>)
    (<i9> ^type attribute ^rtype single ^name location ^attribute category
           ^negative false ^parameter <p8> ^args <a7> ^result <r6>)
    (<p8> ^num 0)
    (<a7> ^num 1 ^1 <i10>)
    (<i10> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p9> ^result <r5> ^args <a8>)
    (<p9> ^num 0)
    (<r5> ^set <s6>)
    (<r6> ^set <s7>)
    (<p10> ^num 0)
    (<r7> ^set <s8>)
    (<r8> ^set <s9>)
    (<i4> ^type attribute ^rtype single ^attribute size ^name medium1
           ^negative false ^args <a9> ^parameter <p13> ^result <r11>)
    (<a9> ^num 1 ^1 <i11>)
    (<i11> ^type attribute ^rtype single ^name block ^attribute category
           ^negative false ^parameter <p11> ^args <a10> ^result <r10>)
    (<p11> ^num 0)
    (<a10> ^num 1 ^1 <i12>)
    (<i12> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p12> ^result <r9> ^args <a11>)
    (<p12> ^num 0)
    (<r9> ^set <s10>)
    (<r10> ^set <s11>)
    (<p13> ^num 0)
    (<r11> ^set <s12>)
    (<c3> ^type state-pair ^attribute prepositions ^rtype single ^name on1
           ^negative false ^parameter <p14> ^args <a12> ^result <r15>)
    (<p14> ^num 2 ^2 <i13> ^1 <i14>)
    (<i13> ^type single ^param-id 2)
    (<i14> ^type single ^param-id 1)
    (<a12> ^num 2 ^2 <i4> ^1 <i15>)
    (<i15> ^type attribute ^rtype single ^attribute size ^name small1
           ^negative false ^args <a13> ^parameter <p17> ^result <r14>)
    (<a13> ^num 1 ^1 <i16>)
    (<i16> ^type attribute ^rtype single ^name block ^attribute category
           ^negative false ^parameter <p15> ^args <a14> ^result <r13>)
    (<p15> ^num 0)
    (<a14> ^num 1 ^1 <i17>)
    (<i17> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p16> ^result <r12> ^args <a15>)
    (<p16> ^num 0)
    (<r12> ^set <s13>)
    (<r13> ^set <s14>)
    (<p17> ^num 0)
    (<r14> ^set <s15>)
    (<r15> ^set <s16>)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t2106-1
    :chunk
    (state <s1> ^retrieve-handle action-default22 ^gtype action)
    -->
    (<s1> ^action <a1>)
    (<a1> ^potential-args <p1> ^parameter-set <p2> ^formated predicate
           ^primary-rtype single ^nlp-set <n1> ^verb-structure <v1>
           ^aname action-default22 ^handle action-default22)
    (<p2> ^argnum 2)
    (<n1> ^conditions <c1> ^aname action-default22)
    (<c1> ^name larger ^rtype single ^type concept ^attribute predicate
           ^negative false ^parameter <p3> ^args <a2> ^result <r6>)
    (<p3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> ^type single ^param-id 1)
    (<i2> ^type single ^param-id 2)
    (<a2> ^num 2 ^2 <i3> ^1 <i6>)
    (<i3> ^rtype single ^name clear ^type concept ^attribute predicate
           ^negative false ^args <a3> ^parameter <p6> ^result <r3>)
    (<a3> ^num 1 ^1 <i4>)
    (<i4> ^type attribute ^rtype single ^name block ^attribute category
           ^negative false ^parameter <p4> ^args <a4> ^result <r2>)
    (<p4> ^num 0)
    (<a4> ^num 1 ^1 <i5>)
    (<i5> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p5> ^result <r1> ^args <a5>)
    (<p5> ^num 0)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<p6> ^num 0)
    (<r3> ^set <s4>)
    (<i6> ^rtype single ^name clear ^type concept ^attribute predicate
           ^negative false ^args <a6> ^parameter <p8> ^result <r5>)
    (<a6> ^num 1 ^1 <i7>)
    (<i7> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p7> ^args <a7> ^result <r4>)
    (<p7> ^num 0)
    (<r4> ^set <s5>)
    (<p8> ^num 0)
    (<r5> ^set <s6>)
    (<r6> ^set <s7>)
    (<v1> ^1 <i8>)
    (<i8> ^verb-prep on1 ^verb-name move1 ^1 1 ^2 2)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1724-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name larger ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> ^gtype predicate)
    (<p1> ^link <c1> ^potential-args <p2> ^parameter-set <p3>
           ^formated predicate ^primary-rtype single ^nlp-set <n1>
           ^aname larger ^handle larger)
    (<p3> ^argnum 4)
    (<n1> ^conditions <c2> ^conditions <c3> ^conditions <c4> ^aname larger)
    (<c3> ^type attribute-of ^rtype single ^name volume ^negative false
           ^return-type number ^parameter <p4> ^args <a1> ^result <r2>)
    (<p4> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> ^type single ^param-id 2)
    (<i2> ^type single ^param-id 4)
    (<a1> ^num 1 ^2 <i3>)
    (<i3> ^attribute input-arg ^rtype single ^name object ^negative false
           ^parameter <p5> ^args <a2> ^result <r1>)
    (<p5> ^num 1 ^1 <i4>)
    (<i4> ^type single ^param-id 2)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<c2> ^type attribute-of ^rtype single ^name volume ^negative false
           ^return-type number ^parameter <p6> ^args <a3> ^result <r4>)
    (<p6> ^num 2 ^2 <i5> ^1 <i6>)
    (<i5> ^type single ^param-id 1)
    (<i6> ^type single ^param-id 3)
    (<a3> ^num 1 ^2 <i7>)
    (<i7> ^attribute input-arg ^rtype single ^name object ^negative false
           ^parameter <p7> ^args <a4> ^result <r3>)
    (<p7> ^num 1 ^1 <i8>)
    (<i8> ^type single ^param-id 1)
    (<r3> ^set <s4>)
    (<r4> ^set <s5>)
    (<c4> ^function soar-greater ^type function ^rtype single ^name greater
           ^negative false ^return-type number ^parameter <p8> ^args <a5>
           ^result <r5>)
    (<p8> ^num 2 ^2 <i9> ^1 <i10>)
    (<i9> ^type single ^param-id 4)
    (<i10> ^type single ^param-id 3)
    (<a5> ^num 2 ^2 <c3> ^1 <c2>)
    (<r5> ^set <s6>)
}

sp {chunk*justification-1344*t2091-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype single ^negative true ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r3> ^attribute <c4>)
    (<a2> ^num 2 ^1 <c5> ^2 <c7>)
    (<c5> -^rtype set ^result <r1>)
    (<p2> ^num { < 2 <c6> })
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r3> ^set <p3>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n2> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c7> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*justification-1307*t2085-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a2> ^<c1> <a2>
          ^world <n1>)
    (<a2> ^condition <c3>)
    (<c3> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <c4> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <a1>)
    (<l1> ^game <g1>)
    (<n1> ^objects <o1>)
    (<r1> ^set <p2>)
    (<o1> ^object <n2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}

sp {chunk*justification-936*t1460-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype single ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r5> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r3>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<r5> ^set <p3>)
    (<r3> ^set <r4>)
    (<r4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<p3> ^instance <i3> +)
    (<i3> ^2 <n4> + ^1 <n5> +)
}

sp {chunk*justification-626*t1454-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype single ^negative true ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r5> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r3>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r5> ^set <p3>)
    (<r3> ^set <r4>)
    (<r4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 { <> <n5> <n4> })
   -{ (<n2> ^instance <instance1>)
      (<instance1> ^2 <n4> ^1 <n5>)}
    -->
    (<p3> ^instance <i3> +)
    (<i3> ^2 <n4> + ^1 <n5> +)
}
