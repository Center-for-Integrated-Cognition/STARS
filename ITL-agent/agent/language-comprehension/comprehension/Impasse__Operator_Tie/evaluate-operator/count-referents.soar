sp {evaluate-operator*propose*count-referents
   (state <s> ^name evaluate-operator
              ^segment <seg>)
   (<seg> -^new-constraint <nc>
          -^not-merged-receiver <receiver>)
  -{(<seg> ^last-merge <lm>)
    (<lm> ^assigner.parent-receiver <a1>
          ^receiver <r1>)
    (<a1> ^structure-type DP
         -^ground-tested <r1>)}
-->
   (<s> ^operator <op> + =)
   (<op> ^name count-referents)
}


sp {evaluate-operator*apply*count-referents*0
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> -^referent
          -^structure-type << V VP G GP >>)
-->
   (<e> ^final-referent-count 0)
}

sp {evaluate-operator*apply*count-referents*1
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^referent <sg>
         -^referent <> <sg>)
-->
   (<e> ^final-referent-count 1)
}

sp {evaluate-operator*apply*count-referents*2
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> }
         -^referent { <> <sg> <> <sg2>})
-->
   (<e> ^final-referent-count 2)
}

sp {evaluate-operator*apply*count-referents*3
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>}
         -^referent { <> <sg> <> <sg2>  <> <sg3>})
-->
   (<e> ^final-referent-count 3)
}

sp {evaluate-operator*apply*count-referents*4
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>} { < <sg> < <sg2> < <sg3> <sg4>}
         -^referent { <> <sg> <> <sg2>  <> <sg3> <> <sg4> })
-->
   (<e> ^final-referent-count 4)
}

sp {evaluate-operator*apply*count-referents*5
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>}
                                { < <sg> < <sg2> < <sg3> <sg4>} { < <sg> < <sg2> < <sg3> < <sg4>})
-->
   (<e> ^final-referent-count 5)  # or more
}

#### For Verbs complements


sp {evaluate-operator*apply*count-grounded-verbs*0
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^<< complement complement2 >> <comp>
          ^structure-type << V VP G GP >>)
   (<comp> -^referent)
-->
   (<e> ^final-referent-count 0)
}

sp {evaluate-operator*apply*count-grounded-verbs*1
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^<< complement complement2 >> <comp>
          ^structure-type << V VP G GP >>)
   (<comp> ^referent <sg>
          -^referent <> <sg>)
-->
   (<e> ^final-referent-count 1)
}

sp {evaluate-operator*apply*count-grounded-verbs*2
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^<< complement complement2 >> <comp>
          ^structure-type << V VP G GP >>)
   (<comp> ^referent <sg> { < <sg> <sg2> }
          -^referent { <> <sg> <> <sg2>})
-->
   (<e> ^final-referent-count 2)
}

sp {evaluate-operator*apply*count-grounded-verbs*3
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^<< complement complement2 >> <comp>
          ^structure-type << V VP G GP >>)
   (<comp> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>}
          -^referent { <> <sg> <> <sg2>  <> <sg3>})
-->
   (<e> ^final-referent-count 3)
}

sp {evaluate-operator*apply*count-grounded-verbs*4
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^<< complement complement2 >> <comp>
          ^structure-type << V VP G GP >>)
   (<comp> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>} { < <sg> < <sg2> < <sg3> <sg4>}
          -^referent { <> <sg> <> <sg2>  <> <sg3> <> <sg4> })
-->
   (<e> ^final-referent-count 4)
}

sp {evaluate-operator*apply*count-grounded-verbs*5
   (state <s> ^operator <o>
              ^superstate.operator.evaluation <e>
              ^assigner-parent-receiver <aps>)
   (<o> ^name count-referents)
   (<e> -^final-referent-count)
   (<aps> ^<< complement complement2 >> <comp>
          ^structure-type << V VP G GP >>)
   (<comp> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>}
                                 { < <sg> < <sg2> < <sg3> <sg4>} { < <sg> < <sg2> < <sg3> < <sg4>})
-->
   (<e> ^final-referent-count 5)  # or more
}