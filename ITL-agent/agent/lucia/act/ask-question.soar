##!
# @file
#
# @created p 20160408
# File: ask-question.soar
# Author: Peter 
# Created: 8 April 2016
#
# Desc: This operator will create a message
#       to ask a question from an action.
#
#        There are various kinds of questions, each with its own
#        propose and apply rules.
#
#       IN COME CASES, AT LEAST IN WhatIsRelation, IF THERE IS
#       AN OBJECT WITH MULTIPLE REFERENTS MULTIPLE MESSAGES ARE
#       GENERATED!!!
#


###################     WhatIsObjectQuestion      ####################

#   Propose an operator to decide to ask a WhatIsObjectQuestion question
sp {act*propose*ask-question*what-is-object
   (state <s> ^problem-space act
              ^action <question>)
   (<question> ^action WHAT-IS-OBJECT-QUESTION
               ^object <object>)
-->
   (<s> ^operator <o> +)
   (<o> ^name ask-question
        ^type interpretation
        ^action <question>
        ^debug-info (concat |Ask a WhatIsObjectQuestion question.|))
}

#   Build a WhatIsRelation question message
sp {act*apply*ask-question*what-is-object
   (state <s> ^problem-space act
              ^operator <o>)
   (<o> ^name ask-question
        ^action <question>)
   (<question> ^action WHAT-IS-OBJECT-QUESTION
               ^object <object>
               ^next <next>)
   (<object> ^referent <object-ref>)
-->
   #    Create a message
   (<s> ^result <message>)
   (<message> ^message-type what-is-question
              ^arg1 <object-ref>)
   #   Go on to the next
   (<s> ^action <question> -
        ^action <next>)
}


###################     WhatIsRelation      ####################

#   Propose an operator to decide to ask a WhatIsRelation question
sp {act*propose*ask-question*what-is-relation
   (state <s> ^problem-space act
              ^action <question>)
   (<question> ^action WHAT-IS-QUESTION
               ^predicate <predicate>)
-->
   (<s> ^operator <o> +)
   (<o> ^name ask-question
        ^type interpretation
        ^action <question>
        ^debug-info (concat |Ask a WhatIsRelation question.|))
}

#   Build a WhatIsRelation question message
sp {act*apply*ask-question*what-is-relation
   (state <s> ^problem-space act
              ^operator <o>)
   (<o> ^name ask-question
        ^action <question>)
   (<question> ^action WHAT-IS-QUESTION
               ^predicate <predicate>
               ^next <next>)
   (<predicate> ^prep <prep>
                ^object.referent <object>)
-->
   #    Create a message
   (<s> ^result <message>)
   (<message> ^message-type what-is-question
              ^predicate <q-predicate>)
   (<q-predicate> ^item-type predicate
                  ^handle <prep>
                  ^2 <object>)
   #   Go on to the next
   (<s> ^action <question> -
        ^action <next>)
}


###################     WhereIsObject      ####################

#   Propose an operator to decide to ask a WhereIsObject question
sp {act*propose*ask-question*where-is-object
   (state <s> ^problem-space act
              ^action <question>)
   (<question> ^action WHERE-IS-QUESTION
               ^object <object>)
-->
   (<s> ^operator <o> +)
   (<o> ^name ask-question
        ^type interpretation
        ^action <question>
        ^debug-info (concat |Ask a WhereIsObject question.|))
}

#   Build a WhereIsObject question message
sp {act*apply*ask-question*where-is-object
   (state <s> ^problem-space act
              ^operator <o>)
   (<o> ^name ask-question
        ^action <question>)
   (<question> ^action WHERE-IS-QUESTION
               ^object <object>
               ^next <next>)
-->
   #    Create a message
   (<s> ^result <message>)
   (<message> ^message-type where-is-question
              ^arg1 <object>)
   #   Go on to the next
   (<s> ^action <question> -
        ^action <next>)
}


###################     ObjectIsClassQuestion      ####################

#   Propose an operator to decide to ask a ObjectIsClassQuestion question
sp {act*propose*ask-question*object-is-class
   (state <s> ^problem-space act
              ^action <question>)
   (<question> ^action OBJECT-IS-CLASS-QUESTION
               ^object <object>
               ^predicate <predicate>)
-->
   (<s> ^operator <o> +)
   (<o> ^name ask-question
        ^type interpretation
        ^action <question>
        ^debug-info (concat |Ask a ObjectIsClassQuestion question.|))
}

#   Build a ObjectIsClassQuestion question message
sp {act*apply*ask-question*object-is-class
   (state <s> ^problem-space act
              ^operator <o>)
   (<o> ^name ask-question
        ^action <question>)
   (<question> ^action OBJECT-IS-CLASS-QUESTION
               ^object <object>
               ^predicate <predicate>
               ^next <next>)
-->
   #    Create a message
   (<s> ^result <message>)
   (<message> ^message-type object-question
              ^arg1 <object>
              ^predicate <predicate>)
   #   Go on to the next
   (<s> ^action <question> -
        ^action <next>)
}


###################     ObjectIsRelationQuestion      ####################

#   Propose an operator to decide to ask a ObjectIsRelationQuestion question
sp {act*propose*ask-question*object-is-relation
   (state <s> ^problem-space act
              ^action <question>)
   (<question> ^action OBJECT-IS-RELATION-QUESTION
               ^object <object>
               ^relation <relation>)
-->
   (<s> ^operator <o> +)
   (<o> ^name ask-question
        ^type interpretation
        ^action <question>
        ^debug-info (concat |Ask a ObjectIsRelationQuestion question.|))
}

#   Build a ObjectIsRelationQuestion question message
sp {act*apply*ask-question*object-is-relation
   (state <s> ^problem-space act
              ^operator <o>)
   (<o> ^name ask-question
        ^action <question>)
   (<question> ^action OBJECT-IS-RELATION-QUESTION
               ^object <object>
               ^relation <relation>
               ^next <next>)
   #    Unpack the relation
   (<relation> ^prep <prep>
               ^object <prep-object>)
-->
   #    Create a message
   (<s> ^result <message>)
   (<message> ^message-type object-question
              ^arg1 <object>
              ^predicate <predicate>)
   #   Format the predicate
   (<predicate> ^item-type predicate
                ^handle <prep>
                ^2 <prep-object>)
   #   Go on to the next
   (<s> ^action <question> -
        ^action <next>)
}


###################     WhatClassIsObjectQuestion      ####################

#   Propose an operator to decide to ask a WhatClassIsObjectQuestion question
sp {act*propose*ask-question*what-class-is-object
   (state <s> ^problem-space act
              ^action <question>)
   (<question> ^action WHAT-CLASS-IS-OBJECT-QUESTION
               ^object <object>
               ^predicate <predicate>)
-->
   (<s> ^operator <o> +)
   (<o> ^name ask-question
        ^type interpretation
        ^action <question>
        ^debug-info (concat |Ask a WhatClassIsObjectQuestion question.|))
}

#   Build a WhatClassIsObjectQuestion question message
sp {act*apply*ask-question*what-class-is-object
   (state <s> ^problem-space act
              ^operator <o>)
   (<o> ^name ask-question
        ^action <question>)
   (<question> ^action WHAT-CLASS-IS-OBJECT-QUESTION
               ^object <object>
               ^predicate <predicate>
               ^next <next>)
-->
   #    Create a message
   (<s> ^result <message>)
   (<message> ^message-type predicate-question
              ^arg1 <object>
              ^predicate <predicate>)
   #   Go on to the next
   (<s> ^action <question> -
        ^action <next>)
}
