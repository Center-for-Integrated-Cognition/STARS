sp {create-condition*apply*create-args
   (state <s> ^name create-condition
   		  	  ^args <ar>
			  ^operator <o>)
   (<o> ^name create-args
   		^condition <c>)
-->
   (<c> ^args <ar>)
}
sp {create-condition*apply*create-args*number
   (state <s> ^name create-condition
   		  	  -^args
			  ^condition.name number
			  ^operator <o>)
   (<o> ^name create-args
   		^condition <c>)
-->
   (<c> ^args <ar>)
}
sp {create-condition*apply*create-args*numeric-between*function
   (state <s> ^name create-condition
			 -^args
			  ^superstate <ss>
     		  -^param1
         	  -^param2
			  -^equal-to.formatted
			  ^condition <co>
              ^clause <cl>
			  ^function <ff>
			  ^object-count <oc>
              ^operator <o>)
   (<o> ^name create-args)
   (<ss> ^object-count <oc>)
   (<cl> ^relation <r>)
   (<r> ^2 <r2> ^3 <r3> -^4)
   (<r2> ^number <num1>)
   (<r3> ^number <num2>)
-->
   (<cl> ^formatted <co> ^parameter-index <oc>)
   (<r> ^formatted <co>)
   (<ss> ^object-count <oc> -)
   (<ss> ^object-count (+ 3 <oc>))
   (<co> ^args <a> ^parameter <para> ^return-type number ^rtype single)
   (<a> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id (+ <oc> 1) ^type single)
   (<para3> ^param-id (+ <oc> 2) ^type single)
   (<p2> ^name number ^result.set.instance <i1> ^args <ax> ^parameter <parap> ^rtype single ^return-type number)
   (<p3> ^name number ^result.set.instance <i2> ^args <ax2> ^parameter <parap2> ^rtype single ^return-type number)
   (<i1> ^1 <num1>)
   (<i2> ^1 <num2>)
   (<parap> ^1 <parapg>)
   (<parapg> ^param-id (+ <oc> 1) ^type single)
   (<parap2> ^1 <parap2g>)
   (<parap2g> ^param-id (+ <oc> 2) ^type single)
}