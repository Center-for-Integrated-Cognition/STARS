#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-interjection
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^message-type {<type> << hello bye >>}
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-interjection
        ^type <type>)
}

sp {interpret-message*apply*interpret-interjection
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^operator <o>)
   (<o> ^name interpret-interjection
        ^type <type>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type generic-interjection
        ^parameters.message <type>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type interjection
          ^originator agent)
}

sp {dialog-event*propose*interjection-respond
   (state <s> ^name dialog-event
              ^purpose <p>)
   (<p> ^type generic-interjection ^parameters.message <type>)
-->
   (<s> ^operator <o> +)
   (<o> ^name interjection-respond
        ^type <type>)
}

sp {dialog-event*apply*interjection-respond
   (state <s> ^name dialog-event
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name interjection-respond
        ^type <type>)
-->
   (<status> ^performed.dialog-event <de>)
   (<de> ^type interjection
         ^originator agent)
   (<changes> ^outgoing-message <msg1>)
   (<msg1> ^type generic
           ^complete-message true
          ^fields.type <type>)
}


