#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Robot\ecg\r-people.ecg'.

#   ALICE construction
sp {comprehend-word*apply*lexical-access*ALICE-alice
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |alice|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ALICE
          ^is <a>
          ^orth |alice|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ProperName
          ^subcase-of Agent
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a ALICE)
   (<e-meaning> ^schema Alice
                ^target <meaning>)
}

#   Possessive construction
sp {comprehend-word*generalize-cxn*Possessive*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Possessive
          ^is <a>)
   (<a> -^a Possessive)
-->
   (<a> ^a Possessive)
   (<cxn> ^subcase-of Possessive -
          ^subcase-of Property)
}

#   ALICE-S construction
sp {comprehend-word*apply*lexical-access*ALICE-S-alice-s
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |alice's|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ALICE-S
          ^is <a>
          ^orth |alice's|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Possessive
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a ALICE-S)
   (<e-meaning> ^schema PossessiveProperty
                ^target <meaning>)
}

#   ALICE-S self.m.class <-- "owner" constraint
sp {comprehend-word*ALICE-S-constraint*self-m-class*ASSIGN*owner
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ALICE-S
          ^orth |alice's|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |owner| })
-->
   (<l-slot1> ^class <target> -
              ^class |owner|)
}

#   ALICE-S self.m.name <-- "person-alice1" constraint
sp {comprehend-word*ALICE-S-constraint*self-m-name*ASSIGN*person-alice1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ALICE-S
          ^orth |alice's|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |person-alice1| })
-->
   (<l-slot1> ^name <target> -
              ^name |person-alice1|)
}

#   ALICE-S self.m.possessive <-- "alices1" constraint
sp {comprehend-word*ALICE-S-constraint*self-m-possessive*ASSIGN*alices1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ALICE-S
          ^orth |alice's|
          ^m <l-slot1>)
   (<l-slot1> ^possessive { <target> <> |alices1| })
-->
   (<l-slot1> ^possessive <target> -
              ^possessive |alices1|)
}

#   BOB-S construction
sp {comprehend-word*apply*lexical-access*BOB-S-bob-s
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |bob's|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name BOB-S
          ^is <a>
          ^orth |bob's|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Possessive
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a BOB-S)
   (<e-meaning> ^schema PossessiveProperty
                ^target <meaning>)
}

#   BOB-S self.m.class <-- "owner" constraint
sp {comprehend-word*BOB-S-constraint*self-m-class*ASSIGN*owner
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BOB-S
          ^orth |bob's|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |owner| })
-->
   (<l-slot1> ^class <target> -
              ^class |owner|)
}

#   BOB-S self.m.name <-- "person-bob1" constraint
sp {comprehend-word*BOB-S-constraint*self-m-name*ASSIGN*person-bob1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BOB-S
          ^orth |bob's|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |person-bob1| })
-->
   (<l-slot1> ^name <target> -
              ^name |person-bob1|)
}

#   BOB-S self.m.possessive <-- "bobs1" constraint
sp {comprehend-word*BOB-S-constraint*self-m-possessive*ASSIGN*bobs1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BOB-S
          ^orth |bob's|
          ^m <l-slot1>)
   (<l-slot1> ^possessive { <target> <> |bobs1| })
-->
   (<l-slot1> ^possessive <target> -
              ^possessive |bobs1|)
}

#   CHARLIE-S construction
sp {comprehend-word*apply*lexical-access*CHARLIE-S-charlie-s
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |charlie's|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name CHARLIE-S
          ^is <a>
          ^orth |charlie's|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Possessive
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a CHARLIE-S)
   (<e-meaning> ^schema PossessiveProperty
                ^target <meaning>)
}

#   CHARLIE-S self.m.class <-- "owner" constraint
sp {comprehend-word*CHARLIE-S-constraint*self-m-class*ASSIGN*owner
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CHARLIE-S
          ^orth |charlie's|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |owner| })
-->
   (<l-slot1> ^class <target> -
              ^class |owner|)
}

#   CHARLIE-S self.m.name <-- "person-charlie1" constraint
sp {comprehend-word*CHARLIE-S-constraint*self-m-name*ASSIGN*person-charlie1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CHARLIE-S
          ^orth |charlie's|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |person-charlie1| })
-->
   (<l-slot1> ^name <target> -
              ^name |person-charlie1|)
}

#   CHARLIE-S self.m.possessive <-- "charlies1" constraint
sp {comprehend-word*CHARLIE-S-constraint*self-m-possessive*ASSIGN*charlies1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CHARLIE-S
          ^orth |charlie's|
          ^m <l-slot1>)
   (<l-slot1> ^possessive { <target> <> |charlies1| })
-->
   (<l-slot1> ^possessive <target> -
              ^possessive |charlies1|)
}

#   Alice schema
sp {comprehend-word*evoked-schema*Alice*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Alice
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^schema-name Alice
               ^is <a>
               ^name |Alice|
               ^constraint <c1>
               ^constraint <c2>
               ^constraint <c3>)
   (<a> ^a Alice)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<e2> ^schema KnownObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value person)
   (<c2> ^attr movable
         ^value false)
   (<c3> ^attr handle
         ^value alice1)
}

#   Alice schema
sp {comprehend-word*evoked-schema*Alice*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Alice
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^name |Alice|
               ^constraint <c1>
               ^constraint <c2>
               ^constraint <c3>)
   (<a> ^a Alice)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<e2> ^schema KnownObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value person)
   (<c2> ^attr movable
         ^value false)
   (<c3> ^attr handle
         ^value alice1)
}

#   PossessiveProperty schema
sp {comprehend-word*evoked-schema*PossessiveProperty*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema PossessiveProperty
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name PossessiveProperty
               ^is <a>
               ^possessive nil)
   (<a> ^a PossessiveProperty)
   (<e1> ^schema PropertyDescriptor
         ^target <e-target>)
}

#   PossessiveProperty schema
sp {comprehend-word*evoked-schema*PossessiveProperty*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema PossessiveProperty
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^possessive nil)
   (<a> ^a PossessiveProperty)
   (<e1> ^schema PropertyDescriptor
         ^target <e-target>)
}

