sp {create-condition*apply*create-type
   (state <s> ^name create-condition
   		  	  ^condition-type <h>
			  ^operator <o>)
   (<o> ^name create-type
   		^condition <c>)
-->
   (<c> ^type <h>)
}
sp {create-condition*apply*create-type*number
   (state <s> ^name create-condition
   		  	 -^condition-type <h>
			 -^equal-to <eq>
			  ^object-count <oc>
			  ^superstate <ss>
			  ^clause <c1>
			  ^operator <o>)
   (<o> ^name create-type)
   (<ss> ^object-count <oc>)
   (<c1> ^number <num1> -^{<x> <> number})
-->
   (<c1> ^formatted <co> ^parameter-index <oc>)
   (<ss> ^object-count <oc> -)
   (<ss> ^object-count (+ 1 <oc>))
   #(<ss> ^nlp <co>)  #JK no nlp
   (<co> ^name number ^result.set.instance <i1> ^args <ax> ^parameter <parap> ^rtype single ^return-type number)
   (<i1> ^1 <num1>)
}
sp {create-condition*apply*create-type*not-equal
   (state <s> ^name create-condition
              ^operator <o>
              ^condition <co>
              ^clause <c1>
              ^arg1 <f1>
              ^param1 <p1>
              ^not-equal-to <eq>
              ^superstate <ss>
             -^smem-result)
   (<f1> ^rtype <rtype1>)
   (<eq> ^formatted <f2> ^parameter-index <p2>)
   (<f2> ^rtype <rtype2>)
   (<o> ^name create-type)
 -{(<eq> ^formatted {<fff> > <f2>})}
-->
   (<c1> ^formatted <co>)
   #(<ss> ^nlp <co>)  #JK no nlp
   (<co> ^name not-equal ^args <aa> ^parameter <para> ^rtype <rtype1> ^return-type number ^type function ^function soar-not-equal)
   (<aa> ^1 <f1> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <p1> ^type <rtype1>) 
   (<para2> ^param-id <p2> ^type <rtype1>)
}