## if just successfully retreived a new receiver of a word (not word pair) check to see if
##   there is a construction that includes that.
sp {comprehension*propose*comprehend-construction*after-success-assigner
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^retrieved-stack <rs>
          ^current-word.processed true
         -^current-word.comprehend-completed true
          ^not-merged-receiver <c-item>              
          ^not-merged-receiver <p-item>
         -^failed-construction true)
   (<rs> ^item <c-item>
         ^prior.item { <> nil <p-item> })
  -(<c-item> ^lt.converts-to <dp>   # wait until it converts to its phrase type
            -^structure-type <dp>)
  -{(<seg> ^comprehension-structure <cs>)
    (<cs> ^type construction
          ^processed true)}
  -(<c-item> ^lt.structure CP)
 -{(<seg> ^construction-comprehended <cc>)
   (<cc> ^current-item <c-item>
         ^prior-item <p-item>)}
-->
   (<s> ^operator <op> + =)
   (<op> ^name comprehend-construction
         ^current-item <c-item>
         ^prior-item <p-item>)
}

## if the two most recent items are not merged and the newer one isn't going to merge with anything else or convert to a phrase

## This is syntactically equivalent to the previous one so it is a duplicate.
#sp {comprehension*propose*comprehend-construction
#   (state <s> ^name comprehension
#              ^segment <seg>)
#   (<seg> ^retrieved-stack <rs>
#          ^current-word.processed true
#          ^not-merged-receiver <c-item>
#         -^failed-construction true)
#   (<rs> ^item <c-item>
#         ^prior.item { <> nil <p-item> })
#  -{(<seg> ^not-merged-assigner.structure-type <p>)}
#   (<c-item> ^structure-type <p>
#            -^lt.converts-to )
#  -{(<seg> ^comprehension-structure <cs>)
#    (<cs> ^type construction
#          ^processed true)}
#  -(<c-item> ^lt.structure CP)
#-->
#   (<s> ^operator <op> + =)
#   (<op> ^name comprehend-construction
#         ^current-item <c-item>
#         ^prior-item <p-item>)
#}

sp {comprehension*propose*comprehend-construction*unknown
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^retrieved-stack <rs>
          ^current-word.processed true
         -^current-word.comprehend-completed true
          ^not-merged-receiver <c-item>              
          ^not-merged-receiver <p-item>
         -^failed-construction true)
   (<rs> ^item <c-item>
         ^prior.item { <> nil <p-item> })
  -{(<seg> ^not-merged-assigner.structure-type U)}
   (<c-item> -^structure-type
            -^lt.converts-to )
  -{(<seg> ^comprehension-structure <cs>)
    (<cs> ^type construction
          ^processed true)}
  -(<c-item> ^lt.structure CP)
-->
   (<s> ^operator <op> + =)
   (<op> ^name comprehend-construction
         ^current-item <c-item>
         ^prior-item <p-item>)
}


## if the two most recent items are not merged and the newer one is going to convert to a phrase but not for any assigner
sp {comprehension*propose*comprehend-construction2
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^retrieved-stack <rs>
          ^current-word.processed true
         -^current-word.comprehend-completed true
          ^not-merged-receiver <c-item>               
          ^not-merged-receiver <p-item>
         -^failed-construction true)
   (<rs> ^item <c-item>
         ^prior.item { <> nil <p-item> })
  -{(<seg> ^not-merged-assigner.structure-type <p>)}
  -{(<seg> ^not-merged-assigner.structure-type <dp>)}
   (<c-item> ^structure-type <p>
             ^lt.converts-to {<> CP <dp> })
  -{(<seg> ^comprehension-structure <cs>)
    (<cs> ^type construction
          ^processed true)}
  -(<c-item> ^lt.structure CP)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name comprehend-construction
         ^current-item <c-item>
         ^prior-item <p-item>)
}


## if the two most recent items are not merged and the newer one is going to convert to a phrase but not for any assigner
sp {comprehension*propose*comprehend-construction2*unknown
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^retrieved-stack <rs>
          ^current-word.processed true
         -^current-word.comprehend-completed true
          ^not-merged-receiver <c-item>              
          ^not-merged-receiver <p-item>
         -^failed-construction true)
   (<rs> ^item <c-item>
         ^prior.item { <> nil <p-item> })
  -{(<seg> ^not-merged-assigner.structure-type U)}
  -{(<seg> ^not-merged-assigner.structure-type <dp>)}
   (<c-item> -^structure-type
             ^lt.converts-to  {<> CP <dp> })
  -{(<seg> ^comprehension-structure <cs>)
    (<cs> ^type construction
          ^processed true)}
  -(<c-item> ^lt.structure CP)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name comprehend-construction
         ^current-item <c-item>
         ^prior-item <p-item>)
}


#### Failed merge on required assigner
sp {comprehension*propose*comprehend-construction*failed-merge
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^current-word.processed true
         -^current-word.comprehend-completed true
          ^retrieved-stack <rs>
          ^not-merged-assigner <ass>              
          ^not-merged-receiver <c-item>              
          ^not-merged-receiver <p-item>
         -^failed-construction true)
   (<rs> ^item <c-item>
         ^prior.item <p-item>)
  -{(<seg> ^comprehension-structure <cs>)
    (<cs> ^type construction
          ^processed true)}
   (<ass> ^failed merge)
-->
   (<s> ^operator <op> + =)
   (<op> ^name comprehend-construction
         ^failed-assigner <ass>
         ^current-item <c-item>
         ^prior-item <p-item>)
}

sp {comprehension*compare*comprehend-construction
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name comprehend-construction)
   (<op2> ^name next-word)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-word*comprehend-completion
  #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name merge)
   (<op2> ^name << comprehend-completion >>)
-->
   (<s> ^operator <op1> < <op2>)
}
 sp {comprehension*compare*merge*comprehend-construction*avoid-tie
   #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name merge 
          ^receiver <pi>)
   (<op2> ^name comprehend-construction 
          ^prior-item <pi>)
  -(<op2> ^current-item.structure-type CP-CONJ)  ### TEST JEL
-->
  (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction
 #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
  -{(<s> ^operator { <> <op1> <op3> } +)
    (<op3> ^name merge
           ^assigner.lt.delay-merge true)}   # avoid conflict with another merge
   (<op1> ^name merge 
          ^receiver <pi>
         -^assigner.lt.delay-merge true)
   (<op2> ^name comprehend-construction 
          ^prior-item <pi>)   
  -(<op2> ^current-item.structure-type CP-CONJ)  ### TEST JEL
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction4  ### TEST JEL
 #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name merge)
   (<op2> ^name comprehend-construction 
          ^current-item.structure-type CP-CONJ)
-->
   (<s> ^operator <op1> -)
}
### 
#sp {comprehension*compare*merge*comprehend-construction*avoid-tie
# #:interrupt
#   (state <s> ^name comprehension
#              ^operator <op1> +
#                        <op2> +)
#   (<op1> ^name merge 
#          ^receiver <pi>)
#   (<op2> ^name comprehend-construction 
#          ^prior-item <pi>)
#-->
#   (<s> ^operator <op1> = <op2>)
#}
#
#sp {comprehension*compare*merge*comprehend-construction
# #:interrupt
#   (state <s> ^name comprehension
#              ^operator <op1> +
#                        <op2> +)
#  -{(<s> ^operator <op3> +)
#    (<op3> ^name merge
#           ^assigner.lt.delay-merge true)}   # avoid conflict with another merge
#   (<op1> ^name merge 
#          ^receiver <pi>
#         -^assigner.lt.delay-merge true)
#   (<op2> ^name << comprehend-construction >>
#          ^prior-item <pi>)
#-->
#   (<s> ^operator <op1> > <op2>)
#}

sp {comprehension*compare*merge*comprehend-construction2
 #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name merge 
          ^receiver <pi>
          ^assigner.lt.delay-merge true)
   (<op2> ^name << comprehend-construction >>
          ^prior-item <pi>
         -^current-item.lt.delay-retry true)
-->
   (<s> ^operator <op1> -) #(<s> ^operator <op1> < <op2>)  #Mod 9/8/2016 to avoid conflict
}
sp {comprehension*compare*merge*comprehend-construction3
 #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name merge 
          ^receiver <pi>
          ^assigner.lt.delay-merge true)
   (<op2> ^name << comprehend-construction >>
          ^prior-item <pi>
          ^current-item.lt.delay-retry true)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction*prefer-merge-to-terminal
 #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name merge)
   (<op2> ^name comprehend-construction 
          ^current-item.structure-type T)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction*diff*pi
#:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name merge 
          ^receiver <pi>)
   (<op2> ^name << comprehend-construction >>
         -^prior-item <pi>
    )#     -^current-item <pi>)
-->
   (<s> ^operator <op1> > <op2>)
}

#sp {comprehension*compare*merge*comprehend-construction*diff*citem
##:interrupt
#   (state <s> ^name comprehension
#              ^operator <op1> +
#                        <op2> +)
#   (<op1> ^name merge 
#          ^receiver <pi>)
#   (<op2> ^name << comprehend-construction >>
#          ^current-item <pi>)
#-->
#   (<s> ^operator <op1> < <op2>)
#}
sp {comprehension*compare*comprehend-construction*process-semantics
  #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
              ^operator <op2> +)
   (<op1> ^name comprehend-construction)
   (<op2> ^name << process-semantics >>)
-->
   (<s> ^operator <op1> < <op2>)
}


sp {comprehension*compare*comprehend-construction*process-phrase-end
  #:interrupt
   (state <s> ^name comprehension
              ^operator <op1> +
              ^operator <op2> +)
   (<op1> ^name comprehend-construction)
   (<op2> ^name << process-phrase-end >>)
-->
   (<s> ^operator <op1> < <op2>)
}

