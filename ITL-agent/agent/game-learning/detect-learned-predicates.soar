sp {detect-learned-predicates*elaborate*problem-space
   (state <s> ^detect-predicate <pred>
              ^top-state.world <world2>)
   (<pred> ^copy-type <ct>)
-->
   (<s> ^flag detect-learned-predicates ^simulated true ^problem-space <ps> ^list <l>)
   (<l> ^game <g>)
   (<pred> ^results <r>)
   (<ps> ^world <world> ^name action)
   (<world> ^source <world2>
            ^copy-type <ct>)
}

sp {detect-learned-predicates*elaborate*problem-space*default*copy-type
   (state <s> ^detect-predicate <pred>
              ^top-state.world <world2>)
   (<pred> -^copy-type)
-->
   (<s> ^flag detect-learned-predicates ^simulated true ^problem-space <ps> ^list <l>)
   (<l> ^game <g>)
   (<pred> ^results <r>)
   (<ps> ^world <world> ^name action)
   (<world> ^source <world2>
            ^copy-type shallow)
}

sp {elaborate*detect-learned-predicates*complete
   (state <s> ^flag detect-learned-predicates
              ^predicate <p>
              ^detect-predicate <pred>)
   (<pred> ^name <name> ^results <r>) 
   (<p> ^handle <name> ^parameter-set.tested calculate6)
-->
   (<pred> ^complete true)
}

sp {elaborate*detect-learned-predicates*actiongoalfail*complete
   (state <s> ^flag detect-learned-predicates
              ^<gtype> <p>
              ^detect-predicate <pred>)
   (<pred> ^name <name> ^results <r> ^type {<gtype> << goal action failure >>} )
   (<p> ^parameter-set.tested calculate6)
-->
   (<pred> ^complete true)
}

sp {elaborate*detect-learned-predicates*results
   (state <s> ^flag detect-learned-predicates
              ^<gtype> <p>
			  ^gtype <gtype>
              ^detect-predicate <pred>)
   (<pred> ^name <name> ^results <r>)
   (<p> ^handle <name> ^parameter-set.set <i>)
-->
   (<r> ^instance <i>)
}

sp {elaborate*detect-learned-predicates*retrieve-handle
   (state <s> ^flag detect-learned-predicates
              ^detect-predicate <pred>)
   (<pred> ^name <name> ^type {<gtype> << goal action failure >>})
-->
    (<s> ^gtype <gtype> ^retrieve-handle <name>)
}
    
sp {elaborate*detect-learned-predicates*unary
   (state <s> ^flag detect-learned-predicates
              ^detect-predicate <pred>)
   (<pred> ^name <name> ^type unary)
-->
   (<s> ^gtype predicate ^predicate <g2>)
    (<g2> ^condition <c1> ^back-link <pred>)
    (<c1> ^name <name> ^type concept ^negative false ^attribute predicate ^args <a1> ^rtype single ^result.set <res3>)
    (<a1> ^num 1 ^1 <c2>)
    (<c2> ^name object ^args <a3> ^negative false ^result.set <res> ^rtype single ^parameter.num 0 ^type attribute ^attribute primitive)
}

sp {elaborate*detect-learned-predicates*binary
   (state <s> ^flag detect-learned-predicates
              ^detect-predicate <pred>)
   (<pred> ^name <name> ^type binary)
-->
   (<s> ^gtype predicate ^predicate <g2>)
    (<g2> ^condition <c1> ^back-link <pred>)
    (<c1> ^name <name> ^type concept ^negative false ^attribute predicate ^args <a1> ^rtype single ^result.set <res3>)
    (<a1> ^num 2 ^1 <c2> ^2 <c3>)
    (<c2> ^name object ^args <a3> ^negative false ^result.set <res> ^rtype single ^parameter.num 0 ^type attribute ^attribute primitive)
	(<c3> ^name object ^args <a5> ^negative false ^result.set <res4> ^rtype single ^parameter.num 0 ^type attribute ^attribute primitive)
}

sp {detect-learned-predicates*elaborate*sub-conditions
   (state <s> ^flag detect-learned-predicates
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}

sp {detect-learned-predicates*elaborate*sub-conditions*predicate
   (state <s> ^flag detect-learned-predicates
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {detect-learned-predicates*elaborate*input-args
   (state <s> ^flag detect-learned-predicates
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype <rtype>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

sp {detect-learned-predicates*elaborate*input-args*noparam
   (state <s> ^flag detect-learned-predicates
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype> ^parameter.num 0)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^condition <c5>)
   (<c5> ^args.<argn> <c> ^parameter.<argn> <param>)#look at parent for param-id
   (<param> ^param-id <a1>)
   (<c> ^attribute input-arg ^parameter.num 0 ^rtype <rtype>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

sp {detect-learned-predicates*elaborate*input-args*set-to-single*objects
   (state <s> ^flag detect-learned-predicates
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set)# ^parameter.num 0)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype single)
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}