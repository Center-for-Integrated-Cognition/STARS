### !!!!!! DEPRICATED !!!!!!! ###
# (We learn this with sweet chunking rules now)

sp {learn-subtask-proposal*elaborate*constraint
   (state <s> ^name learn-subtask-proposal
              ^subtask-info.procedural.constraints <cons>)
   (<cons> ^<con-name> <con>)
-->
   (<s> ^constraint <con>)
   (<con> ^name <con-name>)
}

sp {learn-subtask-proposal*elaborate*constraint*argument
   (state <s> ^name learn-subtask-proposal
              ^subtask-info.procedural.<arg-name> <arg>
              ^constraint <con>)
   (<con> ^name <arg-name>)
-->
   (<con> ^arg <arg>)
}

sp {learn-subtask-proposal*elaborate*constraint*satisfied*predicate*object-match*negative*current-location
   (state <s> ^name learn-subtask-proposal
              ^constraint <c>
              ^subtask-operator.<arg-name> <sub-arg>
              ^world.robot <rob>)
   (<c> ^name <arg-name>
        ^constraint-type object-match
        ^positive false
        ^target current-location
        ^arg.arg-type partial-predicate)
   (<sub-arg> ^{2} <loc>)
   (<rob> -^current-location <loc>)
-->
   (<c> ^satisfied true)
}

sp {learn-subtask-proposal*elaborate*constraint*satisfied*predicate*predicate
   (state <s> ^name learn-subtask-proposal
              ^constraint <c>
              ^subtask-operator.<arg-name> <sub-arg>)
   (<c> ^name <arg-name>
        ^constraint-type predicate
        ^positive false
        ^property <prop>
        ^predicate <pred>
        ^arg.arg-type partial-predicate)
   (<sub-arg> ^{2}.predicates <preds>)
   (<preds> -^<prop> <pred>)
-->
   (<c> ^satisfied true)
}

sp {learn-subtask-proposal*elaborate*constraint*satisfied*object*predicate
   (state <s> ^name learn-subtask-proposal
              ^constraint <c>
              ^subtask-operator.<arg-name> <sub-arg>)
   (<c> ^name <arg-name>
        ^constraint-type predicate
        ^positive true
        ^property <prop>
        ^predicate <pred>
        ^arg.arg-type object)
   (<sub-arg> ^id.predicates.<prop> <pred>)
-->
   (<c> ^satisfied true)
}

sp {learn-subtask-proposal*elaborate*constraint*satisfied*world-obj*predicate
   (state <s> ^name learn-subtask-proposal
              ^constraint <c>
              ^world.objects <objs>)
   (<c> ^name world-obj
        ^constraint-type predicate
        ^positive false
        ^property <prop>
        ^predicate <pred>)
   (<objs> -^object.predicates.<prop> <pred>)
-->
   (<c> ^satisfied true)
}

sp {learn-subtask-proposal*elaborate*all-constraints-satisfied*0*constraints
   (state <s> ^name learn-subtask-proposal
             -^constraint)
-->
   (<s> ^all-constraints-satisfied true)
}

sp {learn-subtask-proposal*elaborate*all-constraints-satisfied*1*constraints
   (state <s> ^name learn-subtask-proposal
              ^constraint <c1>
             -^constraint { <c2> <> <c1> })
   (<c1> ^satisfied true)
-->
   (<s> ^all-constraints-satisfied true)
}

sp {learn-subtask-proposal*elaborate*all-constraints-satisfied*2*constraints
   (state <s> ^name learn-subtask-proposal
              ^constraint { <c1>        < <c2> }
              ^constraint { <c2> > <c1>        }
             -^constraint { <c3> <> <c2> <> <c1> })
   (<c1> ^satisfied true)
   (<c2> ^satisfied true)
-->
   (<s> ^all-constraints-satisfied true)
}

            
