sp {ground-referent*propose*create-hypothetical
   (state <s> ^name ground-referent-x
             -^constraint-lt.specifier << it personal >>   ## You me ...
              ^segment.hypothetical true
              ^proto-referents)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-hypothetical)
}

sp {ground-referent*compare*create-hypothetical*failed-grounding
   (state <s> ^name ground-referent
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name create-hypothetical)
   (<op2> ^name failed-grounding)
-->
   (<s> ^operator <op1> > <op2>)
}


sp {ground-referent*compare*create-hypothetical
   (state <s> ^name ground-referent
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name create-hypothetical)
   (<op2> ^name << index-object-properties index-scene-objects index-scene-relation >>)
-->
   (<s> ^operator <op1> < <op2>)
}
# Generate a hypothetical referent that will have all of the constraints added to it
                                                            
sp {ground-referent*apply*create-hypothetical
   (state <s> ^operator.name create-hypothetical
             -^superstate.name evaluate-operator
              ^top-state.dialog-world.objects <objs>
             -^constraint.property.handle << name location category >>)
-->
   (<s> ^proto-referent <pr>)
   (<objs> ^object <pr>)
   (<pr> ^predicates <pred>
         ^handle (make-constant-symbol |new-object-id|)
         ^item-type object)
   (<pred> ^is-visible1 not-visible1
           ^dialog-object true
           ^category object)
   #(write (crlf) |Hypothetical referent. Creating not-visible object:| <pr>)
}
                                         
sp {ground-referent*apply*create-hypothetical*category
   (state <s> ^operator.name create-hypothetical
             -^superstate.name evaluate-operator
              ^top-state.dialog-world.objects <objs>              
              ^constraint <con>)
   (<con> ^property.handle category 
          ^handle <cat>)
-->
   (<s> ^proto-referent <pr>)
   (<objs> ^object <pr>)
   (<pr> ^predicates <pred>
         ^handle (make-constant-symbol |new-object-id|)
         ^item-type <cat>)
   (<pred> ^is-visible1 not-visible1
           ^dialog-object true
           ^category <cat>)
   #(write (crlf) |Hypothetical referent. Creating not-visible object:| <pr>)
}
                           
sp {ground-referent*apply*create-hypothetical*location
   (state <s> ^operator.name create-hypothetical
             -^superstate.name evaluate-operator
              ^top-state.dialog-world.objects <objs>  
              ^constraint <ref>)
   (<ref> ^property <prop>
          ^handle <handle>
          ^item-type <item-type>)
   (<prop> ^handle << location name >>)
  -(<ref> ^predicates 
          ^is-visible1 not-visible1)
-->
   (<s> ^proto-referent <ref2>)
   (<objs> ^object <ref2>)
   (<ref2> ^handle <handle>
          ^property <prop>
          ^item-type <item-type>
          ^is-visible1 not-visible1
          ^predicates <pred>)
   (<pred> ^dialog-object true
           ^category object)
   #(write (crlf) |Hypothetical referent. Creating not-visible object:| <ref2>)
}



