sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t2007864-9
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t2007864-8
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2> ^<a6> <a7>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    (<a7> ^arg-type object ^id <o4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t2007864-7
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2> ^<a6> <a7>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    (<a7> ^arg-type object ^id <o4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t2007864-6
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^superoperator <s3> ^superoperator <s5> ^evaluation <e2>)
    (<p1> ^name action)
    (<s3> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^subtask-handle <s4> ^type subtask)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
   -{ (<s3> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t2007864-5
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^superoperator <s3> ^superoperator <s5> ^evaluation <e2>)
    (<p1> ^name action)
    (<s3> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^subtask-handle <s4> ^type subtask)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
   -{ (<s3> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*execution-type*internal*apply*task-operator*mark*performed-subtask*OpNoChange*t2007864-4
    :chunk
    (state <s1> ^operator <o1> ^problem-space <p1> ^current-task-segment <c1>)
    (<o1> ^item-type task-operator ^subtask-handle <s2> ^task-handle <t1>)
    (<p1> ^execution-type internal ^name action)
    -->
    (<c1> ^performed-subtask <s2>)
}

sp {chunk*execution-type*internal*apply*task-operator*increment*plan-length*OpNoChange*t2007864-3
    :chunk
    (state <s1> ^problem-space <p1> ^plan-length <p2> ^operator <o1>)
    (<p1> ^execution-type internal ^name action)
    (<o1> ^task-handle <t1>)
    -->
    (<s1> ^plan-length <p2> - ^plan-length (+ <p2> 1))
}

sp {chunk*execution-type*internal*apply*task-operator*update*current-evaluation-depth*OpNoChange*t2007864-2
    :chunk
    (state <s1> ^problem-space <p1> ^current-evaluation-depth <c1>
          ^operator <o1>)
    (<p1> ^execution-type internal ^name action)
    (<o1> ^task-handle <t1>)
    -->
    (<s1> ^current-evaluation-depth <c1> -
           ^current-evaluation-depth (- <c1> 1))
}

sp {chunk*execution-type*internal*apply*task-operator*mark*tried-tied-operator*OpNoChange*t2007864-1
    :chunk
    (state <s1> ^untried-tied-operator <u1> ^operator <u1> ^problem-space <p1>)
    (<p1> ^execution-type internal ^name action)
    (<u1> ^task-handle <t1>)
    -->
    (<s1> ^untried-tied-operator <u1> - ^tried-tied-operator <u1>)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t2007859-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<d1> ^copy-objects-map <c2>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i2> ^pred-count 1)
    (<i2> ^subtask-handle <s2> ^type subtask)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t2007822-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1term245)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1term245 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t2007811-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1term245 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t2007802-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1exit194)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1term245
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1988853-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1exit194)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1exit194)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1988838-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1exit194 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988829-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1repeat195)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1exit194
           ^next-goal-type loop-exit ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988808-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal221)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int222
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1988653-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal221)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal221)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1988608-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal221 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal221 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988599-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int220)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category steak-knife1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal221
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988579-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int218)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int220
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988502-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal219)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int220
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1988323-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal219)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal219)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1988278-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal219 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal219 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988269-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int218)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category paring-knife1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal219
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988249-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int215)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int218
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1988149-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal217)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int218
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1987970-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal217)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal217)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1987925-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal217 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal217 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1987916-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int215)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category mug1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal217
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1987896-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int214)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int215
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1987835-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1987835-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1987835-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1987835-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1987835-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1987819-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1987819-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1987819-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1987819-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1987819-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1987803-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1987803-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1987803-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1987803-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1987803-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1987691-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal216)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int215
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1987655-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask235)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1987553-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask234)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1987362-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask233)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1987298-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal216)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal216)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1987253-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal216 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal216 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1987244-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int214)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category metal-fork1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal216
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1987224-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int211)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int214
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1987078-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal213)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int214
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1986923-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal213)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal213)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1986878-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal213 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal213 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1986869-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int211)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category glass-tumbler1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal213
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1986849-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int204)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int211
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1986680-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal212)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int211
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1986525-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal212)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal212)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1986480-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal212 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal212 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1986471-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1int204)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ceramic-plate1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal212
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1986451-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1start202)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int204
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1986409-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1goal200)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat195
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1972540-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1972540-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1972540-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1972540-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1972540-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1972524-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1972524-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1972524-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle unload1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle unload1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1972524-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1972524-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle unload1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1972508-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1972508-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1972508-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle unload1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle unload1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1972508-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1972508-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle unload1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1972463-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1term223)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1term223 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1972452-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1term223 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1972443-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1int222)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1term223
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1955472-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int222)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int222 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1955461-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int222 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1877432-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int220)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int220 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1877421-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int220 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1833390-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int218)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int218 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1833379-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int218 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1786515-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int215)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int215 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1786504-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int215 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1735179-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int214)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int214 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1735168-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int214 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1678607-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int211)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int211 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1678596-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int211 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1625049-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1int204)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1int204 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1625038-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1int204 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1625029-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle unload1goal203)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle unload1int204
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1624993-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask210)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1624891-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask209)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1624779-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1
          ^affordance1 grabbable1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask208)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1624671-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle unload1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask207)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1624609-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1goal203)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle unload1goal203)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1624561-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle unload1)
    (<o1> ^next-goal-handle unload1goal203 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> unload1goal203 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1624552-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle unload1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle unload1start202)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ceramic-bowl1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle unload1goal203
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1586937-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle unload1start202)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle unload1start202 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1586906-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category rack1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle unload1 ^item-type task-operator ^name op_unload1198
           ^arg1 <a1> ^subtask-handle subtask199)
    (<a1> ^id <i3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1586888-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1goal200)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle tidy1goal200)
    (<i1> ^subtask-handle subtask199 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1586863-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1goal200 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> tidy1goal200 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1586852-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1int196)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1goal200
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1575172-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1int196)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1int196 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1575161-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1int196 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1575152-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat195)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^property dish1 ^category rack1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle tidy1int196
           ^next-goal-type intermediate-goal ^has-conditions true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1575139-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat195)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1repeat195)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1575124-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1repeat195 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1575115-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1exit99)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat195
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1553535-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1exit99)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1exit99)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1553520-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1exit99 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1553511-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1repeat100)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1exit99
           ^next-goal-type loop-exit ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1553490-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal137)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int138
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1553335-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal137)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal137)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1553290-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal137 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal137 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category dishwasher1)
    (<i2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1553281-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int135)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category steak-knife1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal137
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1553261-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int134)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int135
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1553177-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal136)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int135
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1552998-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal136)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal136)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1552953-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal136 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal136 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category dishwasher1)
    (<i2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552944-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int134)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category plate1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal136
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552924-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int131)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int134
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552817-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal133)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int134
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1552708-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal133)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category garbage1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle store1goal133)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1552680-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal133 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal133 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category garbage1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552671-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int131)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category paper-cup1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal133
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552651-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int130)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int131
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552521-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal132)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int131
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1552412-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal132)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^property recycling1 ^category bin1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle store1goal132)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1552384-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal132 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal132 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^property recycling1 ^category bin1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552375-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int130)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category newspaper1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal132
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552355-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int128)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int130
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1552288-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1552288-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1552288-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1552288-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1552288-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1552271-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1552271-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1552271-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1552271-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1552271-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1552256-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1552256-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1552256-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1552256-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1552256-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1552119-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal129)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int130
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1552083-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category dishwasher1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask181)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1551981-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask180)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1551775-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category dishwasher1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask179)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1551721-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal129)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal129)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1551676-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal129 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal129 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category dishwasher1)
    (<i2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1551667-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int128)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category mug1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal129
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1551647-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int125)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int128
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1551471-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal127)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int128
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1551316-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal127)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal127)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1551271-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal127 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal127 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1551262-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int125)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category jar-of-salsa1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal127
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1551242-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int123)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int125
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1551177-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1551177-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1551177-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1551177-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1551177-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1551160-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1551160-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1551160-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1551160-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1551160-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1551145-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1551145-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1551145-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1551145-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1551145-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1550961-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal126)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int125
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1550925-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask172)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1550823-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask171)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1550617-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask170)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1550563-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal126)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal126)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1550518-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal126 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal126 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1550509-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int123)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category half-and-half1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal126
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1550489-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int122)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int123
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1550267-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal124)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int123
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1550112-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal124)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category pantry1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal124)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1550067-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal124 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal124 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category pantry1)
    (<i2> ^predicates <p2>)
    (<p2> ^category pantry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1550058-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int122)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category granola-bars1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal124
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1550038-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int119)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int122
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1549793-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal121)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int122
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1549614-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal121)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category pantry1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal121)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1549569-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal121 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal121 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category pantry1)
    (<i2> ^predicates <p2>)
    (<p2> ^category pantry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1549560-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int119)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category crackers1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal121
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1549540-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int117)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int119
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1549478-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1549478-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1549478-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1549478-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1549478-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1549462-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1549462-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1549462-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1549462-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1549462-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1549446-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1549446-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1549446-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1549446-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1549446-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1549189-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal120)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int119
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1549153-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask160)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1549051-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask159)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1548865-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask158)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1548796-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal120)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal120)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1548751-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal120 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal120 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1548742-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int117)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category corkscrew1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal120
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1548722-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int115)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int117
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1548661-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1548661-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1548661-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1548661-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1548661-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1548380-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal118)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int117
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1548319-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1 ^property recycling1 ^category bin1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask154)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1548180-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal118)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^property recycling1 ^category bin1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle store1goal118)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1548152-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal118 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal118 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^property recycling1 ^category bin1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1548143-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int115)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category coke-can1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal118
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1548123-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int113)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int115
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1548063-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1548063-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1548063-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1548063-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1548063-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1548047-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1548047-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1548047-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1548047-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1548047-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1548031-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1548031-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1548031-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1548031-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1548031-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category cupboard1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1547726-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal116)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int115
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1547690-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask151)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1547588-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask150)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1547407-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category cupboard1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask149)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1547333-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal116)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category cupboard1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal116)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1547288-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal116 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal116 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category cupboard1)
    (<i2> ^predicates <p2>)
    (<p2> ^category cupboard1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1547279-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int113)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category coffee-grinder1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal116
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1547259-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int109)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int113
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1547200-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1547200-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1547200-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1547200-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1547200-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1547183-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1547183-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1547183-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1547183-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1547183-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1547167-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1547167-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1547167-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1547167-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1547167-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1546839-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal114)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int113
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1546803-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask145)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1546701-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask144)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1546510-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask143)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1546456-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal114)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category pantry1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal114)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1546411-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal114 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal114 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category pantry1)
    (<i2> ^predicates <p2>)
    (<p2> ^category pantry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1546402-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1int109)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category box-of-aluminum-foil1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal114
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1546382-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1start107)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int109
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1546340-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1goal105)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat100
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1533570-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1533570-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1533570-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1533570-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1533570-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1533526-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1term139)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1term139 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1533515-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1term139 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1533506-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1int138)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1term139
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1523186-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int138)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int138 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1523175-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int138 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1480136-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int135)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int135 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1480125-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int135 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1447052-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int134)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int134 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1447041-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int134 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1403414-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int131)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int131 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1403403-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int131 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1326197-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int130)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int130 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1326186-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int130 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1281339-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int128)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int128 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1281328-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int128 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1247455-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int125)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int125 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1247444-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int125 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1206673-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int123)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int123 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1206662-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int123 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1186140-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int122)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int122 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1186129-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int122 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1134956-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int119)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int119 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1134945-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int119 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1069282-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int117)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int117 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1069271-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int117 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1032950-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int115)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int115 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1032939-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int115 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t990890-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int113)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int113 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t990879-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int113 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t925595-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1int109)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1int109 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t925584-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1int109 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t925575-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal108)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1int109
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t925514-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1 ^category garbage1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask112)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t925390-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1
          ^affordance1 grabbable1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask111)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t925343-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal108)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category garbage1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle store1goal108)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t925313-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal108 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal108 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category garbage1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t925304-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1start107)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category apple-core1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal108
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t878814-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1start107)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1start107 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t878783-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category counter1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle store1 ^item-type task-operator ^name op_store1103
           ^arg1 <a1> ^subtask-handle subtask104)
    (<a1> ^id <i3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t878765-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1goal105)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle tidy1goal105)
    (<i1> ^subtask-handle subtask104 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t878740-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1goal105 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> tidy1goal105 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t878729-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1int101)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1goal105
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t868945-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1int101)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1int101 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t868934-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1int101 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t868925-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat100)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category counter1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle tidy1int101
           ^next-goal-type intermediate-goal ^has-conditions true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t868912-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat100)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1repeat100)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t868897-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1repeat100 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t868888-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1exit5)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat100
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t831692-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1exit5)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1exit5)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t831677-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1exit5 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831668-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1repeat6)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1exit5
           ^next-goal-type loop-exit ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831647-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal50)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int51
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t831538-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal50)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^property recycling1 ^category bin1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle clear1goal50)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t831510-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal50 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal50 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^property recycling1 ^category bin1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831501-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int49)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category soda-can1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal50
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831481-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int46)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int49
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831397-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal48)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int49
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t831218-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal48)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category pantry1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal48)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t831173-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal48 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal48 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category pantry1)
    (<i2> ^predicates <p2>)
    (<p2> ^category pantry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831164-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int46)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category pop-tart-box1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal48
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831144-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int44)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int46
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t831037-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal47)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int46
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t830928-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal47)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category garbage1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle clear1goal47)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t830900-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal47 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal47 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category garbage1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830891-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int44)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category plastic-fork1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal47
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830871-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int42)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int44
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830741-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal45)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int44
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t830632-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal45)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category garbage1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle clear1goal45)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t830604-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal45 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal45 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category garbage1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830595-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int42)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category plastic-cup1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal45
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830575-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int40)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int42
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830422-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal41)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int42
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t830313-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal41)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^property recycling1 ^category bin1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle clear1goal41)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t830285-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal41 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal41 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^property recycling1 ^category bin1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830276-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int40)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category plastic-bottle1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal41
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830256-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int37)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int40
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t830190-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t830190-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t830190-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t830190-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t830190-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy property -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^property recycling1 ^category bin1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t830030-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal39)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int40
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t829969-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1 ^property recycling1 ^category bin1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask85)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t829825-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal39)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^property recycling1 ^category bin1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle clear1goal39)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t829797-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal39 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal39 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^property recycling1 ^category bin1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t829788-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int37)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category pepsi-can1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal39
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t829768-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int36)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int37
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t829703-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t829703-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t829703-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<i6> ^predicates <p3>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t829703-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t829703-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-confirmed1 confirmed1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^category garbage1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t829688-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t829688-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
    (<i1> ^type relation ^handle <h1> ^1 <i3> ^2 <i5>)
    (<i2> ^type relation ^handle <h2> ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i5>)
    (<a5> ^arg-type partial-predicate ^handle <h2> ^2 <i6>)
    (<a6> ^arg-type object ^id <i3>)
    (<a7> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i5> ^object <i3> ^object <i6> ^object <i4>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle <h1>)
    (<p4> ^handle <h2>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t829688-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
    (<i1> ^type relation ^handle <h1> ^1 <i3> ^2 <i5>)
    (<i2> ^type relation ^handle <h2> ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i5>)
    (<a5> ^arg-type partial-predicate ^handle <h2> ^2 <i6>)
    (<a6> ^arg-type object ^id <i3>)
    (<a7> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i5> ^object <i3> ^object <i6> ^object <i4>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle <h1>)
    (<p4> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t829688-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t829688-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t829513-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal38)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int37
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t829452-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1 ^category garbage1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask82)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t829328-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t829328-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^affordance1 always-open1
          ^affordance1 receptacle1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t829327-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t829327-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t829236-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal38)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category garbage1)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle clear1goal38)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t829208-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal38 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal38 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category garbage1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t829199-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int36)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category paper-plate1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal38
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t829179-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int34)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int36
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t828957-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal35)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int36
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t828802-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal35)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal35)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t828757-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal35 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal35 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t828748-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int34)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category milk1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal35
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t828728-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int32)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int34
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t828483-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal33)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int34
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t828304-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal33)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal33)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t828259-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal33 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal33 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t828250-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int32)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ketchup1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal33
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t828230-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int29)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int32
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t827962-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal31)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int32
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t827783-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal31)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal31)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t827738-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal31 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal31 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category dishwasher1)
    (<i2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t827729-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int29)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category glass-tumbler1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal31
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t827709-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int28)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int29
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t827648-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t827648-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t827648-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t827648-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t827648-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t827631-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t827631-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t827631-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t827631-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t827631-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t827616-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t827616-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t827616-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t827616-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t827616-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category pantry1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t827335-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal30)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int29
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t827299-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask70)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t827197-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask69)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t826996-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category pantry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask68)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t826932-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal30)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category pantry1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal30)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t826887-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal30 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal30 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category pantry1)
    (<i2> ^predicates <p2>)
    (<p2> ^category pantry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t826878-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int28)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category cereal-box1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal30
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t826858-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int26)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int28
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t826798-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t826798-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t826798-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t826798-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t826798-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t826781-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t826781-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t826781-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t826781-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t826781-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t826766-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t826766-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t826766-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t826766-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t826766-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category dishwasher1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t826462-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal27)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int28
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t826426-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category dishwasher1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask64)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t826324-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category dishwasher1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask63)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t826133-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category dishwasher1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask62)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t826064-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal27)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal27)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t826019-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal27 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal27 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category dishwasher1)
    (<i2> ^predicates <p2>)
    (<p2> ^category dishwasher1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t826010-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int26)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category ceramic-plate1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal27
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t825990-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int15)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int26
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t825931-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t825931-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t825931-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t825931-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t825931-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t825914-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t825914-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t825914-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t825914-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t825914-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t825899-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t825899-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t825899-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t825899-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t825899-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category drawer1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t825571-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal25)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int26
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t825535-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask58)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t825433-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask57)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t825242-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category drawer1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask56)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t825173-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal25)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category drawer1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal25)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t825128-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal25 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal25 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category drawer1)
    (<i2> ^predicates <p2>)
    (<p2> ^category drawer1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t825119-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1int15)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category bottle-opener1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal25
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t825099-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1start13)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int15
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t825057-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1goal11)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat6
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t813424-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t813424-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t813424-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i7>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^handle in1 ^2 <i7> ^1 <i5> ^type relation)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i7> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t813424-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t813424-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t813407-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t813407-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t813407-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i7>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle clear1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i4>)
    (<t2> ^task-handle clear1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i5>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i8>)
    (<i3> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i5> ^predicates <p1>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<i7> ^handle in1 ^1 <i5> ^type relation ^2 <i8>)
    (<i8> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i4> ^object <i8> ^object <i5>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t813407-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t813407-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 -^dont-copy is-open1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle clear1 ^arg1 <a8> ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i3>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t813392-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t813392-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t813392-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle clear1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle clear1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h2> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t813392-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t813392-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^category fridge1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle clear1 ^subtask-handle <s7>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t813378-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i2> ^type relation ^2 <i3> ^handle <h2> ^1 <i4>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^subtask-handle <s2> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i3> ^1 <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t813378-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h1> ^handle <h3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h2> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h4> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i4>)
    (<a5> ^arg-type object ^id <i5>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i5> ^object <i7> ^object <i8>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h2> ^instance <i9> -^dont-copy <i9>)
    (<i9> -^3 <i10> ^2 <i4> ^1 <i7>)
    (<p5> ^handle <h4> ^instance <i11>)
    (<i11> ^2 <i5> ^1 <i8>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t813378-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h1> ^handle <h3>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i5>)
    (<i3> ^type relation ^2 <i4> ^handle <h2> ^1 <i7>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
    (<i5> ^predicates <p1>)
    (<i6> ^2 <i5> ^type relation ^handle <h4> ^1 <i8>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i4>)
    (<a5> ^arg-type object ^id <i5>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i5> ^object <i7> ^object <i8>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h2> ^instance <i9> -^dont-copy <i9>)
    (<i9> -^3 <i10> ^2 <i4> ^1 <i7>)
    (<p5> ^handle <h4> ^instance <i11>)
    (<i11> ^2 <i5> ^1 <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t813378-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_close1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t813378-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_close1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t813343-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1term52)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1term52 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t813332-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1term52 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t813323-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1int51)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1term52
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t801429-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int51)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int51 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t801418-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int51 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t761779-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int49)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int49 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t761768-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int49 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t722444-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int46)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int46 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t722433-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int46 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t674177-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int44)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int44 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t674166-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int44 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t635638-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int42)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int42 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t635627-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int42 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t607690-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int40)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int40 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t607679-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int40 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t575636-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int37)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int37 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t575625-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int37 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t538707-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int36)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int36 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t538696-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int36 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t469083-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int34)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int34 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t469072-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int34 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t352517-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int32)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int32 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t352506-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int32 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t313019-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int29)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int29 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t313008-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int29 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t273849-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int28)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int28 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t273838-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int28 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t163128-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int26)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int26 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t163117-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int26 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t107143-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1int15)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1int15 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t107132-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1int15 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t107123-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle clear1goal14)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle clear1int15
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t107106-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle close1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t107096-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle close1)
    (<o1> ^next-goal-handle close1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t107087-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle close1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle close1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t107071-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1goal1)
    (<t1> ^task-handle close1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle close1goal1)
    (<i2> ^1 <i1> ^property-handle is-open1 ^handle not-open1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t107054-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle close1)
    (<o1> ^next-goal-handle close1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t107045-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle close1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle close1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t107032-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle close1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t107008-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask24)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t106936-5
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^subtask-handle <s2> ^task-handle <t2>)
    (<a9> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t106936-4
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i4> ^type relation ^2 <i5> ^1 <i6> ^handle <h5>)
    (<i5> ^predicates <p2>)
    (<i6> ^predicates <p1>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i3>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2> ^object <i5> ^object <i6>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a12> ^arg-type object ^id <i6>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t106936-3
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i4> ^type relation ^2 <i5> ^1 <i6> ^handle <h5>)
    (<i5> ^predicates <p2>)
    (<i6> ^predicates <p1>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i3>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2> ^object <i5> ^object <i6>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a12> ^arg-type object ^id <i6>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106936-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106936-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t106906-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106896-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106887-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle put-down1goal2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t106848-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle put-down1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask23)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106809-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106809-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s8> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t106802-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^handle <h2> ^2 <i2> ^1 <i3>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i3> <i4> ^<i2> <i5>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i6> ^pred-count 1)
    (<i6> ^2 <i5> ^1 <i4> ^handle <h2> ^type relation)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t106796-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i4> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t106783-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1goal2)
    (<t1> ^task-handle put-down1 ^arg2 <a1> ^arg2 <a2> ^arg1 <a3> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i2>)
    (<a2> ^arg-type partial-predicate ^handle <h1>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i3> ^pred-count 1 ^handle put-down1goal2)
    (<i3> ^2 <i2> ^1 <i1> ^handle <h1> ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106765-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1goal2 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106756-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle put-down1 ^name <n1> ^arg2 <a1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1goal2
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t106746-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t106723-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t106715-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^is-open1 open2 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^affordance1 receptacle1 ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask22)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t106714-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a12>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> < <a1> } <a5>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<a3> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
   -{ (<c2> ^{ <a6> <> <a1> <> <a4> } <a7>)
      (<a7> ^arg-type <a8>)}
   -{ (<t2> ^{ <a9> <> <a1> <> <a4> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a5> ^arg-type object ^id <i2>)
    (<a12> ^arg-type object ^id <i2>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t106630-5
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t106630-4
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t106630-3
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106630-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106630-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t106600-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106590-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106581-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t106541-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask21)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106502-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106502-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t106491-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1goal1)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle pick-up1goal1)
    (<i2> ^1 <i1> ^property-handle is-grabbed1 ^handle grabbed1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106474-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106465-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t106459-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t106435-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1
          ^affordance1 grabbable1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask20)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t106363-5
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t106363-4
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t106363-3
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106363-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106363-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s3> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t106334-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle open1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106324-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle open1)
    (<o1> ^next-goal-handle open1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106315-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle open1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle open1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t106294-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106284-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106275-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t106259-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1goal1)
    (<t1> ^task-handle approach1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle approach1goal1)
    (<i2> ^1 <i1> ^property-handle is-reachable1 ^handle reachable1
           ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106242-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106233-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t106220-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t106196-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle open1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask19)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106157-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106157-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s7> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superstate <s4> ^superproblem-space <s5> ^superoperator <s6>
          ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s7> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s8> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t106150-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^property-handle <p1> ^handle <h2> ^1 <i2>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i2> <i3>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i4> ^pred-count 1)
    (<i4> ^1 <i3> ^property-handle <p1> ^handle <h2> ^type unary)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t106141-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1goal1)
    (<t1> ^task-handle open1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle open1goal1)
    (<i2> ^1 <i1> ^property-handle is-open1 ^handle open2 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t106124-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle open1)
    (<o1> ^next-goal-handle open1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t106115-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle open1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle open1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t106109-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle open1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t106085-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle clear1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-open1 not-open1 ^is-confirmed1 confirmed1 ^affordance1 openable1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask18)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t106084-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a9>)
    (<t2> ^task-handle <t1> ^<a1> <a2>)
   -{ (<c2> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
   -{ (<t2> ^{ <a6> <> <a1> } <a7>)
      (<a7> ^arg-type <a8>)}
    (<a2> ^arg-type object ^id <i1>)
    (<a9> ^arg-type object ^id <i1>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106044-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 not-open1 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106044-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 not-open1 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<i3> ^handle in1 ^2 <i2> ^type relation ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1 ^affordance1 grabbable1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106043-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_close1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106043-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_close1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^2 <i2> ^type relation ^handle <h2> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106014-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106014-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i3>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i2> ^handle in1 ^type relation ^1 <i3> ^2 <i4>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-open1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1 ^affordance1 receptacle1)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i3>)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t106012-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t106012-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^superoperator <s2> ^evaluation <e1>
          ^superproblem-space <s4> ^superoperator <s5> ^evaluation <e2>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h2>)
    (<i1> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy affordance1
          -^dont-copy is-confirmed1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^affordance1 openable1)
    (<i3> ^2 <i2> ^type relation ^handle <h1> ^1 <i4>)
    (<s6> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t105598-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a8>
           ^<a3> <a9>)
    (<a8> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i4> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t105482-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t105474-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t105465-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^type unary ^property-handle <p1> ^handle <h3> ^1 <i5>)
    (<i2> ^type relation ^handle <h2> ^2 <i3> ^1 <i4>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i4> <i6> ^<i3> <i7> ^<i5> <i8>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^2 <i9> ^1 <i10> ^pred-count 2)
    (<i9> ^1 <i8> ^property-handle <p1> ^handle <h3> ^type unary)
    (<i10> ^2 <i7> ^1 <i6> ^handle <h2> ^type relation)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t105452-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1goal14)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle clear1goal14)
    (<i2> ^1 <o3> ^property-handle is-open1 ^handle not-open1 ^type unary)
    (<i3> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t105404-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle clear1)
    (<o1> ^next-goal-handle clear1goal14 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> clear1goal14 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^predicates <p1>)
    (<p1> ^category fridge1)
    (<i2> ^predicates <p2>)
    (<p2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t105395-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle clear1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle clear1start13)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category apple-juice1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle clear1goal14
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t59327-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle clear1start13)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle clear1start13 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t59299-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t59293-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category table1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle clear1 ^item-type task-operator ^name op_clear19
           ^arg1 <a1> ^subtask-handle subtask10)
    (<a1> ^id <i3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t59275-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1goal11)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle tidy1goal11)
    (<i1> ^subtask-handle subtask10 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t59250-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1goal11 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> tidy1goal11 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^predicates <p1>)
    (<p1> ^category object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t59239-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1int7)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1goal11
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t38876-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1int7)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1int7 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t38865-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1int7 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t38856-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat6)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<o1> ^object <i2> ^object <i3>)
    (<i2> ^predicates <p4>)
    (<p4> ^category table1)
    (<i3> ^predicates <p5>)
    (<p5> ^category object)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle tidy1int7
           ^next-goal-type intermediate-goal ^has-conditions true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t38843-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1repeat6)
    (<t1> ^task-handle tidy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle tidy1repeat6)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t38828-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle tidy1)
    (<o1> ^next-goal-handle tidy1repeat6 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t38819-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle tidy1start2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle tidy1repeat6
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t16275-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle tidy1start2)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle tidy1start2 ^item-type start-goal)
}



