##!
# @file
#
# @created p 20160407
# File: do-definition.soar
# Author: Peter 
# Created: 7 April 2016
#
# Desc: This operator will create an action
#       to perform the definition of a new word.
#
#       In addition we have added an operator called
#       do-redefinition to handle the new meaning called
#       PropertyRedefinition.
#       This is needed because the format of the message in the gold
#       standard is quite different than that for a normal definition.
#


#################  PropertyDefinition   ####################### 

#   Propose an operator to decide to perform a definition
sp {interpret*propose*do-definition
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^comprehension <c>
              ^discourse <d>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a PropertyDefinition
        ^word <word>)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-definition
        ^type interpretation
        ^meaning <m>
        ^discourse <d>
        ^debug-info (concat |Decide to define the word '| <word> |'.|))
}

#   Build a definition action
sp {interpret*apply*do-definition*property
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-definition
        ^meaning <m>)
   (<m> ^is.a PropertyDefinition
        ^word <word>
        ^class <class>)
   (<class> ^is.a PropertySetDescriptor
            ^predicate <property>)
-->
   #   Add an action to define the property, no arg1 yet
   (<s> ^define-prop-def <a-prop-def>)
   (<a-prop-def> ^action DEFINE-PROPERTY
             	 ^property <property>
                 ^text <word>
	             ^next nil)
}

#   Add the word structure to the definition
#   for a word whose item-type will be property.
sp {interpret*apply*do-definition*property*add-word*property
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>
              ^define-prop-def <a-prop-def>)
   (<o> ^name do-definition
        ^meaning <m>)
   (<m> ^is.a PropertyDefinition
        ^word <word>
        ^class <class>)
   (<class> ^is.a PropertySetDescriptor
            ^predicate <property>)
   #    If the handle is "color" or "size",
   #    then this will have ^item-type property.
   (<property> ^handle <handle> << color size >>)
-->
   #   Add the target arg(s) to the action
   (<a-prop-def> ^arg1 <r-word-struct>)
   (<r-word-struct> ^handle (make-constant-symbol <word>)
                    ^item-type property
                    ^word-structure <new-word-struct>)
   (<new-word-struct> ^referent <r-new-word>
                      ^spelling <word>
                      ^structure-type N)
}

#   Add the word structure to the definition
#	for a word whose item-type will be object.
sp {interpret*apply*do-definition*property*add-word*object
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>
              ^define-prop-def <a-prop-def>)
   (<o> ^name do-definition
        ^meaning <m>)
   (<m> ^is.a PropertyDefinition
        ^word <word>
        ^class <class>)
   (<class> ^is.a PropertySetDescriptor
            ^predicate <property>)
   #    If the handle is "shape",
   #    then this will have ^item-type object.
   (<property> ^handle <handle> << shape >>)
-->
   #   Add the target arg(s) to the action
   (<a-prop-def> ^arg1 <r-word-struct>)
   (<r-word-struct> ^handle (make-constant-symbol <word>)
                    ^item-type object
                    ^word-structure <new-word-struct>)
   (<new-word-struct> ^referent <r-new-word>
                      ^spelling <word>
                      ^structure-type N)
}

#   Add the word structure to the definition
#   for a word whose item-type will be action.
sp {interpret*apply*do-definition*property*add-word*action
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>
              ^define-prop-def <a-prop-def>)
   (<o> ^name do-definition
        ^meaning <m>)
   (<m> ^is.a PropertyDefinition
        ^word <word>
        ^class <class>)
   (<class> ^is.a PropertySetDescriptor
            ^predicate <property>)
   #    If the handle is "action",
   #    then this will have ^item-type action.
   (<property> ^handle <handle> << action2 >>)
-->
   #   Add the target arg(s) to the action
   (<a-prop-def> ^arg1 <r-word-struct>)
   (<r-word-struct> ^handle (make-constant-symbol <word>)
                    ^item-type action
                    ^word-structure <new-word-struct>)
   (<new-word-struct> ^referent <r-new-word>
                      ^spelling <word>
                      ^structure-type N)
}

#   Add the word structure to the definition
#   for a word whose item-type will be predicate.
sp {interpret*apply*do-definition*property*add-word*predicate
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>
              ^define-prop-def <a-prop-def>)
   (<o> ^name do-definition
        ^meaning <m>)
   (<m> ^is.a PropertyDefinition
        ^word <word>
        ^class <class>)
   (<class> ^is.a PropertySetDescriptor
            ^predicate <property>)
   #    If the handle is "relation",
   #    then this will have ^item-type predicate.
   (<property> ^handle <handle> << relation1 >>)
-->
   #   Add the target arg(s) to the action
   (<a-prop-def> ^arg1 <r-word-struct>)
   (<r-word-struct> ^handle (make-constant-symbol <word>)
                    ^item-type predicate
                    ^word-structure <new-word-struct>)
   (<new-word-struct> ^referent <r-new-word>
                      ^spelling <word>
                      ^structure-type N)
}

#   Add the word structure to the definition
#	for a word whose item-type will be concept.
sp {interpret*apply*do-definition*property*add-word*concept
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>
              ^define-prop-def <a-prop-def>)
   (<o> ^name do-definition
        ^meaning <m>)
   (<m> ^is.a PropertyDefinition
        ^word <word>
        ^class <class>)
   (<class> ^is.a PropertySetDescriptor
            ^predicate <property>)
   (<property> ^handle location)	#	There may be more to add here
   #    If the handle is "location",
   #    then this will have ^item-type concept.
   (<property> ^handle <handle> << location >>)
-->
   #   Add the target arg(s) to the action
   (<a-prop-def> ^arg1 <r-word-struct>)
   (<r-word-struct> ^handle (make-constant-symbol <word>)
                    ^item-type concept
                    ^word-structure <new-word-struct>)
   (<new-word-struct> ^referent <r-new-word>
                      ^spelling <word>
                      ^structure-type N)
}

sp {interpret*apply*do-definition*property*done
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>
              ^define-prop-def <a-prop-def>)
   (<o> ^name do-definition)
   (<a-prop-def> ^arg1 <arg1>)
-->
   #   Post just the relation assertion
   (<s> ^define-prop-def <a-prop-def> -
        ^action <a-prop-def>)
}


#################  PropertyRedefinition   ####################### 

#   This is needed because the format of the message in the gold
#   standard is quite different than that for a normal definition.

#   Propose an operator to decide to perform a redefinition
sp {interpret*propose*do-redefinition
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^comprehension <c>
              ^discourse <d>
             -^action <a>)
   (<c> ^cxn-stack.m <m>)
   (<m> ^is.a PropertyRedefinition
        ^word <word>)
-->
   (<s> ^operator <o> +)
   (<o> ^name do-redefinition
        ^type interpretation
        ^meaning <m>
        ^discourse <d>
        ^debug-info (concat |Decide to redefine the word '| <word> |'.|))
}

#   Build a redefinition action
sp {interpret*apply*do-redefinition*property
   (state <s> ^top-state <ts> 
              ^problem-space interpret
              ^operator <o>)
   (<o> ^name do-redefinition
        ^meaning <m>)
   (<m> ^is.a PropertyRedefinition
        ^word <word>
        ^old <old-def>
        ^class <class>)
   (<class> ^is.a PropertySetDescriptor
            ^predicate <property>)
   #    Get the info from the old definition
   (<old-def> ^is.a PropertyDescriptor
              ^predicate <old-pred>)
-->
   #   Add an action to redefine the property
   (<s> ^action <a-prop-redef>)
   (<a-prop-redef> ^action REDEFINE-PROPERTY
                   ^arg1 <old-pred>
                   ^property <property>
                   ^text <word>
                   ^next nil)
}
