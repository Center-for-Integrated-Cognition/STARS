sp {create-object*elaborate*parameter*input-object1*single*noparam
:o-support
   (state <s> ^name create-object
              ^superstate <ss>)
   (<ss> ^input-object-1 <c>
         ^learning-predicate.usage-args.{1} <arg>
         ^operator.parameter <c>)
   (<c> ^parameter-index <oc>)
   (<arg> ^parameter.num 0)
-->
   (<s> ^condition <co>)
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
         ^parameter <P628> ^rtype single ^input 1)
}
sp {create-object*elaborate*latest-condition
   (state <s> ^name create-object
              ^condition <co>)
   -{(state <s>)
	 (<s> ^condition {<co2> > <co>})}
-->
   (<s> ^last-condition <co>)
}
sp {create-object*elaborate*parameter*input-object2*single*noparam
:o-support
   (state <s> ^name create-object
              ^superstate <ss>)
   (<ss> ^input-object-2 <c>
         ^learning-predicate.usage-args.{2} <arg>
         ^operator.parameter <c>)
   (<c> ^parameter-index <oc>)
   (<arg> ^parameter.num 0)
-->
   (<s> ^condition <co>)
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
         ^parameter <P628> ^rtype single ^input 2)
}

#hmm depends on usage (was what tested a parameter set) ##causes problems for grouped
sp {create-object*elaborate*parameter*input-object1*set
:o-support
   (state <s> ^name create-object
              ^superstate <ss>)
   (<ss> ^input-object-1 <c>
         ^learning-predicate.usage-args.{1} <arg>
         ^operator.parameter <c>)
   (<c> ^parameter-index <oc>)
   (<arg> ^rtype set ^parameter.num > 0)
-->
#(interrupt)
   (<s> ^condition <co>)
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
         ^parameter <P628> ^rtype set ^input 1)
   (<P628> ^1 <para>) #
   (<para> ^param-id <oc>) #
}

sp {create-object*elaborate*parameter*input-object2*set
:o-support
   (state <s> ^name create-object
              ^superstate <ss>)
   (<ss> ^input-object-2 <c>
         ^learning-predicate.usage-args.{2} <arg>
         ^operator.parameter <c>)
   (<c> ^parameter-index <oc>)
   (<arg> ^rtype set ^parameter.num > 0)
-->
   (<s> ^condition <co>)
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
         ^parameter <P628> ^rtype set ^input 2)
}

sp {create-object*elaborate*parameter*input-object1*single
:o-support
   (state <s> ^name create-object
              ^superstate <ss>)
   (<ss> ^input-object-1 <c>
         ^learning-predicate.usage-args.{1} <arg>
         ^operator.parameter <c>)
   (<c> ^parameter-index <oc>)
   (<arg> ^rtype single ^parameter.num > 0)
-->
#(interrupt)
   (<s> ^condition <co>)
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
         ^parameter <P628> ^rtype single ^input 1)
   (<P628> ^1 <para>)
   (<para> ^param-id <oc>)
}
sp {create-object*elaborate*parameter*input-object2*single
:o-support
   (state <s> ^name create-object
              ^superstate <ss>)
   (<ss> ^input-object-2 <c>
         ^learning-predicate.usage-args.{2} <arg>
         ^operator.parameter <c>)
   (<c> ^parameter-index <oc>)
   (<arg> ^rtype single ^parameter.num > 0) #^rtype set)
-->
   (<s> ^condition <co>)
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
         ^parameter <P628> ^rtype single ^input 2)
   (<P628> ^1 <para>)
   (<para> ^param-id <oc>)
}
sp {create-object*elaborate*parameter
:o-support
   (state <s> ^name create-object
             -^superstate.input-object-1 <c>
              -^superstate.input-object-2 <c>
              ^superstate.operator.parameter <c>)
-->
   (<s> ^parameter <c>)
}
sp {create-object*elaborate*named-location
   :o-support
   (state <s> ^name create-object
              ^parameter <c>)
   (<c> ^category location ^name <name> -^predicates)
-->
   (<s> ^condition <c2>)
   (<c2> ^name <name> ^args <ar> ^parameter <pa> ^type attribute ^attribute name ^rtype single)
   (<ar> ^1 <c1>)
   (<c1> ^name location ^parameter <p> ^type attribute ^attribute category ^rtype single)
}
sp {create-object*elaborate*category
   :o-support
   (state <s> ^name create-object
              ^parameter.predicates <c>)
   (<c> ^category {<cat> <> object})
-->
   (<s> ^condition <c1>) 
   (<c1> ^name object ^args <a3> ^negative false ^rtype single ^parameter.num 0 ^type attribute ^attribute primitive)  
   (<s> ^condition <c2>)
   (<c2> ^args <a1> ^name <cat> ^parameter <p> ^type attribute ^attribute category ^rtype single)
   (<a1> ^1 <c1>)
  # (<s> ^condition <c1>)
}
sp {create-object*elaborate*number*object*primitive
   :o-support
   (state <s> ^name create-object
              ^parameter <param>)
   (<param> -^predicates ^handle number1)
-->
   (<s> ^condition <c1>)
   (<c1> ^name number ^args <a2> ^parameter <p> ^rtype single ^return-type number ^result <res>)
   (<res> ^set <rset>)
   (<rset> ^instance <i1> <i2> <i3> <i4> <i5>)
   (<i1> ^1 1)
   (<i2> ^1 2)
   (<i3> ^1 3)
   (<i4> ^1 4)
   (<i5> ^1 5)
}
sp {create-object*elaborate*cateogy*object
   :o-support
   (state <s> ^name create-object
              ^parameter.predicates <c>)
   (<c> ^category {<cat> << object >>})
-->
   (<s> ^condition <c1>)
   (<c1> ^name <cat> ^parameter <p> ^type attribute ^attribute primitive ^rtype single)
}
sp {create-object*propose*complete
   (state <s> ^name create-object
              ^last-condition <co>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete)
}
sp {create-object*apply*complete*remove-rtype
   (state <s> ^name create-object
              ^operator.name complete
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<cond> ^rtype <rtype>)
-->
   (<s> ^complete true)
   (<cond> ^rtype <rtype> -)
}
#TODO MAKE SURE DIDNT BREAK ANYTHING #if number know, it needs parameter
#and make sure no relation, will cause issues #or if not indef??
sp {create-object*apply*complete*not-indef-parameter*set
   (state <s> ^name create-object
              ^operator.name complete
              ^last-condition <cond>
              ^superstate <ss>)
   (<ss> ^operator.parameter <c>)
   (<c> ^predicates <pp> -^relation ^parameter-index <id>)
   (<pp> ^multiple true -^quantified.handle all)
   (<cond> ^parameter <p>)
   -{(<pp> ^number singular)}
-{(<ss> ^input-object-1 <c>)
  (<ss> ^learning-predicate <lp>)
  (<lp> ^usage-args <args>)
  (<args> ^1 <a1>)
  (<a1> ^rtype single ^parameter.num 0)}
-{(<ss> ^input-object-2 <c>)
  (<ss> ^learning-predicate <lp>)
  (<lp> ^usage-args <args>)
  (<args> ^2 <a2>)
  (<a2> ^rtype single ^parameter.num 0)}
-{(<ss> -^<< input-object-1 input-object-2 output-object-1 >> <c>)#for object non specific
(<pp> ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> is-visible1 <> visible <> visibility <> multiple <> number} <val>)}
-->
   (<p> ^1 <para1>)
   (<para1> ^param-id <id> ^type set)
}
sp {create-object*apply*complete*all-parameter*set
   (state <s> ^name create-object
              ^operator.name complete
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.quantified.handle all ^parameter-index <id>)
   (<c> ^predicates <pp>)
   (<cond> ^parameter <p>)
-{(<ss> -^<< input-object-1 input-object-2 output-object-1 >> <c>)#for object non specific
(<pp> ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> is-visible1 <> visible <> visibility <> multiple <> number} <val>)}
#should also delay param-id for relation? if all the blocks on the location are green...
-->
   (<p> ^1 <para1>)
   (<para1> ^param-id <id> ^type set)
}
sp {create-object*apply*complete*multiple
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^top-state.dialog-context <dc>
              ^last-condition <cond>
			  ^superstate <ss>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates <pp>)
   (<pp> ^multiple true)
   (<cond> -^attribute input-arg)
  -{(<c>  ^relation <r>)
    (<r> -^handle between)}
-{(<ss> -^<< input-object-1 input-object-2 output-object-1 >> <c>)#for object non specific
(<pp> ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> is-visible1 <> visible <> visibility <> multiple <> number} <val>)}
-->
   (<dc> ^dumb-gds <cond>)
   (<c> ^finalize <cond>)
   (<cond> ^rtype set)
}

#TODO james need parent predicate to be rtype set
sp {create-object*apply*complete*input-arg*rtype
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^top-state.dialog-context <dc>
			  ^superstate <ss>
              ^superstate.learning-predicate.usage-args.<a1>.rtype <rtype> 
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates <pp>)
   (<pp> ^multiple true) #build for non multiple too
   (<cond> ^attribute input-arg ^input <a1>)
 -{(<c>  ^relation <r>)
   (<r> -^handle between)}
-{(<ss> -^<< input-object-1 input-object-2 output-object-1 >> <c>)#for object non specific
(<pp> ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> is-visible1 <> visible <> visibility <> multiple <> number} <val>)}
-->
   (<dc> ^dumb-gds <cond>)
   (<c> ^finalize <cond> ^rtype set)
   (<cond> ^rtype <rtype>)
}
#make this also fire for containing predicates that will act like relation
sp {create-object*apply*complete*multiple*with*relation
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^top-state.dialog-context <dc>
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.multiple true ^relation <r>)
   (<r> -^handle between)
-->
   (<dc> ^dumb-gds <cond>)
   (<c> ^finalize <cond> ^rtype set)
   (<cond> ^rtype single)
}

#qqqOAqq HERE!
sp {create-object*apply*complete*multiple*with*unary
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^top-state.dialog-context <dc>
              ^last-condition <cond>
			  ^superstate <ss>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates <pp>)
(<ss> -^<< input-object-1 input-object-2 output-object-1 >> <c>)
   (<pp> ^multiple true ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> is-visible1 <> visible <> visibility <> multiple <> number} <val>)
-{(<c> ^relation <r>)
  (<r> -^handle between)}
-->
   (<dc> ^dumb-gds <cond>)
   (<c> ^finalize <cond> ^rtype set)
   (<cond> ^rtype single)
}
sp {create-object*apply*complete*hasnumber*with*relation
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^top-state.dialog-context <dc>
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> -^predicates.multiple true ^predicates.number ^relation <r>)
   (<r> -^handle between)
-->
(<dc> ^dumb-gds <cond>)
   (<c> ^finalize <cond> ^rtype set)
   (<cond> ^rtype single)
}
#weird gds problem, work around for now by copying versions to learning-event state
sp {create-object*apply*complete*copy*gds-hack-fix
   (state <s> ^name create-object
              ^condition <co>
             -^last-condition <co>
              ^complete true
              ^top-state.dialog-context <dc>
              ^operator.name complete)
-->
  (<dc> ^dumb-gds <co>)
}
sp {create-object*apply*complete*copy*result
   (state <s> ^name create-object
              ^condition <co>
              #^complete true
              ^operator.name complete)
   (<co> -^result)
-->
  (<co> ^result <rr>)
  (<rr> ^set <x>)
}
sp {create-object*apply*complete*single*gds-hack-fix*2
   (state <s> ^name create-object
              ^condition <co>
              ^complete true
              ^top-state.dialog-context <dc>
              ^operator.name complete)
   (<co> ^<x> {<a> <=> <s>})
-->
  (<dc> ^dumb-gds <a>)
}
sp {create-object*apply*complete*single
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              -^moved
               ^top-state.dialog-context <dc>
              ^last-condition <cond>
              ^superstate <ss>)
   (<ss> ^operator.parameter <c>)
   (<c> -^predicates.multiple true ^predicates <pp>)
  -{(<c> ^predicates.number <> singular ^relation)}
 # -{(<ss> -^<< input-object-1 input-object-2 output-object-1 >> <c>)#for object non specific
   #   (<pp> ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> is-visible1 <> visible <> visibility <> multiple <> number} <val>)}
-->
   (<dc> ^dumb-gds <cond>)
   (<c> ^finalize <cond>)
   (<cond> ^rtype single)
}
sp {create-object*apply*complete*single*moved
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^top-state.dialog-context <dc>
              ^moved <mov>
              ^last-condition <cond>
              ^superstate <ss>)
   (<ss> ^operator.parameter <c>)
   (<c> -^predicates.multiple true ^predicates <pp>)
  -{(<c> ^predicates.number <> singular ^relation)}
  -{(<ss> -^<< input-object-1 input-object-2 output-object-1 >> <c>)#for object non specific
  (<pp> ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> is-visible1 <> visible <> visibility <> multiple <> number} <val>)}
-->
   (<ss> ^moved <mov>)
   (<dc> ^dumb-gds <cond>)
   (<c> ^finalize <cond>)
   (<cond> ^rtype single)
}

### DEBUG
sp {create-object*apply*complete*interrupt
   (state <s> ^name create-objectXX
              ^operator.name complete
			  ^complete true)
-->
(write (cmd print <s> -d 3))
(write (cmd matches))
(interrupt)
}
