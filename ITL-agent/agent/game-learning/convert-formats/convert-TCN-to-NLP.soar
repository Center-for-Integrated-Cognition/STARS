sp {convert-TCN-to-NLP*elaborate*state
   (state <s> ^name convert-TCN-to-NLP
              ^superstate.operator <o>)
   (<o> ^tcn <tcn>)
-->
   (<s> ^set <tcn>)
}

sp {convert-TCN-to-NLP*elaborate*state2
   (state <s> ^name convert-TCN-to-NLP)
-->
   (<s> ^condition <c3> <c4> <c5>     
        ^nlp-set <nps>)
 (<c4> ^name block ^rtype single ^attribute category ^type attribute)  
 (<c3> ^name location ^rtype single ^attribute category ^type attribute)  
 (<c5> ^name object ^rtype single ^attribute category ^type attribute)  
}

#TODO howto-handle multiple?
sp {convert-TCN-to-NLP*elaborate*parameter*attr
   (state <s> ^name convert-TCN-to-NLP
              ^condition <c>
              ^set <a>)
   (<c> ^name <type>)
   (<a> ^parameters.{<num> << 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>}.type <type> ^conditions.<num>.attribute.<attr> <value>)
-->
   (<s> ^<num> <c1>)
   (<c1> ^name <value> ^attribute <attr> ^args <ag2> ^type attribute)
   (<ag2> ^1 <c>)
}

sp {convert-TCN-to-NLP*elaborate*parameter
   (state <s> ^name convert-TCN-to-NLP
              ^condition <c>
              ^set <a>)
   (<c> ^name <type>)
   (<a> ^parameters.{<num> << 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>}.type <type> -^conditions.<num>.attribute.<attr> <value>)
-->
   (<s> ^<num> <c>)
}

sp {convert-TCN-to-NLP*elaborate*nlp*INDEF
   (state <s> ^name convert-TCN-to-NLP
              ^condition <c>
              ^<num> <c2>
              ^set <a>)
   (<a> ^conditions.cond.prep <cond>)
   (<c> ^name <type>)
   (<cond> ^name <name> ^negative <neg> ^1 <num> ^2 INDEF -^3 ^btype <type>)
-->
   (<s> ^nlp <co>)
   (<co> ^name <name> ^negative <neg> ^parameter <p3z> ^args <args> ^type state-pair ^attribute prepositions)
   (<p3z> ^1 <p1b>)
   (<p1b> ^param-id <num>)
   (<args> ^1 <c2> ^2 <c>)
}

sp {convert-TCN-to-NLP*elaborate*nlp*not-INDEF
   (state <s> ^name convert-TCN-to-NLP
              ^<num2> <c2>
              ^<num> <c>
              ^set <a>)
   (<a> ^conditions.cond.prep <cond>)
   (<cond> ^name <name> ^negative <neg> ^1 <num> ^2 <num2> -^2 INDEF -^3)
-->
   (<s> ^nlp <co>)
   (<co> ^name <name> ^negative <neg> ^parameter <p3z> ^args <args>  ^type state-pair ^attribute prepositions)
   (<p3z> ^1 <p1b> ^2 <p2b>)
   (<p1b> ^param-id <num>)
   (<p2b> ^param-id <num2>)
   (<args> ^1 <c> ^2 <c2>)
}

sp {convert-TCN-to-NLP*elaborate*nlp*3args
   (state <s> ^name convert-TCN-to-NLP
              ^<num3> <c3>
              ^<num2> <c2>
              ^<num> <c>
              ^set <a>)
   (<a> ^conditions.cond.prep <cond>)
   (<cond> ^name <name> ^negative <neg> ^1 <num> ^2 <num2> ^3 <num3>)
-->
   (<s> ^nlp <co>)
   (<co> ^name <name> ^negative <neg> ^parameter <p3z> ^args <args> ^type state-pair ^attribute prepositions)
   (<p3z> ^1 <p1b> ^2 <p2b> ^3 <p3b>)
   (<p1b> ^param-id <num>)
   (<p2b> ^param-id <num2>)
   (<p3b> ^param-id <num3>)
   (<args> ^1 <c> ^2 <c2> ^3 <c3>)
}

sp {convert-TCN-to-NLP*propose*complete
   (state <s> ^name convert-TCN-to-NLP)
-->
   (<s> ^operator <op> + =)
   (<op> ^name complete)
}

sp {convert-TCN-to-NLP*apply*complete
   (state <s> ^name convert-TCN-to-NLP
              ^nlp-set <nps>
              ^nlp <nlp>
              ^operator.name complete)
-->
   (<nps> ^nlp <nlp>)
}

sp {convert-TCN-to-NLP*apply*complete*name
   (state <s> ^name convert-TCN-to-NLP
              ^nlp-set <nps>
              ^set.name <name>
              ^operator.name complete)
-->
   (<nps> ^name <name> ^aname <name>)
}

sp {convert-TCN-to-NLP*apply*complete*superstate*copy
   (state <s> ^name convert-TCN-to-NLP
              ^superstate <ss>
              ^superstate.operator.type <type>
              ^set.name <name>
              ^nlp-set <nps>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
-->
   (<ss> ^nlp-set <nps>)
}