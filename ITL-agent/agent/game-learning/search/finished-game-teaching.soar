sp {finished-game-teaching*propose*setup-search
   (state <s> ^name finished-game-teaching
              ^superstate.operator.type game
              ^top-state.dialog-context.structure.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name setup-search
        ^game-name <name>)
}

sp {finished-game-teaching*propose*setup-search*game-replay
   (state <s> ^name finished-game-teaching
              ^superstate.operator.type game
              ^top-state.game-replay <name>
              -^top-state.dialog-context)
-->
   (<s> ^operator <o> + =)
   (<o> ^name setup-search
        ^multiplayer true
        ^game-name <name>)
}

sp {finished-game-teaching*apply*setup-search*printtime
   (state <s> ^name finished-game-teaching
              ^top-state.dialog-context <dc>
              ^superstate.operator.response yes
              ^operator.name setup-search)
    (<dc> -^structure.multiplayer true
	      -^found-solution true)
 -{(<s> ^top-state.dialog-context.found-solution true)}
-->
   (write (cmd |ctf endlearntime.txt stats|))
}

sp {finished-game-teaching*propose*setup-search*yes
   (state <s> ^name finished-game-teaching
             -^top-state.dialog-context.structure.multiplayer true
              ^superstate.operator.response yes
              ^top-state.dialog-context.structure.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name setup-search
        ^multiplayer false
        ^game-name <name>)
}

#sp {finished-game-teaching*propose*setup-search*yes1
#   (state <s> ^name finished-game-teaching
#   		  	  ^top-state.smap.larger-than1 <clear>
#             -^top-state.dialog-context.structure.multiplayer true
#              ^superstate.operator.response yes
#              ^top-state.dialog-context.structure.handle <name>)
#-->
##(write (cmd print <ts> -d 3))
# #(interrupt)
#(<s> ^detect-predicate <pred>)
#(<pred> ^name <clear> ^copy-type shallow ^type binary)
#}

sp {finished-game-teaching*propose*setup-search*replay
   (state <s> ^name finished-game-teaching
              ^superstate.operator <sop>)
   (<sop> ^type replay-game ^multiplayer false ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name setup-search
        ^multiplayer false
        ^game-name <name>)
}

sp {finished-game-teaching*propose*prepare-game*replay
   (state <s> ^name finished-game-teaching
              ^superstate.operator <sop>)
   (<sop> ^type replay-game ^multiplayer true ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name prepare-game)
}

sp {finished-game-teaching*apply*prepare-game*replay
   (state <s> ^name finished-game-teaching
              ^operator.name prepare-game
              ^top-state <ts>
              ^superstate.operator <sop>)
   (<sop> ^type replay-game ^multiplayer true ^game-name <name>)
-->
   (<ts> ^game-replay <name>)
}

sp {finished-game-teaching*propose*prepare-game*yes
   (state <s> ^name finished-game-teaching
             ^top-state.dialog-context.structure.multiplayer true
              ^superstate.operator.response yes
              ^top-state.dialog-context.structure.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name prepare-game)
}

sp {finished-game-teaching*propose*clean-up-after-learning*no
   (state <s> ^name finished-game-teaching
              ^superstate.operator.response no)
-->
   (<s> ^operator <o> + =)
   (<o> ^name clean-up-after-learning)
}

sp {apply*clean-up-after-learning*procedural-predicate-learning
   (state <s> ^name interaction
              ^top-state <ts>
              ^operator.name pop-segment)
   (<ts> ^dialog-context <dc>)
   (<dc> ^name procedural -^learning-predicate)
-->
#(interrupt)
   (<ts> ^dialog-context <dc> -)
}
sp {apply*clean-up-after-learning*capture-data
   (state <s> ^name interaction
              ^top-state <ts>
              ^operator.name pop-segment)
   (<ts> ^dialog-context <dc>)
   (<dc> ^capture-data yes)
-->
   (<ts> ^dialog-context <dc> -)
   (<s> ^old-context <dc>)
   (write (cmd |ctf -a pertaskstats.txt stats|))
   (write (cmd |ctf -a smemuse.txt smem --stats mem-usage|))
   (write (cmd |ctf -a statsdc.txt stats -dc|))
}
sp {apply*clean-up-after-learning*capture-data*finished-learning
   (state <s> ^name interaction
              ^top-state <ts>
              ^operator.name pop-segment)
   (<ts> ^finished-learning <dc> ^dialog-context.capture-data yes)
-->
   (<ts> ^finished-learning <dc> -)
}
sp {finished-game-teaching*apply*clean-up-after-learning
   (state <s> ^name finished-game-teaching
              ^operator <o>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^interaction <int>)
   (<int> ^status <status> ^changes <changes>)
   (<o> ^name clean-up-after-learning)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type ok
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
   (<dc> ^capture-data yes)
 }
sp {finished-game-teaching*apply*prepare-game
   (state <s> ^name finished-game-teaching
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name prepare-game)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type tell-me-go
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
 }