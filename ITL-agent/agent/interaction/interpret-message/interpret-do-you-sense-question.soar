###################################################################
#
# interpret-do-you-see-question
#   Occurs when the instructor wishes to know if Rosie can see specific concepts or to learn what it can see
#       E.g. 'Do you see the goal of tower-of-hanoi?','What do you see?'
#
###################################################################

#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-do-you-sense-question
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^message-type do-you-sense-question
         -^interpreted true)
-->
  # (interrupt)
   (<s> ^operator <o> +)
   (<o> ^name interpret-do-you-sense-question
        ^message <msg>)
}

######
# OPERATOR ELABORATIONS
######

# Elaborate useful information from the message onto the operator
sp {interpret-message*elaborate*interpret-do-you-sense-question*do-you-see-game-concept
   (state <s> ^name interpret-message
               ^operator <o> +)
   (<o> ^name interpret-do-you-sense-question
        ^message.arg1 <arg1>)
   (<arg1> ^2.handle <gtype>
           ^2.<< 2 >>.handle <game-handle>)
-->
    (<o> ^game-handle <game-handle>
         ^gtype <gtype>)
}

#PR - TODO delete after you figure if when you retrieve from smem directly, do you still have access to handle
# Verifying whether the visible perception matches known goal/failure/action  
#sp {interpret-message*apply*interpret-what-is-question*create*do-you-see-game-concept*retrieve-game-handle
#   (state <s> ^name interpret-message
#              ^instructor-message <msg>
#              ^smem.command <cmd>
#              ^operator <o>)
#   (<o> ^name interpret-what-is-question
#        ^game-name <game>
#        ^gtype <gtype>)
#-->
#   (<cmd> ^query <q> ^depth 5)
#   (<q> ^spelling <game>)
#}
#
#sp {interpret-message*apply*interpret-what-is-question*create*do-you-see-game-concept*game-handle-retrieved*success
#   (state <s> ^name interpret-message
#              ^instructor-message <msg>
#              ^smem <smem>
#              ^operator <o>)
#   (<smem> ^result.retrieved <ret>
#           ^command <cmd>)
#   (<cmd> ^query <q> ^depth 5)
#   (<q> ^spelling <game>)
#   (<o> ^name interpret-what-is-question
#        ^game-name <game>
#        ^gtype <gtype>)
#   (<ret> ^spelling <game>
#          ^referent <ref>)
#   (<ref> ^handle <game-handle>)
#-->
#   (<o> ^game-handle <game-handle>)
#}

#PR - TODO address what if game name is not correct

#####
# OPERATOR APPLICATION
#####

sp {interpret-message*apply*interpret-do-you-sense-question*create*do-you-see-game-concept*interpreted
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^operator <o>)
   (<o> ^name interpret-do-you-sense-question
        ^game-handle <game-handle>
        ^gtype <gtype>)
-->        
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)    
   (<p> ^type agent-detect-game-concepts
        ^parameters <params>
        ^satisfaction <sat>)   
   (<params> ^gtype <gtype> 
             ^game-handle <game-handle>) 
   (<sat> ^dialog-event <de>)
   (<de> ^type explanation #PR - TODO change this to "dialog","conversation" to indicate there can eb more questions
         ^originator agent)
}