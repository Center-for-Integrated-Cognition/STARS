sp {evaluate-operator*elaborate*substate*0
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner.parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> -^referent
          -^structure-type << V VP G GP >>)
-->
   (<e> ^initial-referent-count 0)
}

sp {evaluate-operator*elaborate*substate*1
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner.parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> ^referent <sg>
         -^referent <> <sg>
         -^structure-type << V VP G GP >>)
-->
   (<e> ^initial-referent-count 1)
}

sp {evaluate-operator*elaborate*substate*2
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner.parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> }
         -^referent { <> <sg> <> <sg2>}
         -^structure-type << V VP G GP >>)
-->
   (<e> ^initial-referent-count 2)
}

sp {evaluate-operator*elaborate*substate*3
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner.parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>}
         -^referent { <> <sg> <> <sg2>  <> <sg3>}
         -^structure-type << V VP G GP >>)
-->
   (<e> ^initial-referent-count 3)
}

sp {evaluate-operator*elaborate*substate*4
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner.parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>} { < <sg> < <sg2> < <sg3> <sg4>}
         -^referent { <> <sg> <> <sg2>  <> <sg3> <> <sg4> }
         -^structure-type << V VP G GP >>)
-->
   (<e> ^initial-referent-count 4)
}


sp {evaluate-operator*elaborate*substate*5
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner.parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>}
                                { < <sg> < <sg2> < <sg3> <sg4>} { < <sg> < <sg2> < <sg3> < <sg4>}
         -^structure-type << V VP G GP >>)
-->
   (<e> ^initial-referent-count 5)  # or more
}

sp {apply*evaluate-operator*count-difference
   (state <s> ^operator <op>)
   (<op> ^name evaluate-operator
         ^superoperator.name merge
         ^evaluation <e>)
   (<e> ^initial-referent-count { >= <fc> <ic> }
        ^final-referent-count <fc>)
-->
   (<e> ^count-difference(- <ic> <fc>)
        ^value true)
}

sp {apply*evaluate-operator*count-difference2
   (state <s> ^operator <op>)
   (<op> ^name evaluate-operator
         ^superoperator.name merge
         ^evaluation <e>)
   (<e> ^initial-referent-count { < <fc> <ic> }
        ^final-referent-count <fc>)
-->
   (<e> ^count-difference (- <fc> <ic>)
        ^value true)
}

########## VERBS
### Assume they will have one viable referent that the merge doesn't change. 
sp {evaluate-operator*elaborate*substate*verb
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner <ass>)
   (<ass> ^structure-type PP
          ^parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> -^referent
           ^structure-type << V VP G GP >>
          -^complement)
-->
   (<e> ^initial-referent-count 1
        ^final-referent-count 1
        ^count-difference 0
        ^value true)
}


sp {evaluate-operator*elaborate*substate*verb*0
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner <ass>)
   (<ass> ^structure-type PP
          ^parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> -^referent
           ^structure-type << V VP G GP >>
           ^complement <comp>)
   (<comp> -^referent <sg>)
-->
   (<e> ^initial-referent-count 1)
}
sp {evaluate-operator*elaborate*substate*verb*1
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner <ass>)
   (<ass> ^structure-type PP
          ^parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> -^referent
           ^structure-type << V VP G GP >>
           ^complement <comp>)
   (<comp> ^referent <sg>
          -^referent <> <sg>)
-->
   (<e> ^initial-referent-count 1)
}

sp {evaluate-operator*elaborate*substate*verb*2
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner <ass>)
   (<ass> ^structure-type PP
          ^parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> -^referent
           ^structure-type << V VP G GP >>
           ^complement <comp>)
   (<comp> ^referent <sg> { < <sg> <sg2> }
          -^referent { <> <sg> <> <sg2>})
-->
   (<e> ^initial-referent-count 2)
}

sp {evaluate-operator*elaborate*substate*verb*3
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner <ass>)
   (<ass> ^structure-type PP
          ^parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> -^referent
           ^structure-type << V VP G GP >>
           ^complement <comp>)
   (<comp> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>}
          -^referent { <> <sg> <> <sg2>  <> <sg3>})
-->
   (<e> ^initial-referent-count 3)
}

sp {evaluate-operator*elaborate*substate*verb*4
   (state <s> ^operator <o>)
   (<o> ^name evaluate-operator
        ^superoperator <so>
        ^evaluation <e>)
   (<so> ^name merge
         ^assigner <ass>)
   (<ass> ^structure-type PP
          ^parent-receiver <aps>)
   (<e> -^initial-referent-count)
   (<aps> -^referent
           ^structure-type << V VP G GP >>
           ^complement <comp>)
   (<comp> ^referent <sg> { < <sg> <sg2> } { < <sg> < <sg2> <sg3>} { < <sg> < <sg2> < <sg3> <sg4>}
          -^referent { <> <sg> <> <sg2>  <> <sg3> <> <sg4> })
-->
   (<e> ^initial-referent-count 4)
}