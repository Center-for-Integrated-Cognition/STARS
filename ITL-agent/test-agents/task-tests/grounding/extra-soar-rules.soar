sp {top-state*elaborate*agent-params*testing
   (state <s> ^superstate nil
              ^agent-params <p>)
-->
   (<p> 
# ^report-tasks-to-output-link true
        ^debug-ids true
        ^print-test-output true

#       ^interrupt-operator interpret-message
#       ^interrupt-operator construct-task-operator
#       ^interrupt-operator construct-task-goal
#       ^print-new-task-shorthand true
#       ^print-incoming-messages true
#       ^print-parsed-messages true

#       ^interrupt-task-search true
#       ^print-perception true
        
        #   Turn this on to create a parse.txt file
        #   from the laird parser.
        ^save-parsed-messages true
        
   )
}

source internal-world.soar
source waypoint-map.soar

# Make every task exit immediately
sp {action*elaborate*current-task-segment*status*complete
   (state <s> ^problem-space.name action
              ^current-task-segment <seg>)
-->
   (<seg> ^status complete)
}

# Don't remove objects after task is finished
excise pop-task-segment*propose*change-world-state*delete-object

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   (<preds> ^predicate.handle in1)
   (<preds> ^predicate.handle on1)
   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*magicbot
   (state <s> ^superstate nil
              ^agent-params.domain magicbot
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   # Extract predicates via SVS
   (<pred-mon> ^predicate-info.predicate-handle in1)
   (<pred-mon> ^predicate-info.predicate-handle on1)

   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}

