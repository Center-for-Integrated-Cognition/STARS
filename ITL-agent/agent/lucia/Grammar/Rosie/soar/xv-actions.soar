#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\xv-actions.ecg'.

#   DoTransfer schema
sp {comprehend-word*evoked-schema*DoTransfer*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema DoTransfer
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name DoTransfer
               ^is <a>
               ^object2 nil)
   (<a> ^a DoTransfer)
   (<e1> ^schema ActOnIt
         ^target <e-target>)
}

#   DoTransfer schema
sp {comprehend-word*evoked-schema*DoTransfer*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema DoTransfer
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object2 nil)
   (<a> ^a DoTransfer)
   (<e1> ^schema ActOnIt
         ^target <e-target>)
}

#   ActionForTime schema
sp {comprehend-word*evoked-schema*ActionForTime*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ActionForTime
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name ActionForTime
               ^is <a>
               ^time nil)
   (<a> ^a ActionForTime)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   ActionForTime schema
sp {comprehend-word*evoked-schema*ActionForTime*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ActionForTime
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^time nil)
   (<a> ^a ActionForTime)
   (<e1> ^schema Action
         ^target <e-target>)
}

