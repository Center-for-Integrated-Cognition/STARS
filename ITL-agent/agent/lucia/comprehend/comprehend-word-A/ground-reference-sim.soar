##!
# @file
#
# @created p 20201008
# File: ground-reference-sim.soar
# Author: Peter 
# Created: 8 October 2020
#
# Desc: Looks up a RefDesc in the context to find its referent.
#		This version is customized for the Rosie environment.
#
#		The result may be a single item, a set of items,
#		or nothing.
#
#   THIS VERSION IS FOR RUNNING WITH SIMULATED PERCEPTION
#
#   PL 10/21/2020 There are two versions of this operator,
#   the *no-sim version and the *sim version.
#   This is the *sim version, with -sim in the file name.
#       1.  Each version has its own *propose*ground-reference*
#           rule. The operator proposed has an attibute
#           ^simulated-perception true/false depending on whether
#           agent-params.simulate-perception is true or not.
#       2.  Most of the apply rules do not care, at least now,
#           which version they are fired under. All these rules
#           are commented out in the -sim version of the file.
#       3.  The apply rules where it matters have either *no-sim
#           or *sim appended to their names, they check the
#           ^simulated-perception true/false on the operator,
#           and have appropriate differences in the code.
#       4.  It may well be that, as more sentences are developed,
#           more rules will have to be uncommented and differentiated.
#       5.  The 10/21/2020 version works for the Robot 001
#           sentence: "Move the fork onto the table.",
#           which is the first sentence of the kitchen script.
#       6.  In the 10/21/2020 version, only the *category*not-ONE*
#           and *category*not-ONE*object* apply rules have both versions.
#           The *post-name-filter apply rule has only a *no-sim
#           version for now.
#       7.  On 5/4/2021 the *category-empty rule was uncommented
#           and made to work for the *sim mode.
#       8.  It is likely that more work will be needed here.
#
# Details:
#	The ground-reference operator is proposed whenever:
#		1. lexical-access is marked as done
#		2. match-construction is marked as done
#		3. the current ^cxn on the state has a meaning
#			which is a RefDesc
#       4. the ^rosie-category of the RefDesc is not "concept"
#           - these are handled by lookup-concept
#       5. the ^givenness of the RefDesc is not "relative-pronoun"
#           - these should have been resolved previously
#       6. the ^givenness of the RefDesc is not "proper-name"
#           - these are handled by ground-proper-name
#       7. a new version for "proper-name" is being added
#          on 5/7/2021 to handle a situation in the *sim
#          mode where a person is in the world model.
#	The operator retracts whenever ^reference resolved is set
#
#	The value of the ^category wme of the RefDesc will be
#	a "ref-desc" having a ^rosie-category value that
#	corresponds to category items in the Rosie ontology.
#
#	The *category version of *apply*ground-reference looks in
#	the world on the top state to find any objects that have
#	the indicated Rosie category.  All those found will be posted
#	on the state with a ^referent wme and a ^category done flag is set.
#	The rule fires once for each candidate found.
#
#	The *category-empty version of *apply*ground-reference
#	looks for the case where no objects in the world have the
#	indicated Rosie category.  It posts ^referent NONE on the state
#	as well as ^category done and ^reference resolved flags.
#	The result is that no referent will be found for this RefDesc.
#
#	Once a set of candidate referents has been posted by the *category
#	rule, they must be filtered by any properties specified.  This is
#	done by posting filters to the state and then applying them
#
#	The *post-name-filter, *post-shape-filter, *post-size-filter, and
#	*post-color-filter rules create filters of these four types.
#	Each filter has ^class and ^value attributes.
#
#	The *apply-filter rule may fire many times.  Each firing removes
#	a single candidate from the set if that candidate does not comply
#	with the requirements of a given filter.  Each firing also removes
#	its filter from the state, which may be reduncant.
#
#	The *remove-filter rule removes any filter which did not apply
#	to any candidate.
#
#	The *modifiers rule looks at the head property description on the 
#	^modifiers list of the RefDesc, posts a filter for it, and replaces
#	the head of the list with the ^next modifier.  Thus as many filters
#	will be applied as needed to apply all the modifiers that were
#	present in the RefExpr.
#
#	Finally either the *done-found or the *done-none rule will fire.
#	For each ^referent on the state after all the filtering is done,
#	that referent will put as a ^referent on the original RefDesc.
#	This will happen multiple times if multiple candidates remain.
#	If no candidates are left, the *done-none rule will put a
#	^referent NONE wme on the RefDesc.
#
#	Whichever *done- rule fires will post ^reference resolved
#	on the state, causing the operator to be retracted.
#


#############   RULES FOR THE PROPER NAME OF A PERSON  ################

#   For now these rules will only run in SIMULATED PERCEPTION mode.
#   When we're not simulating perception, perhaps we wouldn't
#   be seeing people in the world.

#    Propose an operator to resolve a reference of a RefDesc
#    This rule is only for after lexical access for a proper name.
#    This rule should fire ONLY when IN SIMULATED PERCEPTION mode
#    However, it might be good to have this in either mode.
sp {comprehend-word*propose*ground-reference*person*sim
   (state <s> ^problem-space comprehend-word
              ^lexical-access done  # May need to see comprehend-word-done as proposed
             -^match-construction done  #   This should happen right after lexical-access
              ^cxn <cxn>
             -^reference resolved
              ^top-state.agent-params.simulate-perception true)
   (<cxn> ^is.a ProperName
          ^m <ref-desc>)
   (<ref-desc> ^is.a RefDesc
               ^is.a RosieObject
               ^is.a KnownObject)
   (<ref-desc> ^modifiers nil
               ^givenness proper-name       #   Proper names handled here
               ^rosie-category person       #   This should be a person
               ^name <proper-name>          #   Get the actual name to report
              -^category.rosie-category concept #   Concepts should be looked up in smem
              -^category function           #   Functions should be dealt with elsewhere
              -^givenness relative-pronoun  #   This should have been resolved previously
              -^givenness deictic)          #   Ignore "this one" here
   #    Avoid a weird special case
   #    This happens for a sentence like "Drive forward one meter."
   #    Really "one" as a pronoun should not look like a noun
   #    that can be matched by BareNoun, but if not then we cannot
   #    get something like SpecPropNoun for a sentence like
   #    "Put the green one in the pantry."
  -(<cxn> ^cxn-name BareNoun
          ^noun.cxn-name ONE-pronoun) 
-->
   (<s> ^operator <o> +)
   (<o> ^name ground-reference
        ^type resolution
        ^meaning <ref-desc>
        ^simulated-perception true
        ^debug-info (concat |Find the referent for a given RefDesc for "| <proper-name> |".|))
}


#    An apply rule to find a person in the world.
#    This rule should fire only when NOT in SIMULATED PERCEPTION mode
sp {comprehend-word*apply*ground-reference*category*person*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   #    Check for a named person
   #    Why is the rosie-category in a different place
   #    here than for other things???
   (<ref-desc> ^rosie-category person
               ^givenness proper-name)
   #    Select all referents of that category
   (<ts> ^world <world>)
   (<world> ^objects.object <object>)
   (<object> ^predicates <predicates>)
   #    Look for a person
   (<predicates> ^category person)
-->
   #    Post the referent on the state
   (<s> ^category done
        ^referent <object>)
}

#   Post filters from the ref-desc
#    This is a special case for a ProperName of a person.
#    The way the name is represented is rather weird.
#    This rule should fire only when IN SIMULATED PERCEPTION mode
sp {comprehend-word*apply*ground-reference*post-name-filter*person*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   #    Get the name
   (<ref-desc> ^givenness proper-name
               ^rosie-category person
               ^handle <name>)
-->
   #    Post a name filter
   (<s> ^filter <filter>
        ^modifiers nil) #   There should be no modifiers to a ProperName
   (<filter> ^class name
             ^value <name>)
}


#############   RULES FOR OTHER NORMAL STUFF  ################

#    Propose an operator to resolve a reference of a RefDesc
#    This rule is only for RefDesc's that come from
#    a match-construction, ie. normal objects
#    This rule should fire ONLY when IN SIMULATED PERCEPTION mode
sp {comprehend-word*propose*ground-reference*sim
   (state <s> ^problem-space comprehend-word
              ^lexical-access done	# May need to see comprehend-word-done as proposed
              ^match-construction done  #   This should happen after match-construction
              ^cxn <cxn>
             -^reference resolved
              ^top-state.agent-params.simulate-perception true)
   (<cxn> ^m <ref-desc>)
   (<ref-desc> ^is.a RefDesc
               ^modifiers <modifiers>
              -^category.rosie-category concept #   Concepts should be looked up in smem
              -^category function           #   Functions should be dealt with elsewhere
              -^givenness relative-pronoun	#	This should have been resolved previously
              -^givenness deictic           #   Ignore "this one" here
              -^givenness proper-name)      #   Proper names handled elsewhere
   #    Avoid a weird special case
   #    This happens for a sentence like "Drive forward one meter."
   #    Really "one" as a pronoun should not look like a noun
   #    that can be matched by BareNoun, but if not then we cannot
   #    get something like SpecPropNoun for a sentence like
   #    "Put the green one in the pantry."
  -(<cxn> ^cxn-name BareNoun
          ^noun.cxn-name ONE-pronoun) 
-->
   (<s> ^operator <o> +
        ^modifiers <modifiers>)
   (<o> ^name ground-reference
        ^type resolution
        ^meaning <ref-desc>
        ^simulated-perception true
        ^debug-info (concat |Find the referent for a given RefDesc.|))
}


##   Handle the case where the noun already has been grounded
##   This will happen for KnownObjects
#sp {comprehend-word*apply*ground-reference*category*already-grounded
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>)
#   #    Get the category
#   (<rosie-ref-desc> ^referent { <referent> <> nil}
#                    -^givenness |one-pronoun|)
#-->
#   #    Post the referent on the state
#   (<s> ^category done
#        ^referent <referent>)
#}

#   Look for an object that fits the special case for "the current location"
#   This rule had a weird interaction with the rule called
#   comprehend-word*apply*ground-reference*category*not-ONE*spatial-shape*fails.
#   That rule has to abort the grounding if a spatial shape matches
#   something in the world but their ^spatial-shape values are different.
#   That will happen if we have created a new object for "an empty room"
#   and later want to ground "the current location".
#   So that other rule now will not fire if we're looking for
#   "the current location".
#
#   PL 8/18/2020 - a Location is no longer a spatial-shape, instead
#   it has ^category location. Thus the above comments no longer apply.
#   This rule should fire ONLY when IN SIMULATED PERCEPTION mode
#   In SIM mode the formatting of the object in the world is different
#sp {comprehend-word*apply*ground-reference*category*current-location*sim
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^top-state <ts>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>
#        ^simulated-perception true)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^modifiers <modifiers>)
#   #    Get the category
#   (<rosie-ref-desc> ^rosie-category location)
#   #    Look for the current location
#   (<modifiers> ^is.a PropertyDescriptor
#                ^class state
#                ^name current)
#   #    Select all referents that fit
#   (<ts> ^world <world>)
#   (<world> ^objects.object <object>)
#   #    Look for the SIM mode form
#   (<object> ^item-type object
#             ^predicates <predicates>
#             ^handle <handle>)
#   (<predicates> ^category location
#                 ^modifier1 current1)
#-->
#   #    Post the referent on the RefDesc
#   (<ref-desc> ^referent nil -
#               ^referent <object>)
#   #    Post the referent on the state
#   (<s> ^category done
#        ^referent <object>)
#   #    Set done flag
#   (<s> ^reference resolved)
#}

#   Look for an object that fits the special case for locations
#   that have a state name like "current" or "starting"
#   This rule should fire ONLY when IN SIMULATED PERCEPTION mode
#   In SIM mode the formatting of the object in the world is different
sp {comprehend-word*apply*ground-reference*category*named-location*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   (<ref-desc> ^category <rosie-ref-desc>
               ^modifiers <modifiers>)
   #    Get the category
   (<rosie-ref-desc> ^rosie-category location)
   #    Look for the current location
   (<modifiers> ^is.a PropertyDescriptor
                ^class state
                ^name <state-name>)
   #    Select all referents that fit
   (<ts> ^world <world>)
   (<world> ^objects.object <object>)
   #    Look for the SIM mode form
   (<object> ^item-type object
             ^predicates <predicates>
             ^handle <handle>)
   (<predicates> ^category location
                 ^modifier1 <state-name>)
-->
   #    Post the referent on the RefDesc
   (<ref-desc> ^referent nil -
               ^referent <object>)
   #    Post the referent on the state
   (<s> ^category done
        ^referent <object>)
   #    Set done flag
   (<s> ^reference resolved)
}

#   Look for an object that fits the special case for locations
#   that have a state name like "current" or "starting", and
#   report NONE if none was found.
#   This rule should fire ONLY when IN SIMULATED PERCEPTION mode
#   In SIM mode the formatting of the object in the world is different
sp {comprehend-word*apply*ground-reference*category*named-location*sim*fails
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   (<ref-desc> ^category <rosie-ref-desc>
               ^modifiers <modifiers>)
   #    Get the category
   (<rosie-ref-desc> ^rosie-category location)
   #    Look for the current location
   (<modifiers> ^is.a PropertyDescriptor
                ^class state
                ^name <state-name>)
   #    Select all referents that fit
 -{(<ts> ^world <world>)
   (<world> ^objects.object <object>)
   #    Look for the SIM mode form
   (<object> ^item-type object
             ^predicates <predicates>
             ^handle <handle>)
   (<predicates> ^category location
                 ^modifier1 <state-name>)}
-->
   #    Post the referent on the RefDesc
   (<ref-desc> ^referent nil -
               ^referent NONE)
   #    Set done flag
   (<s> ^reference resolved)
}

##   Look for objects of a given Rosie category, NOT for pronoun ONE
##    This rule should fire ONLY when IN SIMULATED PERCEPTION mode
#   PL 11/3/2020 It appears this is not really needed in sim mode.
#sp {comprehend-word*apply*ground-reference*category*not-ONE*sim
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^top-state <ts>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>
#        ^simulated-perception true)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^givenness { <x> <> |one-pronoun| })
#   #    Get the category - in Rosie mode
#   (<rosie-ref-desc> ^rosie-category { <r-category> <> nil }
#                     ^category <category>)
#   #    Select all referents of that category
#   (<ts> ^world <world>)
#   (<world> ^objects.object <object>)
#   (<object> ^predicates <predicates>)
#   #    Don't do it here if the category is spatial-shape
#   (<predicates> ^category { <category> <> spatial-shape})
#-->
#   #    Post the referent on the state
#   (<s> ^category done
#        ^referent <object>)
#}

##   Look for objects of a given Rosie category, NOT for pronoun ONE
##   This version looks for a "salient" object
##   For now, this should only happen for a definite RefDesc
##   and only in hypothetical mode.
#sp {comprehend-word*apply*ground-reference*category*salient
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^top-state <ts>
#              #    Look for the hypothetical flag
#              ^superstate.comprehension.hypothetical true)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^givenness definite)
#   #    Get the category
#   (<rosie-ref-desc> ^rosie-category { <rosie-category> <> nil })
#   #    Select all referents of that category
#   (<ts> ^discourse.salient <salient>)
#   (<salient> ^reference <salient-refDesc>)
#   #    Make sure the categories match
#   (<salient-refDesc> ^category.rosie-category <rosie-category>)
#   #    Then get the object
#   (<salient-refDesc> ^referent { <object> <> nil })
#-->
#   #    Post the referent on the state
#   (<s> ^category done
#        ^referent <object>)
#}

#   Look for objects of a any reasonable Rosie category,
#   based on the OTHER category, if it is not nil,
#   NOT for pronoun ONE by itself.
#   This rule should fire only when IN SIMULATED PERCEPTION mode
sp {comprehend-word*apply*ground-reference*category*not-ONE*object*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   (<ref-desc> ^category <rosie-ref-desc>
               ^givenness { <x> <> |one-pronoun| })
   #    Get the category
   (<rosie-ref-desc> ^rosie-category << object block location >>
                     ^category { <category> <> nil })  #   The OTHER category
   #    Select all referents of that category
   (<ts> ^world <world>)
   (<world> ^objects.object <object>)
   (<object> ^predicates <predicates>)
   #    Don't do it here if the category doesn't match
   (<predicates> ^category <category>)
-->
   #    Post the referent on the state
   (<s> ^category done
        ^referent <object>)
}


#   A rule to ground MapLocations to the world, if possible.
#   based on the rosie-category itself, if the OTHER category is nil,
#   NOT for pronoun ONE by itself.
#   This works well for things like MapLocations.
#   This rule should fire only when IN SIMULATED PERCEPTION mode
sp {comprehend-word*apply*ground-reference*category*not-ONE*rosie-category*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   (<ref-desc> ^category <rosie-ref-desc>
               ^givenness { <x> <> |one-pronoun| })
   #    Get the category
   (<rosie-ref-desc> ^rosie-category { <rosie-category>  << block location >> }
                     ^category nil  #   Only if the OTHER category is nil
                    -^root-category
                    -^handle )
   #    Select all referents of that category
   (<ts> ^world <world>)
   (<world> ^objects.object <object>)
   (<object> ^predicates <predicates>)
   (<predicates> ^category <rosie-category>)
-->
   #    Post the referent on the state
   (<s> ^category done
        ^referent <object>)
}

#   Look for objects with a particular root-category
#   NOT for pronoun ONE by itself
#   This rule should fire only when IN SIMULATED PERCEPTION mode
sp {comprehend-word*apply*ground-reference*category*not-ONE*root-category*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   (<ref-desc> ^category <rosie-ref-desc>
               ^givenness { <x> <> |one-pronoun| })
   #    Get the category
   (<rosie-ref-desc> ^rosie-category << object block location >>
                     ^category nil  #   Only if the OTHER category is nil
                     ^root-category <root-category>
                    -^handle )
   #    Select all referents of that category
   (<ts> ^world <world>)
   (<world> ^objects.object <object>)
   (<object> ^root-category <root-category>)
-->
   #    Post the referent on the state
   (<s> ^category done
        ^referent <object>)
}

#   Look for objects with a specific handle
#   NOT for pronoun ONE by itself
#   This rule should fire only when IN SIMULATED PERCEPTION mode
sp {comprehend-word*apply*ground-reference*category*not-ONE*handle*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   (<ref-desc> ^category <rosie-ref-desc>
               ^givenness { <x> <> |one-pronoun| })
   #    Get the category
   (<rosie-ref-desc> ^rosie-category << object block location >>
                     ^category nil  #   Only if the OTHER category is nil
                     ^handle <handle>
                    -^root-category )
   #    Select all referents of that category
   (<ts> ^world <world>)
   (<world> ^objects.object <object>)
   (<object> ^handle <handle>)
-->
   #    Post the referent on the state
   (<s> ^category done
        ^referent <object>)
}

##   Look for objects of a given Rosie category, NOT for pronoun ONE
##   A special case for spatial-shape
##   This should fire if there is an object in the world whose ^category
##   is spatial-shape and whose ^spatial-shape value is the same
##   as the ^spatial-shape value under the ^category of our RefDesc.
##   This is typically an object created from a definite reference.
##   When this matches, we assume we have found the right object.
#sp {comprehend-word*apply*ground-reference*category*not-ONE*spatial-shape*definite
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^top-state <ts>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^givenness { <x> <> |one-pronoun| })
#   #    Get the category
#   (<rosie-ref-desc> ^rosie-category spatial-shape
#                     ^spatial-shape <category-value>)
#   #	Select all referents of that category
#   (<ts> ^world <world>)
#   (<world> ^objects.object <object>)
#   (<object> ^predicates <predicates>)
#   #    This will fail for <category> == spatial-shape
#   #    if the shapes are not the same.
#   (<predicates> ^category spatial-shape
#                 ^spatial-shape <category-value>)
#-->
#   #	Post the referent on the state
#   (<s> ^category done
#        ^referent <object>)
#}

##   Look for objects of a given Rosie category, NOT for pronoun ONE
##   A special case for spatial-shape
##   This should fire if there is an object in the world whose ^category
##   is location.
##   This is typically an object created from a indefinite reference.
##   When this matches, we assume we have found the right object.
#sp {comprehend-word*apply*ground-reference*category*not-ONE*spatial-shape*indefinite
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^top-state <ts>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^givenness { <x> <> |one-pronoun| })
#   #    Get the category
#   (<rosie-ref-desc> ^rosie-category spatial-shape
#                     ^spatial-shape location1)
#   #    Select all referents of that category
#   (<ts> ^world <world>)
#   (<world> ^objects.object <object>)
#   (<object> ^predicates <predicates>)
#   #    Match the type of spatial-shape.
#   (<predicates> ^category location)
#-->
#   #    Post the referent on the state
#   (<s> ^category done
#        ^referent <object>)
#}

##   Look for objects of a given Rosie category, NOT for pronoun ONE
##   A special case for spatial-shape
##   This should fire if there is NO object in the world whose ^category
##   is spatial-shape and whose ^spatial-shape value is the same
##   as the ^spatial-shape value under the ^category of our RefDesc.
##   When this matches, we assume we have NOT found the right object.
##   DO NOT match this rule when we're looking for "the current location."
##   This rule had a weird interaction with the rule called
##   comprehend-word*apply*ground-reference*category*current-location.
##   This rule has to abort the grounding if a spatial shape matches
##   something in the world but their ^spatial-shape values are different.
##   That will happen if we have created a new object for "an empty room"
##   and later want to ground "the current location".
##   So this rule now will not fire if we're looking for
##   "the current location".
#sp {comprehend-word*apply*ground-reference*category*not-ONE*spatial-shape*fails
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^top-state <ts>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^modifiers <modifiers>
#               ^givenness { <x> <> |one-pronoun| })
#   #    Get the category
#   (<rosie-ref-desc> ^rosie-category spatial-shape
#                     ^spatial-shape <category-value>)
#   #    Select all referents of that category
#   (<ts> ^world <world>)
#   (<world> ^objects.object <object>)
#   (<object> ^predicates <predicates>)
#   #    This will match for <category> == spatial-shape
#   #    if the shapes are not the same.
#   (<predicates> ^category spatial-shape
#                 ^spatial-shape { <value2> <> <category-value> })
#   #    Inhibit this from firing if the pattern we are trying
#   #    to match is for "the current location."
# -{(<rosie-ref-desc> ^rosie-category spatial-shape
#                     ^spatial-shape location1)
#   (<modifiers> ^class state
#                ^is.a PropertyDescriptor
#                ^name current)}
#-->
#   #    Post NONE referent on the RefDesc
#   (<ref-desc> ^referent nil -
#               ^referent NONE)
#   #    Set done flag
#   (<s> ^category done
#        ^reference resolved)
#}

##   Look for objects of a given Rosie category, FOR pronoun ONE
##   In this case the set of candidates should come from the
##   referents already found for "one"
#sp {comprehend-word*apply*ground-reference*category*for-ONE-with-antecedent
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^givenness |one-pronoun|)
#   #    Get the category
#   (<rosie-ref-desc> ^rosie-category { <category> <> nil })
#   #    Select all referents of the pronoun
#   (<rosie-ref-desc> ^referent { <object> <> nil })
#-->
#   #    Post the referent on the state
#   (<s> ^category done
#        ^referent <object>)
#}
#
##   Look for objects of a given Rosie category, FOR pronoun ONE
##   In this case the set of candidates should come from the
##   objects in the world
#sp {comprehend-word*apply*ground-reference*category*for-ONE-no-antecedent
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^top-state <ts>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>
#               ^givenness |one-pronoun|)
#   #    Get the category
#   (<rosie-ref-desc> ^rosie-category { <category> <> nil })
#   #    Detect the lack of an antecedent
#   (<rosie-ref-desc> ^referent nil)
#   #    Select all referents of that category
#   (<ts> ^world <world>)
#   (<world> ^objects.object <object>)
#   (<object> ^predicates <predicates>)
#   (<predicates> ^category <category>)
#-->
#   #    Post the referent on the state
#   (<s> ^category done
#        ^referent <object>)
#}

#   There are no objects of a given Rosie category
#   This rule should fire only when IN SIMULATED PERCEPTION mode
sp {comprehend-word*apply*ground-reference*category-empty*sim
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name ground-reference
        ^meaning <ref-desc>
        ^simulated-perception true)
   (<ref-desc> ^category <rosie-ref-desc>
               ^referent nil)
   #    Get the category
   (<rosie-ref-desc> ^rosie-category << object block location >>
                     ^category <category>)
   #    Don't fire this rule if the RefDesc is for "the current location"
 -{(<ref-desc> ^category <rd-category>
               ^givenness definite
               ^modifiers <modifiers>)
   (<modifiers> ^is.a PropertyDescriptor
                ^class state
                ^predicate <current-property>)
   (<current-property> ^item-type property
                       ^type state
                       ^handle current)}
   #	Select all referents of that category
   (<ts> ^world <world>)
 -{(<world> ^objects.object <object>)
   (<object> ^predicates <predicates>)
   (<predicates> ^category <category>)}
-->
   #    Set category done flag
   (<s> ^category done)
}

#	Post filters from the ref-desc
#sp {comprehend-word*apply*ground-reference*post-name-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>)
#   #	Get the name
#   (<rosie-ref-desc> ^name { <name> <> nil })
#-->
#   #	Post a name filter
#   (<s> ^filter <filter>)
#   (<filter> ^class name
#             ^value <name>)
#}

#sp {comprehend-word*apply*ground-reference*post-shape-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>)
#   #	Get the shape
#   (<rosie-ref-desc> ^shape { <shape> <> nil })
#-->
#   #	Post a shape filter
#   (<s> ^filter <filter>)
#   (<filter> ^class shape
#             ^value <shape>)
#}
#
#sp {comprehend-word*apply*ground-reference*post-size-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>)
#   #	Get the size
#   (<rosie-ref-desc> ^size { <size> <> nil })
#-->
#   #	Post a size filter
#   (<s> ^filter <filter>)
#   (<filter> ^class size
#             ^value <size>)
#}
#
#sp {comprehend-word*apply*ground-reference*post-color-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>)
#   #	Get the color
#   (<rosie-ref-desc> ^color { <color> <> nil })
#-->
#   #	Post a color filter
#   (<s> ^filter <filter>)
#   (<filter> ^class color
#             ^value <color>)
#}

#sp {comprehend-word*apply*ground-reference*post-state-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   (<ref-desc> ^category <rosie-ref-desc>)
#   #    Get the state
#   (<rosie-ref-desc> ^state { <state> <> nil })
#-->
#   #    Post a state filter
#   (<s> ^filter <filter>)
#   (<filter> ^class state
#             ^value <state>)
#}
#
##   If we are in hypothetical mode, we want to filter
##   out all concrete objects for a definite RefDesc.
##   This means filter out all with ^dialog-object true.
#sp {comprehend-word*apply*ground-reference*post-hypothetical-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              #    Look for the hypothetical flag
#              ^superstate.comprehension.hypothetical true)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #    Only if the RefDesc is definite
#   (<ref-desc> ^givenness definite)
#-->
#   #    Post a state filter
#   (<s> ^filter <filter>)
#   (<filter> ^class dialog-object
#             ^value true)
#}

##	Apply any filter that has been posted
#sp {comprehend-word*apply*ground-reference*apply-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^filter <filter>
#              ^referent <object>)
#   (<o> ^name ground-reference)
#   (<filter> ^class <class>
#             ^value <value>)
#   #	Remove a referent that doesn't pass the filter
#   (<object> ^predicates <predicates>)
#   (<predicates> -^<class> <value>)
#-->
#   #	Delete the referent from the state
#   (<s> ^referent <object> -)
#}
#
##	Remove a posted filter whether it applied or not 
#sp {comprehend-word*apply*ground-reference*remove-filter
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^filter <filter>)
#   (<o> ^name ground-reference)
#   (<filter> ^class <class>
#             ^value <value>)
#-->
#   #	Delete this filter
#   (<s> ^filter <filter> -)
#}
#
##   Apply any modifiers
#sp {comprehend-word*apply*ground-reference*modifiers
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^category done
#              ^modifiers { <modifier> <> nil })
#   (<o> ^name ground-reference)
#   #	Get the details of this modifier
#   (<modifier> ^class <class>
#               ^name <name>
#               ^next <next>)
#-->
#   #	Post a new filter
#   (<s> ^filter <filter>)
#   (<filter> ^class <class>
#             ^value <name>)
#   #	Get the next modifier
#   (<s> ^modifiers <modifier> -
#        ^modifiers <next>)
#}
#
##   Apply any modifiers that have been added AFTER a noun
##	This applies for relative property clauses
#sp {comprehend-word*apply*ground-reference*modifiers-after*property
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#             -^category done
#              ^modifiers { <modifier> <> nil })
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #	Get the details of this modifier
#   (<modifier> ^is.a PropertyDescriptor
#               ^class <class>
#               ^name <name>
#               ^predicate <predicate>
#               ^next <next>)
#   #	Get the existing referents on the state
#   (<ref-desc> ^referent { <referent> <> nil })
#-->
#   #	Put the existing referents on the state
#   (<s> ^referent <referent>)
#   #	Post a new filter
#   (<s> ^filter <filter>)
#   (<filter> ^class <class>
#             ^value <name>)
#   #	Get the next modifier
#   (<s> ^modifiers <modifier> -
#        ^modifiers <next>)
#}
#
##	This applies for relative prep phrase clauses
#sp {comprehend-word*apply*ground-reference*modifiers-after*prep-phrase
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
##             -^category done
#              ^modifiers nil
#              ^cxn <rel-clause>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #	Look for something like a relative clause
#   (<ref-desc> ^category nil
#               ^givenness nil
#               ^modifiers nil
#)#               ^relation nil)
#   #	Get the details of this prep phrase
#   (<rel-clause> ^head <head>
#                 ^prepPhrase <phrase>)
#   (<phrase> ^m <relation>)
#   #	Get the existing referents on the state
#   (<ref-desc> ^referent <referent>)
#-->
#   #	Put the existing referents on the state
#   (<s> ^referent <referent>)
#}
#
##	Finish resolution - found at least one
#sp {comprehend-word*apply*ground-reference*done-found
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^referent <referent>
#              ^modifiers nil    #    All modifiers have been applied
#             -^filter <filter>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #	Ignoring givenness for now
#   (<ref-desc> ^referent <old-ref>)
#-->
#   #	Post the referent on the RefDesc
#   (<ref-desc> ^referent <old-ref> -
#               ^referent <referent>)
#   #	Set done flag and remove the referent from the state
#   (<s> ^reference resolved
#        ^referent <referent> -)
#}
#
##	Finish resolution - found none
#sp {comprehend-word*apply*ground-reference*done-none
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^category done
#              ^modifiers nil    #    All modifiers have been applied
#             -^referent <referent>	#	No referents on the state
#             -^filter <filter>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #	Ignoring givenness for now
#   (<ref-desc> ^referent nil)	#	No referents on the RefDesc
#   #    Avoid the special case for "one"
#  -(<ref-desc> ^category.givenness one-pronoun)
#-->
#   #	Post the referent on the RefDesc
#   (<ref-desc> ^referent nil -
#               ^referent NONE)
#   #    Set done flag and clear the modifiers
#   (<s> ^reference resolved
#        ^modifiers nil -)
#}
#
##   Finish resolution - found none, special case for "one"
##   THIS VERSION ONLY WORKS FOR A SINGLE MODIFIER!!!
#sp {comprehend-word*apply*ground-reference*done-none*one
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^category done
#              ^modifiers nil    #    All modifiers have been applied
#             -^referent <referent>  #   No referents on the state
#             -^filter <filter>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #    Ignoring givenness for now
#   (<ref-desc> ^referent nil   #   No referents on the RefDesc
#               ^modifiers <modifiers>)
#   #    Handle the special case for "one"
#  (<ref-desc> ^category <rosie-ref-desc>)
#  (<rosie-ref-desc> ^givenness one-pronoun
#                    ^<attr> nil)
#  (<modifiers> ^class <attr>
#               ^name <value>)
#-->
#   #    Add the modifier predicate
#   (<rosie-ref-desc> ^<attr> nil -
#                     ^<attr> <value>)
#   #    Post the referent on the RefDesc
#   (<ref-desc> ^referent nil -
#               ^referent NONE)
#   #    Set done flag and clear the modifiers
#   (<s> ^reference resolved
#        ^modifiers nil -)
#}
#
##	Finish resolution - some were already there
#sp {comprehend-word*apply*ground-reference*done-already-there
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^modifiers nil    #    All modifiers have been applied
#             -^referent <referent>	#	No referents on the state
#             -^filter <filter>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #	Ignoring givenness for now
#   (<ref-desc> ^referent { <referent> <> nil }	#	Some referents on the RefDesc
#               ^quantified nil) #   Only if there is no quantifier
#-->
#   #    Set done flag
#   (<s> ^reference resolved
#        ^modifiers nil -)
#}
#
##   Before finishing, add any specific quantifier
##   Also, modify other parts of the object that
##   should be different when quantified.
##   This is currently coded for any quantifier,
##   but it may only apply properly to "all".
#sp {comprehend-word*apply*ground-reference*add-quantification
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^referent <referent>)  #   Referent on the state
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #   Find the quantifier
#   (<ref-desc> ^quantified { <quantifier> <> nil })
#   (<quantifier> ^is.a Quantification
#                 ^type <quant-type>)
#   #   Find where to make changes
#   (<referent> ^item-type object
#               ^predicates <predicates>)
#   #   Find category, only do this for hypotheticals
#   (<predicates> ^category <category>
#                 ^dialog-object true
#                 ^is-visible1 not-visible1)
#-->
#   #    Add the quantification and make other changes
#   (<referent> ^item-type object -
#               ^item-type <category>)
#   (<predicates> ^is-visible1 not-visible1 -
#                 ^is-visible1 unknown-visible1
#                 ^quantified <quant>)
#   (<quant> ^handle <quant-type>)
#}
#
##   Like above, but only for number quantifiers
#sp {comprehend-word*apply*ground-reference*add-number
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              ^referent <referent>)  #   Referent on the state
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #   Find the quantifier
#   (<ref-desc> ^quantified { <quantifier> <> nil })
#   (<quantifier> ^is.a Concept
#                 ^concept-type number
#                 ^concept-handle <handle>)
#   #   Find where to make changes
#   (<referent> ^item-type object
#               ^predicates <predicates>)
#   #   Find category, only do this for hypotheticals
#   (<predicates> ^category <category>
#                 ^dialog-object true
#                 ^is-visible1 not-visible1)
#-->
#   #    Add the quantification
#   (<predicates> ^number (strlen <handle>))
#}
#
#
##   Finish resolution - some were already there
##   If the meaning has a relation and the referent object
##   does not, we need to add it there.
##   This works only for a PrepRelation.
##   This should only be an issue in hypothetical mode.
##   This version handles a relation with a single argument,
##   like any ordinary preposition.
#sp {comprehend-word*apply*ground-reference*done-already-there*with-relation-1
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              #    Look for the hypothetical flag
#              ^superstate.comprehension.hypothetical true
#              ^modifiers nil    #    All modifiers have been applied
#             -^referent <referent>  #   No referents on the state
#             -^filter <filter>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #    Ignoring givenness for now
#   (<ref-desc> ^referent { <referent> <> nil }  #   Some referents on the RefDesc
#               ^relation { <relation> <> nil }) #   A relation on the RefDesc
#   (<relation> ^schema-name PrepRelation    #   Don't allow PrepRelation2
#               ^prep <prep>
#               ^object.referent <prep-obj-ref>)
#-->
#   #    Add the relation to the object
#   (<referent> ^relation <obj-relation>)
#   (<obj-relation> ^2 <prep-obj-ref>
#                   ^handle <prep>)
#   #    Set done flag
#   (<s> ^reference resolved
#        ^modifiers nil -)
#}
#
##   The same as above, but with a negation
#sp {comprehend-word*apply*ground-reference*done-already-there*with-relation-1*negated
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              #    Look for the hypothetical flag
#              ^superstate.comprehension.hypothetical true
#              ^modifiers nil    #    All modifiers have been applied
#             -^referent <referent>  #   No referents on the state
#             -^filter <filter>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #    Ignoring givenness for now
#   (<ref-desc> ^referent { <referent> <> nil }  #   Some referents on the RefDesc
#               ^relation { <relation> <> nil }) #   A relation on the RefDesc
#   (<relation> ^schema-name NegatedPrepRelation    #   Don't allow PrepRelation2
#               ^prep <prep>
#               ^object.referent <prep-obj-ref>
#               ^negation true)
#-->
#   #    Add the relation to the object
#   (<referent> ^relation <obj-relation>)
#   (<obj-relation> ^2 <prep-obj-ref>
#                   ^handle <prep>
#                   ^predicates <negation>)
#   (<negation> ^handle negation
#               ^modifier true)
#   #    Set done flag
#   (<s> ^reference resolved
#        ^modifiers nil -)
#}
#
##   This version handles a relation with two arguments,
##   like the preposition between.
##   Will need another rule to handle negation.
#sp {comprehend-word*apply*ground-reference*done-already-there*with-relation-2
#   (state <s> ^problem-space comprehend-word
#              ^operator <o>
#              #    Look for the hypothetical flag
#              ^superstate.comprehension.hypothetical true
#              ^modifiers nil    #    All modifiers have been applied
#             -^referent <referent>  #   No referents on the state
#             -^filter <filter>)
#   (<o> ^name ground-reference
#        ^meaning <ref-desc>)
#   #    Ignoring givenness for now
#   (<ref-desc> ^referent { <referent> <> nil }  #   Some referents on the RefDesc
#               ^relation { <relation> <> nil }) #   A relation on the RefDesc
#   (<relation> ^is.a PrepRelation2
#               ^prep <prep>
#               ^object.referent <prep-obj-ref>
#               ^object2.referent <prep-obj2-ref>)
#-->
#   #    Add the relation to the object
#   (<referent> ^relation <obj-relation>)
#   (<obj-relation> ^2 <prep-obj-ref>
#                   ^3 <prep-obj2-ref>
#                   ^handle <prep>)
#   #    Set done flag
#   (<s> ^reference resolved
#        ^modifiers nil -)
#}
