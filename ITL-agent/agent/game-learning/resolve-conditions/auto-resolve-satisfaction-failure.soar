sp {auto-resolve-satisfaction-failure*elaborate*unresolved
   (state <s> ^name auto-resolve-satisfaction-failure
              ^superstate.superstate <sss>)
   (<sss> ^condition <co>)
   (<co> -^result.set.<x>)
-->
   (<s> ^unresolved-condition <co>)
}
sp {auto-resolve-satisfaction-failure*propose*select-unresolved-condition
   (state <s> ^name auto-resolve-satisfaction-failure
              ^unresolved-condition <co>)
   (<co> ^name <name>)
-->
   (<s> ^operator <o> + )
   (<o> ^name select-unresolved-condition
        ^spelling <name>
        ^condition <co>)
}
sp {resolve*auto-resolve-satisfaction-failure*tie*alphanumeric*bias
   (state <s> ^superstate <ss>
              ^item <o1>
              ^item <o2>
              ^choices multiple)
   (<ss> ^name auto-resolve-satisfaction-failure
         ^operator <o1> +
         ^operator <o2> +)
   (<o1> ^spelling <s1> < <s2>)
   (<o2> ^spelling <s2>)
-->
   (<ss> ^operator <o1> > <o2>)
}
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*copy
   (state <s> ^name auto-resolve-satisfaction-failure
   		  	  ^top-state <ts>
              ^unresolved-condition <co>)
   (<co> ^name <name>)
   (<s> ^operator <o>)
   (<o> ^name select-unresolved-condition
        ^spelling <name>
        ^condition <co>)
-->
#(write (cmd print -d 2 <ts>))
   (<s> ^word (make-constant-symbol <name>))
}
#want this one?
sp {auto-resolve-satisfaction-failure*prefer*select-unresolved-condition*concept
   (state <s> ^name auto-resolve-satisfaction-failure
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^condition.type concept)
   (<o2> -^condition.type concept)
-->
   (<s> ^operator <o1> > <o2>)
}
#TODO in future may use this to pick different versions of between<< (multiple functions)
sp {auto-resolve-satisfaction-failure*prefer*select-unresolved-condition*function*concept
   (state <s> ^name auto-resolve-satisfaction-failure
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^condition <c1>)
   (<o2> ^condition <c2>)
   (<c1> -^type function)
   (<c2> ^type function)
   -{(<c1> ^args <a>)
     (<a> ^<< 1 2 3 >> <c2>)}
-->
   (<s> ^operator <o1> > <o2>)
}
sp {auto-resolve-satisfaction-failure*prefer*select-unresolved-condition*conceptr
   (state <s> ^name auto-resolve-satisfaction-failure
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^condition.args <a>)
   (<o2> ^condition <c2>)
   (<a> ^<< 1 2 3 >> <c2>)
-->
   (<s> ^operator <o2> > <o1>)
}
sp {auto-resolve-satisfaction-failure*prefer*select-unresolved-condition*concept*usedcurrent*first
   (state <s> ^name auto-resolve-satisfaction-failure
   		  	  ^linkstate <sss>
              ^operator <o1> +
              ^operator <o2> +)
   (<sss> ^main-type <gtype> ^<gtype> <g>)
   (<g> ^condition <c1> -^condition <c2>)
   (<o1> ^condition <c1>)
   (<c1> ^type concept)# want?
   (<o2> ^condition <c2>)
   (<c2> ^type concept) #want?
-->
   (<s> ^operator <o1> < <o2>)
}
#CASE 1 learned concept not detected, ask for another definition
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*noparse
   (state <s> ^name auto-resolve-satisfaction-failure
              ^quiescence t #do not chunk through this rule (failure case)
              ^top-state.dialog-context <dc>
              ^linkstate <ls>
              ^word <word> 
              ^top-state <ts>
              ^top-state.interaction.changes <c>
              ^operator <o>)
   (<ls> ^main-type <type> ^<type> <t> -^parsed-structure)
   (<t> ^nlp-set <nlp> ^formated)
   (<o> ^name select-unresolved-condition
        ^condition <co>
        ^spelling <spell>)
#(<dc> ^learn-link <ll>)
#(<ll> ^argnum <an>)
   (<co> ^name {<name2> <> <word>} ^args <args>)
   (<ts> -^smap.<spell>)
-{(<ts> ^smap.<spell2> <spell>)}
-->
   (<ts> ^smap <sm> ^new-spelling true)
   (<sm> ^<spell> <word>)
    #(<co> ^name <name2> -)
    #(<ll> ^argnum <an> -)
    #(<co> ^name <word>)
    (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-unknown-word
        ^parameters.word <word>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-unknown-word
          ^originator instructor)
   (<dc> ^learning-predicate <lp>)
   (<lp> ^name <word> ^spelling <spell> ^usage-args (deep-copy <args>))
   (<c> ^outgoing-message <out-msg>)
   (<out-msg> ^type unknown-defined-word
              ^fields.word <word>)
  # (<ps> ^learned-structure <nlp>)
}
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition
   (state <s> ^name auto-resolve-satisfaction-failure
              ^quiescence t #do not chunk through this rule (failure case)
              ^top-state.dialog-context <dc>
              ^linkstate <ls>
              ^word <word> 
              #^superstate <ss>
              ^top-state <ts>
              ^top-state.interaction.changes <c>
              ^operator <o>)
   (<ls> ^main-type <type> ^<type> <t> ^parsed-structure <ps>)
   (<t> ^nlp-set <nlp> ^formated)
   (<o> ^name select-unresolved-condition
        ^condition <co>
        ^spelling <spell>)
   (<dc> ^learn-link <ll>)
   (<ll> ^argnum <an>)
   (<co> ^name <name2> <> <word> ^args <args>)
   (<ts> -^smap.<spell>)
 -{(<ts> ^smap.<spell2> <spell>)}
-->
   (<ts> ^smap <sm>)
   (<sm> ^<spell> <word>)
   (<co> ^name <name2> -)
   (<ll> ^argnum <an> -)
   (<co> ^name <word>)
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-unknown-word
        ^parameters.word <word>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-unknown-word
          ^originator instructor)
   (<dc> ^learning-predicate <lp>)
   (<lp> ^name <word> ^spelling <spell> ^usage-args (deep-copy <args>))
   (<c> ^outgoing-message <out-msg>)
   (<out-msg> ^type unknown-defined-word
              ^fields.word <word>)
   (<ps> ^learned-structure <nlp>)
}
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*keep-spelling
   (state <s> ^name auto-resolve-satisfaction-failure
              ^quiescence t #do not chunk through this rule (failure case)
              ^top-state.dialog-context <dc>
              ^linkstate <ls>
              ^word <word> 
              ^top-state <ts>
              #^superstate <ss>
              ^top-state.interaction.changes <c>
              ^operator <o>)
   (<ls> ^main-type <type> ^<type> <t> ^parsed-structure <ps>)
   (<t> ^nlp-set <nlp> ^formated)
   (<o> ^name select-unresolved-condition
        ^condition <co>
        ^spelling <spell>)
   (<dc> ^learn-link <ll>)
   (<ll> ^argnum <an>)
   (<co> ^name {<name2> <> <word>} ^args <args>)
 #(<ts> -^smap.<spell>)
 #(<ss> ^keep-spelling <spell2>)
   (<ts> ^smap.<spell2> <spell>)
-->
   (<ts> ^smap <sm>)
   (<sm> ^<spell2> <word>)
   (<co> ^name <name2> -)
   (<ll> ^argnum <an> -)
   (<co> ^name <word>)
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-unknown-word
        ^parameters.word <word>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-unknown-word
          ^originator instructor)
   (<dc> ^learning-predicate <lp>)
   (<lp> ^name <word> ^spelling <spell2> ^usage-args (deep-copy <args>))
   (<c> ^outgoing-message <out-msg>)
   (<out-msg> ^type unknown-defined-word
              ^fields.word <word>)
   (<ps> ^learned-structure <nlp>)
}
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*keep-spelling*noparse
   (state <s> ^name auto-resolve-satisfaction-failure
              ^quiescence t #do not chunk through this rule (failure case)
              ^top-state.dialog-context <dc>
              ^linkstate <ls>
              ^word <word> 
              ^top-state <ts>
              #^superstate <ss>
              ^top-state.interaction.changes <c>
              ^operator <o>)
   (<ls> ^main-type <type> ^<type> <t> -^parsed-structure)
   (<t> ^nlp-set <nlp> ^formated)
   (<o> ^name select-unresolved-condition
        ^condition <co>
        ^spelling <spell>)
#(<dc> ^learn-link <ll>)
#(<ll> ^argnum <an>)
(<co> ^name {<name2> <> <word>} ^args <args>)
#(<ts> -^smap.<spell>)
#(<ss> ^keep-spelling <spell2>)
(<ts> ^smap.<spell2> <spell>)
-->
   (<ts> ^smap <sm> ^new-spelling true)
   (<sm> ^<spell2> <word>)
#    (<co> ^name <name2> -)
#    (<ll> ^argnum <an> -)
#    (<co> ^name <word>)
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type process-unknown-word
        ^parameters.word <word>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-unknown-word
          ^originator instructor)
   (<dc> ^learning-predicate <lp>)
   (<lp> ^name <word> ^spelling <spell2> ^usage-args (deep-copy <args>))
   (<c> ^outgoing-message <out-msg>)
   (<out-msg> ^type unknown-defined-word
              ^fields.word <word>)
 #  (<ps> ^learned-structure <nlp>)
}
#todo use smem search, check to make sure can chunk again
#case 2, try other spelling mapping (TODO temp solution need better smem linking), hanlding of parser
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-another
   (state <s> ^name auto-resolve-satisfaction-failure
              ^quiescence t #do not chunk through this rule (failure case)
              ^top-state <ts>
              ^operator <o>)
   (<o> ^name select-unresolved-condition
        ^condition <co>
        ^spelling <spell>)
   (<co> ^name <name2> <> <word2>)
   (<ts> ^smap.<spell> <word2>)
-->
#(<ss> ^keep-spelling <spell>)
   (<co> ^name <name2> -)
   (<co> ^name <word2>)
}
#####COMMENT OUT FOR NOW JK	726
#in the future should pre build all possible interpretations, not just hacky try changing one and see if makes work
#need to smem retrieve not use smap
##opposites
#sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-opposite
#   (state <s> ^name auto-resolve-satisfaction-failure
#              ^quiescence t #do not chunk through this rule (failure case)
#              #^top-state <ts>
#			  ^linkstate.opposite-table.pair <pa>
#              ^operator <o>)
#(<pa> ^word <spell> ^word {<name2> <> <spell>}) #on1 below1
#(<o> ^name select-unresolved-condition
#     ^condition <co>
#     ^spelling <spell2>) #below
#(<co> ^name <name2> ^args <a>) #below1
#(<a> ^1 <a1> ^2 <a2>)
##(<ts> ^smap.<spell> <word2>) #clear clear3
#-->
##(<ss> ^keep-spelling <spell>)
#    (<co> ^name <name2> -)
#(<a> ^1 <a1> -)
#(<a> ^2 <a2> -)
#(<a> ^2 <a1> ^1 <a2>)
#    (<co> ^name <spell>)
#}
#synonym
#sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-synonym
#   (state <s> ^name auto-resolve-satisfaction-failure
#              ^quiescence t #do not chunk through this rule (failure case)
#              ^top-state <ts>
#			  ^linkstate.synonym-table.pairs <pa>
#              ^operator <o>)
#(<pa> ^word <spell> ^word {<spell2> <> <spell>}) #clear empty
#(<o> ^name select-unresolved-condition
#     ^condition <co>
#     ^spelling <spell2>) #empty
#(<co> ^name <name2>) #empty1
#(<ts> ^smap.<spell> <word2>) #clear clear3
#-->
##(<ss> ^keep-spelling <spell>)
#    (<co> ^name <name2> -)
#    (<co> ^name <word2>)
#}
#antonym
#broken fires too often?
#sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-antonym
#   (state <s> ^name auto-resolve-satisfaction-failure
#              ^quiescence t #do not chunk through this rule (failure case)
#              ^top-state <ts>
#			  ^linkstate.antonym-table.pair <pa>
#              ^operator <o>)
#(<pa> ^word <spell> ^word {<spell2> <> <spell>}) #clear covered
#(<o> ^name select-unresolved-condition
#     ^condition <co>
#     ^spelling <spell2>) #covered
#(<co> ^name <name2> ^negative <t> ^negative false) #covered1
#(<ts> ^smap.<spell> <word2>) #clear clear3
#-->
##(<ss> ^keep-spelling <spell>)
#    (<co> ^name <name2> -)
#	(<co> ^negative <t> -)
#    (<co> ^name <word2>)
#	(<co> ^negative true)
#}
#sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-antonym*negative
#   (state <s> ^name auto-resolve-satisfaction-failure
#              ^quiescence t #do not chunk through this rule (failure case)
#              ^top-state <ts>
#			  ^linkstate.antonym-table.pair <pa>
#              ^operator <o>)
#(<pa> ^word <spell> ^word {<spell2> <> <spell>}) #clear covered
#(<o> ^name select-unresolved-condition
#     ^condition <co>
#     ^spelling <spell2>) #covered
#(<co> ^name <name2> ^negative <t> ^negative true) #covered1
#(<ts> ^smap.<spell> <word2>) #clear clear3
#-->
##(<ss> ^keep-spelling <spell>)
#    (<co> ^name <name2> -)
#	(<co> ^negative <t> -)
#    (<co> ^name <word2>)
#	(<co> ^negative false)
#}
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-another2
   (state <s> ^name auto-resolve-satisfaction-failure
              ^quiescence t #do not chunk through this rule (failure case)
              ^top-state <ts>
              ^operator <o>)
   (<o> ^name select-unresolved-condition
        ^condition <co>
        ^spelling <spell>)
   (<co> ^name <spell> <> <word2>)
   (<ts> ^smap.<spell2> <spell>)
   (<ts> ^smap.<spell2> <word2>)
-->
#(<ss> ^keep-spelling <spell>)
   (<co> ^name <name2> -)
   (<co> ^name <word2>)
}
sp {auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-anotherasdffg
   (state <s> ^name auto-resolve-satisfaction-failurex
              ^quiescence t #do not chunk through this rule (failure case)
              #^top-state <ts>
			  ^top-state <ts>
              ^superstate.superstate.superstate <ss>
              #^word <xr>
              ^operator <o>)
   (<o> ^name select-unresolved-condition
        ^condition <co>
        ^spelling <spell>)
   (<co> ^parameter <aa>)
   (<aa> ^1 <a1>)
##(<co> ^name <name2> <> <word2>)
##(<ts> ^smap.<spell> <word2>)
-->
   (write (cmd matches auto-resolve-satisfaction-failure*apply*select-unresolved-condition*try-another))
   (write (cmd pref <aa> 1 -w))
   (write (cmd print <co> -d 5))
}
#case 1
#could be because concept has another unknown definition
#case 2
#could be because concepts has another known definition
#case 3, bad argument connection
#case 4, description incorrect could list simplest condition could not satisfy
#only reach this case if ruled out 1 or 2
#case 5, got to isets, but there is a negpair case....
#would be useful application of preeti's work-> describing an unsatified concept in english= I could not find any matched objects, or i could not find a value of an object...
